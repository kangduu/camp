import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,a as n,b as a,d as t,e as s}from"./app-c0280372.js";const i={},r=s('<h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h2><h3 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate" aria-hidden="true">#</a> beforeCreate</h3><ul><li><p><code>可以</code></p><ul><li>能获取<code>$parent</code>,<code>$root</code></li><li>接收父组件传递的<code>监听器</code> （$on），并作相应处理；【子组件 beforeCreate 在父组件 beforeMount 后】</li></ul></li><li><p><code>不可</code></p><ul><li>获取不到<code>$children</code>,<code>$refs</code>, <code>$slots</code>, <code>$scopedSlots</code>；</li></ul></li></ul>',3),u=n("strong",null,"特殊的",-1),d={href:"https://cn.vuejs.org/v2/guide/render-function.html",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"created",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#created","aria-hidden":"true"},"#"),a(" created")],-1),h=n("p",null,[n("code",null,"可以")],-1),k=n("li",null,"发送 Ajax 请求（你可以在这里做这件事了）",-1),b={href:"https://vuejs.bootcss.com/api/#provide-inject",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"​",-1),g=n("li",null,[n("p",null,[n("code",null,"不可")]),n("ul",null,[n("li",null,[n("code",null,"$el"),a(" 属性不可用；")]),n("li",null,"无法与 DOM 进行交互，只能通过 vm.$nextTick 访问，不建议在这里操作 DOM。")])],-1),f=s('<h3 id="beforemount" tabindex="-1"><a class="header-anchor" href="#beforemount" aria-hidden="true">#</a> beforeMount</h3><blockquote><p>挂载前调用，这之前 template 模板已导入渲染函数编译；</p><p>虚拟 DOM 已创建完成，准备渲染。</p></blockquote><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h3><ul><li><p><code>可以</code></p><p>获取实例属性 <code>$slots</code>, <code>$scopedSlots</code></p></li></ul><blockquote><p>挂载完成调用，el 被新建的 vm.$el 代替；</p><p>真实 DOM 挂载完毕，数据完成双向绑定，可访问 DOM，使用$ref；</p></blockquote><h3 id="beforeupdate" tabindex="-1"><a class="header-anchor" href="#beforeupdate" aria-hidden="true">#</a> beforeupdate</h3><blockquote><p>更新前调用——响应式数据发生了更新，虚拟 DOM 重新渲染前；</p><p>修改数据，不会造成重渲染。</p><p>适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p></blockquote><h3 id="updated" tabindex="-1"><a class="header-anchor" href="#updated" aria-hidden="true">#</a> updated</h3><blockquote><p>更新完成调用，组件 DOM 也更新完成；</p><p>可以执行依赖于 DOM 的操作；</p><p><strong>避免在此期间更改状态</strong> ，可能导致无效循环的更新；</p><p>若一定要改变相应状态，那就在 computed 或 watcher 中完成相应逻辑。</p></blockquote><h3 id="activated" tabindex="-1"><a class="header-anchor" href="#activated" aria-hidden="true">#</a> activated</h3><blockquote><p><code>keep-alive</code>缓存的组件<strong>激活时</strong>调用</p></blockquote><h3 id="deactivated" tabindex="-1"><a class="header-anchor" href="#deactivated" aria-hidden="true">#</a> deactivated</h3><blockquote><p><code>keep-alive</code>缓存的组件<strong>停用时</strong>调用</p></blockquote><h3 id="beforedestory" tabindex="-1"><a class="header-anchor" href="#beforedestory" aria-hidden="true">#</a> beforeDestory</h3><blockquote><p>实例销毁之前调用，实例仍然完全可用</p><p>清除定时器、监听器等收尾工作</p></blockquote><h3 id="destoryed" tabindex="-1"><a class="header-anchor" href="#destoryed" aria-hidden="true">#</a> destoryed</h3><blockquote><p>实例销毁后调用</p><p>所以指令被解绑、所以事件监听被移除、所有子实例被销毁</p></blockquote>',17),_={id:"errorcaptured",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#errorcaptured","aria-hidden":"true"},"#",-1),x={href:"https://cn.vuejs.org/v2/api/#errorCaptured",target:"_blank",rel:"noopener noreferrer"},w=s('<blockquote><p>当<strong>捕获一个来自子孙组件的错误时</strong>被调用。</p></blockquote><h2 id="vue-中组件生命周期调用顺序" tabindex="-1"><a class="header-anchor" href="#vue-中组件生命周期调用顺序" aria-hidden="true">#</a> Vue 中组件生命周期<u>调用顺序</u></h2><ul><li>组件调用顺序都是<code>先父后子</code> ; <strong><u>渲染</u>完成</strong>顺序都是<code>先子后父</code></li><li>组件的销毁操作都是<code>先父后子</code> ; <strong><u>销毁</u>完成</strong>顺序都是<code>先子后父</code></li></ul><h3 id="加载渲染过程" tabindex="-1"><a class="header-anchor" href="#加载渲染过程" aria-hidden="true">#</a> 加载渲染过程</h3><p>$父 beforeCreate =&gt; 父 create =&gt; 父 beforeMount =&gt; 子 beforeCreate =&gt; 子 create =&gt; 子 beforeMount =&gt; 子 mounted =&gt; 父 mounted $</p><hr><h3 id="子组件更新过程" tabindex="-1"><a class="header-anchor" href="#子组件更新过程" aria-hidden="true">#</a> 子组件更新过程</h3><p>$父 beforeUpdate =&gt; 子 beforeUpdate =&gt; 子 updated =&gt; 父 updated $</p><h3 id="父组件更新过程" tabindex="-1"><a class="header-anchor" href="#父组件更新过程" aria-hidden="true">#</a> 父组件更新过程</h3>',9),q=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"父"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"U"),n("mi",null,"p"),n("mi",null,"d"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"e"),n("mo",null,"="),n("mo",null,">"),n("mtext",null,"子"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"U"),n("mi",null,"p"),n("mi",null,"d"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"父beforeUpdate => 子beforeUpdate")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"父"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"ore"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"子"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"ore"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e")])])])],-1),$=n("h3",{id:"销毁过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#销毁过程","aria-hidden":"true"},"#"),a(" 销毁过程")],-1),M=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"父"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"D"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"o"),n("mi",null,"y"),n("mo",null,"="),n("mo",null,">"),n("mtext",null,"子"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"D"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"o"),n("mi",null,"y"),n("mo",null,"="),n("mo",null,">"),n("mtext",null,"子"),n("mi",null,"d"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"o"),n("mi",null,"y"),n("mi",null,"e"),n("mi",null,"d"),n("mo",null,"="),n("mo",null,">"),n("mtext",null,"父"),n("mi",null,"d"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"o"),n("mi",null,"y"),n("mi",null,"e"),n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"父beforeDestroy => 子beforeDestroy => 子destroyed => 父destroyed")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"父"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"oreDes"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"roy"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"子"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"oreDes"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"roy"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"子"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"es"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"roye"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord cjk_fallback"},"父"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"es"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"roye"),n("span",{class:"mord mathnormal"},"d")])])])],-1),j=s(`<h2 id="特别注意" tabindex="-1"><a class="header-anchor" href="#特别注意" aria-hidden="true">#</a> 特别注意</h2><ul><li><p>所有的生命周期钩子自动绑定<code>this</code>上下文到实例中，<code>this</code>指代 vue 实例，则可以访问数据，属性和方法。</p></li><li><p>不要在<strong>选项属性</strong>或<strong>回调函数</strong>上<u>使用箭头函数</u>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 选项属性使用箭头函数</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&quot;me&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回调函数使用监听函数</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 箭头函数是没有this的，箭头函数绑定了父级上下文。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>mounted</code> <strong>不能</strong>保证所有的子组件也一起被挂载（组件的完全挂载，是从子到父完成的）。若希望等到视图渲染完成才执行操作，应该使用 vm.$nextTick()</p></li><li><p><code>updated</code> <strong>不会</strong>保证所有的子组件也都一起被重绘（组件的完成更新，是从子到父完成的）。希望等到整个视图都重绘完毕，同样应该使用 vm.$nextTick()</p></li><li><p>服务端渲染（ssr）不会调用的钩子</p><p><code>beforeMount </code> <code>mounted</code> <code>beforeupdate</code> <code>updated</code> <code>activated</code> <code>deactivated</code> <code>beforeDestory</code> <code>destoryed</code></p></li></ul><h2 id="qa" tabindex="-1"><a class="header-anchor" href="#qa" aria-hidden="true">#</a> QA</h2><p>Q：接口请求一般放在那个生命周期？</p>`,4),D=n("strong",null,"created",-1),V={href:"https://vuejs.bootcss.com/guide/ssr.html",target:"_blank",rel:"noopener noreferrer"},C=s(`<hr><p>Q：Vue 实例选项属性 data，props，methods，computed，watch 的执行顺序？</p><p>A：<strong>props &gt; methods &gt; data &gt; computed &gt; watch</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src\\core\\instance\\state.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  vm<span class="token punctuation">.</span>_watchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 【1】props</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token function">initMethods</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 【2】 methods</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 【3】data</span>
    <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* asRootData */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 【4】computed</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 【5】watch</span>
    <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function O(U,A){const e=l("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[u,a("，$createElemt 是使用 render 函数渲染时的 h 函数，"),n("a",d,[a("参考 render 函数"),t(e)])]),m,n("ul",null,[n("li",null,[h,n("ul",null,[k,n("li",null,[a("获取父组件注入的数据（父组件注册，所有子组件[包括孙子]都可获取）"),n("a",b,[a("provide / inject"),t(e)])]),v])]),g]),f,n("h3",_,[y,a(),n("a",x,[a("errorCaptured"),t(e)])]),w,q,$,M,j,n("p",null,[a("A：一般都是放在 "),D,a(" 中。注意，"),n("a",V,[a("服务端渲染(ssr)"),t(e)]),a("也放在 created 中。")]),C])}const N=o(i,[["render",O],["__file","Vue2-生命周期.html.vue"]]);export{N as default};
