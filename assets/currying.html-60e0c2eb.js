const n=JSON.parse('{"key":"v-5e744e71","path":"/js/currying.html","title":"函数柯里化（Curring）","lang":"zh-CN","frontmatter":{"title":"函数柯里化（Curring）","category":"javascript","description":"柯里化也属于一种高阶函数 把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科 自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值） 结合代码看看下面的这个实例吧 // 普通的add函数 function add(x, y) { return x + y; } console.log(add(3, 4)); // 7 // 柯里化后 function curryingAdd(x) { return function (y) { return x + y; }; } console.log(curryingAdd(3)(4)); // 7","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camp/js/currying.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"函数柯里化（Curring）"}],["meta",{"property":"og:description","content":"柯里化也属于一种高阶函数 把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科 自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值） 结合代码看看下面的这个实例吧 // 普通的add函数 function add(x, y) { return x + y; } console.log(add(3, 4)); // 7 // 柯里化后 function curryingAdd(x) { return function (y) { return x + y; }; } console.log(curryingAdd(3)(4)); // 7"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-12T08:20:45.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-06-12T08:20:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数柯里化（Curring）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-12T08:20:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"柯里化的性能","slug":"柯里化的性能","link":"#柯里化的性能","children":[]},{"level":2,"title":"柯里化的应用","slug":"柯里化的应用","link":"#柯里化的应用","children":[{"level":3,"title":"参数复用","slug":"参数复用","link":"#参数复用","children":[]},{"level":3,"title":"提前确认","slug":"提前确认","link":"#提前确认","children":[]},{"level":3,"title":"js 中的bind方法","slug":"js-中的bind方法","link":"#js-中的bind方法","children":[]}]},{"level":2,"title":"经典面试题","slug":"经典面试题","link":"#经典面试题","children":[{"level":3,"title":"问题 1 ：实现一个 add 方法，使计算结果能够满足以下预期","slug":"问题-1-实现一个-add-方法-使计算结果能够满足以下预期","link":"#问题-1-实现一个-add-方法-使计算结果能够满足以下预期","children":[]},{"level":3,"title":"问题 2 ：实现 sum(1)(2)(3) 返回结果是 1,2,3 之和","slug":"问题-2-实现-sum-1-2-3-返回结果是-1-2-3-之和","link":"#问题-2-实现-sum-1-2-3-返回结果是-1-2-3-之和","children":[]},{"level":3,"title":"问题 3 ：实现一个 curry 函数，将普通函数进行柯里化","slug":"问题-3-实现一个-curry-函数-将普通函数进行柯里化","link":"#问题-3-实现一个-curry-函数-将普通函数进行柯里化","children":[]}]}],"git":{"createdTime":1749716445000,"updatedTime":1749716445000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1086},"filePathRelative":"js/currying.md","localizedDate":"2025年6月12日","excerpt":"<p><code>柯里化也属于一种高阶函数</code></p>\\n<blockquote>\\n<p>把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科</p>\\n</blockquote>\\n<p>自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值）</p>\\n<p>结合代码看看下面的这个实例吧</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 普通的add函数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x<span class=\\"token punctuation\\">,</span> y</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 7</span>\\n\\n<span class=\\"token comment\\">// 柯里化后</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">curryingAdd</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">y</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">curryingAdd</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 7</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
