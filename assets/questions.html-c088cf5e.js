const e=JSON.parse(`{"key":"v-69502096","path":"/javascript/questions.html","title":"Question Collection","lang":"zh-CN","frontmatter":{"title":"Question Collection","description":"为什么 Object.prototype.toString.call() 可以准确判断对象类型？ 在回答这个问题之前，我们必须掌握以下知识点： instanceof typeof Object.prototype.toString，返回对象的字符串形式 delete 操作符 Object.prototype.hasOwnProperty()方法会返回一个布尔值，指示对象自身属性中是否具有指定属性 Function.prototype.call()","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camp/javascript/questions.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"Question Collection"}],["meta",{"property":"og:description","content":"为什么 Object.prototype.toString.call() 可以准确判断对象类型？ 在回答这个问题之前，我们必须掌握以下知识点： instanceof typeof Object.prototype.toString，返回对象的字符串形式 delete 操作符 Object.prototype.hasOwnProperty()方法会返回一个布尔值，指示对象自身属性中是否具有指定属性 Function.prototype.call()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-25T09:52:13.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2024-12-25T09:52:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Question Collection\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-25T09:52:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"为什么 Object.prototype.toString.call() 可以准确判断对象类型？","slug":"为什么-object-prototype-tostring-call-可以准确判断对象类型","link":"#为什么-object-prototype-tostring-call-可以准确判断对象类型","children":[{"level":3,"title":"探讨对象的 toString 方法","slug":"探讨对象的-tostring-方法","link":"#探讨对象的-tostring-方法","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"References","slug":"references","link":"#references","children":[]}]},{"level":2,"title":"判断一个对象是否为空对象？","slug":"判断一个对象是否为空对象","link":"#判断一个对象是否为空对象","children":[{"level":3,"title":"使用JSON.stringify(object) 方法，将对象转换为字符串，进行序列化。","slug":"使用json-stringify-object-方法-将对象转换为字符串-进行序列化。","link":"#使用json-stringify-object-方法-将对象转换为字符串-进行序列化。","children":[]},{"level":3,"title":"for...in... 遍历对象，同时使用 hasOwnProperty()去除原型属性","slug":"for-in-遍历对象-同时使用-hasownproperty-去除原型属性","link":"#for-in-遍历对象-同时使用-hasownproperty-去除原型属性","children":[]},{"level":3,"title":"jQuery 的 isEmptyObject()方法","slug":"jquery-的-isemptyobject-方法","link":"#jquery-的-isemptyobject-方法","children":[]},{"level":3,"title":"Object.getOwnPropertyNames()方法","slug":"object-getownpropertynames-方法","link":"#object-getownpropertynames-方法","children":[]},{"level":3,"title":"Object.keys()方法","slug":"object-keys-方法","link":"#object-keys-方法","children":[]}]},{"level":2,"title":"连续赋值问题","slug":"连续赋值问题","link":"#连续赋值问题","children":[{"level":3,"title":"你应该知道的知识","slug":"你应该知道的知识","link":"#你应该知道的知识","children":[]},{"level":3,"title":"解析为原始赋值结构","slug":"解析为原始赋值结构","link":"#解析为原始赋值结构","children":[]},{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"['1', '2', '3'].map(parseInt) 结果是什么？为什么？","slug":"_1-2-3-map-parseint-结果是什么-为什么","link":"#_1-2-3-map-parseint-结果是什么-为什么","children":[]},{"level":2,"title":"如何提升 JavaScript 变量的存储性能？","slug":"如何提升-javascript-变量的存储性能","link":"#如何提升-javascript-变量的存储性能","children":[]},{"level":2,"title":"介绍下 Set、Map、WeakSet 和 WeakMap 的区别？","slug":"介绍下-set、map、weakset-和-weakmap-的区别","link":"#介绍下-set、map、weakset-和-weakmap-的区别","children":[]},{"level":2,"title":"ES5/ES6 的继承除了写法以外还有什么区别？","slug":"es5-es6-的继承除了写法以外还有什么区别","link":"#es5-es6-的继承除了写法以外还有什么区别","children":[]},{"level":2,"title":"setTimeout、Promise、Async/Await 的区别","slug":"settimeout、promise、async-await-的区别","link":"#settimeout、promise、async-await-的区别","children":[]},{"level":2,"title":"Async/Await 如何通过同步的方式实现异步","slug":"async-await-如何通过同步的方式实现异步","link":"#async-await-如何通过同步的方式实现异步","children":[]}],"git":{"createdTime":1735120333000,"updatedTime":1735120333000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":7.65,"words":2294},"filePathRelative":"javascript/questions.md","localizedDate":"2024年12月25日","excerpt":"<h2> 为什么 Object.prototype.toString.call() 可以准确判断对象类型？</h2>\\n<p>在回答这个问题之前，我们必须掌握以下知识点：</p>\\n<ul>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">instanceof</a></li>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">typeof</a></li>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Object.prototype.toString</a>，返回对象的字符串形式</li>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">delete 操作符</a></li>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Object.prototype.hasOwnProperty()</a>方法会返回一个布尔值，指示对象自身属性中是否具有指定属性</li>\\n<li><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Function.prototype.call()</a></li>\\n</ul>","autoDesc":true}`);export{e as data};
