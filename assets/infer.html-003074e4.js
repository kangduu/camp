import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as s,b as n,d as t,e}from"./app-ce51ebc2.js";const r={},i=e(`<h2 id="why-is-the-infer-keyword-needed-in-typescript" tabindex="-1"><a class="header-anchor" href="#why-is-the-infer-keyword-needed-in-typescript" aria-hidden="true">#</a> Why is the infer keyword needed in Typescript?</h2><p><strong>使用 infer ，TS 编译器可确保您已显式声明所有类型变量</strong>，我们看看下面的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">infer</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">InferType</span> <span class="token operator">=</span> MyType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> infer<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type InferReturnType = (value: string) =&gt; string</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码可以推断出 InferReturnType 的类型是 <code>(value: string) =&gt; string</code>，</p><p>如果没有指定 <code>infer</code>，那么 TS 将会报错:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// error : Name &quot;R&quot; not found</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k=s("code",null,"type R = { name: string }",-1),u=s("br",null,null,-1),d=s("code",null,"T",-1),y={href:"https://www.typescriptlang.org/docs/handbook/type-compatibility.html",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"R",-1),g=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MyType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Account</span> <span class="token operator">=</span> MyType<span class="token operator">&lt;</span><span class="token punctuation">{</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码 <code>Account</code> 的类型是 <code>type Account = never</code></p><p>好了，现在我们即定义 <code>type R = { name: string }</code> 又使用 <code>infer R</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MyType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Account</span> <span class="token operator">=</span> MyType<span class="token operator">&lt;</span><span class="token punctuation">{</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码 <code>Account</code> 的类型是 <code>type Account = { phone: string }</code> ， 这说明 <code>infer R</code> 遮蔽了同名类型 <code>R</code> 声明的类型引用。</p><h2 id="巩固练习" tabindex="-1"><a class="header-anchor" href="#巩固练习" aria-hidden="true">#</a> 巩固练习</h2>`,6),b={id:"实现-returntype",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#实现-returntype","aria-hidden":"true"},"#",-1),h={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">GreetingReturn</span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> greeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> statement<span class="token operator">:</span> GreetingReturn <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&quot;kangduu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, kangduu</span>

<span class="token comment">// test</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T1 = number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T2 = void</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T3 = unknown</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T4 = number[]</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T5</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type5 = { a: number; b: string }</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T6</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T6 = any</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T7</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T7 = never</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T8</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T8 = any warning: 类型“string”不满足约束“(...args: any[]) =&gt; any”</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T9</span></span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type T9 = any warning: 类型“Function”不满足约束“(...args: any[]) =&gt; any”。 类型“Function”提供的内容与签名“(...args: any[]): any”不匹配。</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>一个通用函数类型除了使用 <code>Function</code> 外，还可以向上面那样写为 <code>(...args: any[]) =&gt; any</code></mark></p></blockquote>`,2),f={id:"实现-await",tabindex:"-1"},T=s("a",{class:"header-anchor",href:"#实现-await","aria-hidden":"true"},"#",-1),_={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#awaitedtype",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> PromiseType<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P1</span></span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type P1 = string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P2</span></span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type P1 = number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P3</span></span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> PromiseType<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type P1 = number | boolean</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回函数的第一个参数类型" tabindex="-1"><a class="header-anchor" href="#返回函数的第一个参数类型" aria-hidden="true">#</a> 返回函数的第一个参数类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FnFirstArg<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F1</span></span> <span class="token operator">=</span> FnFirstArg<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type F1 = unknown</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F2</span></span> <span class="token operator">=</span> FnFirstArg<span class="token operator">&lt;</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type F2 = string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F3</span></span> <span class="token operator">=</span> FnFirstArg<span class="token operator">&lt;</span><span class="token punctuation">(</span>phone<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> addr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type F3 = number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F4</span></span> <span class="token operator">=</span> FnFirstArg<span class="token operator">&lt;</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type F4 = Promise&lt;string&gt;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F5</span></span> <span class="token operator">=</span> FnFirstArg<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type F5 = any warning: 类型“string”不满足约束“(...args: any[]) =&gt; any”</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回数组每一个元素的类型" tabindex="-1"><a class="header-anchor" href="#返回数组每一个元素的类型" aria-hidden="true">#</a> 返回数组每一个元素的类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ArrayElementType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> Each<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> Each <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> ArrayElementType<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type A1 = string | number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> ArrayElementType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type A2 = string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A3</span></span> <span class="token operator">=</span> ArrayElementType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type A3 = any warning: 类型“string”不满足约束“any[]”</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A4</span></span> <span class="token operator">=</span> ArrayElementType<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type A4 = never</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,6),x=s("code",null,"infer",-1),F={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"extends",-1),M=s("li",null,[s("code",null,"infer R"),n(" 会遮蔽了同名类型声明的类型引用。")],-1),P=s("li",null,[n("通用函数类型还可写成 "),s("code",null,"(...args: any[]) => any")],-1),E=s("h2",{id:"references",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),n(" References")],-1),q={href:"https://www.typescriptlang.org/docs/handbook/type-compatibility.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.typescriptlang.org/docs/handbook/type-inference.html#handbook-content",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types",target:"_blank",rel:"noopener noreferrer"},V={href:"https://stackoverflow.com/questions/60067100/why-is-the-infer-keyword-needed-in-typescript",target:"_blank",rel:"noopener noreferrer"};function B(S,G){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,s("p",null,[n("细心的你会发现，上述代码如果指定了 R 的类型，比如 "),k,n("，"),u,n(" 这个时候编辑器会检查 "),d,n(" 是否"),s("a",y,[n("可分配"),t(a)]),n("给 "),m]),g,s("h3",b,[v,n(" 实现 "),s("a",h,[n("ReturnType"),t(a)])]),w,s("h3",f,[T,n(" 实现 "),s("a",_,[n("Await"),t(a)])]),R,s("ol",null,[s("li",null,[n("♥♥♥ "),x,n(" 仅在"),s("a",F,[n("条件类型"),t(a)]),n("的 "),A,n(" 子句中使用。")]),M,P]),E,s("ul",null,[s("li",null,[s("a",q,[n("Type Compatibility"),t(a)])]),s("li",null,[s("a",I,[n("Conditional Types"),t(a)])]),s("li",null,[s("a",N,[n("Type Inference"),t(a)])]),s("li",null,[s("a",C,[n("Inferring Within Conditional Types"),t(a)])]),s("li",null,[s("a",V,[n("stack overflow"),t(a)])])])])}const L=p(r,[["render",B],["__file","infer.html.vue"]]);export{L as default};
