import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as t,d as l,e}from"./app-4520e1bb.js";const d={},p=e('<h3 id="伪类" tabindex="-1"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h3><p>伪类<strong>存在的意义</strong>是<code>通过选择器找到那些不存在于DOM树中的信息</code>以及<code>不能被常规CSS选择器获取到的信息</code>。</p><p>伪类由一个<code>冒号 : </code>开头，冒号后面是伪类的名称和包含在圆括号中的可选参数。</p><p>任何常规选择器可以在任何位置使用伪类。伪类语法不区别大小写。一些伪类的作用会互斥，另外一些伪类可以同时被同一个元素使用。并且，为了满足用户在操作DOM时产生的DOM结构改变，伪类也可以是动态的。</p><figure><img src="http://dukangblog.top/img/pseudo.class.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="伪元素" tabindex="-1"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h3><p>伪元素在DOM树中创建了一些抽象元素【不存在于文档语言里的（可以理解为html源码）】；</p><p>CSS3中伪元素由两个 <code>冒号:: </code>开头，然后是伪元素的名称。（使用两个冒号::是为了区别伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性，CSS2中已存的伪元素仍然可以使用一个冒号:的语法，但是CSS3中新增的伪元素必须使用两个冒号::）；</p><p><strong>一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后</strong> 。（不排除未来会加入同时使用多个伪元素的机制）</p><figure><img src="http://dukangblog.top/img/pseudo.element.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="伪元素和伪类的区别" tabindex="-1"><a class="header-anchor" href="#伪元素和伪类的区别" aria-hidden="true">#</a> 伪元素和伪类的区别</h3><ul><li>伪类本质上是为了<code>弥补常规CSS选择器的不足</code>，以便<code>获取到更多信息</code>；</li><li>伪元素本质上是<code>创建一个有内容的虚拟容器</code>；</li><li>语法不同，伪类的操作对象是<code>文档树中已有的元素</code>，而伪元素则创建了一个<code>文档树外的元素</code>；</li><li>可以同时使用多个伪类，却只能同时使用一个伪元素；</li><li>在CSS3中，伪类用单冒号:表示；而伪元素用双冒号::表示。（由于IE8及以下的一些浏览器不兼容双冒号<code>::</code>表示，所以除了少部分伪元素，其余伪元素既可以使用单冒号<code>:</code>，也可以使用双冒号<code>::</code>）</li></ul>',12),r={href:"http://dukangblog.top/2020/03/20/%E9%9D%A2%E8%AF%95-%E7%BC%96%E7%A8%8B%E9%A2%98/",target:"_blank",rel:"noopener noreferrer"},u=e(`<h3 id="特别需要注意" tabindex="-1"><a class="header-anchor" href="#特别需要注意" aria-hidden="true">#</a> 特别需要注意</h3><ul><li><h6 id="伪类的使用技巧" tabindex="-1"><a class="header-anchor" href="#伪类的使用技巧" aria-hidden="true">#</a> 伪类的使用技巧</h6></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 1.冒号前无元素的情况 */</span>
<span class="token selector">ul :not(div)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*ul内不是div的元素*/</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">ul :nth-child(2n)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ul的所有子元素（偶数），不分类型，也可使用old（奇） 和 even（偶） */</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 2. 冒号前有元素的情况 */</span>
<span class="token selector">ul li:nth-child(2n)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ul的所有 li 子元素（偶数），只有li */</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function h(m,v){const a=o("ExternalLinkIcon");return c(),i("div",null,[p,n("p",null,[n("a",r,[t("CSS3中的选择器"),l(a)])]),u])}const b=s(d,[["render",h],["__file","伪元素-伪类.html.vue"]]);export{b as default};
