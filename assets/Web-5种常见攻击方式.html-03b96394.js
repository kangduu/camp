import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as a,d as t,e}from"./app-07d6e59a.js";const i={},u=e(`<h3 id="web-安全问题-5-种常见的攻击方式" tabindex="-1"><a class="header-anchor" href="#web-安全问题-5-种常见的攻击方式" aria-hidden="true">#</a> Web 安全问题（5 种常见的攻击方式）</h3><ol><li>SQL 注入</li><li>XSS</li><li>CSRF</li><li>点击劫持</li><li>中间人攻击</li></ol><h3 id="_1-sql-注入" tabindex="-1"><a class="header-anchor" href="#_1-sql-注入" aria-hidden="true">#</a> 1. SQL 注入</h3><blockquote><p>后端人员使用<strong>用户输入的数据</strong>来**【拼接 SQL 查询语句】**时未做防范，使得一些恶意的输入产生了有问题的 SQL 语句</p></blockquote><p><code>示例</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请求地址</span>
test<span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span>

<span class="token comment">//SQL语句</span>
sql <span class="token operator">=</span> <span class="token string">&quot;select * from test where id=&quot;</span><span class="token punctuation">,</span> $id

<span class="token comment">//正常情况：我们只想获取id=1的文章内容</span>

<span class="token comment">//攻击者可恶意输入</span>
test<span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token constant">OR</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// 这样导致id=-1 OR 1=1 永远为true，进而where语句失效（无意义），则可以获取全部内容（test表）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>规避</code></p><p>使用<strong>过滤</strong>和<strong>验证</strong>机制，有效预防<strong>SQL 注入</strong>攻击。</p><h3 id="_2-xss" tabindex="-1"><a class="header-anchor" href="#_2-xss" aria-hidden="true">#</a> 2. XSS</h3><p><code>描述</code></p><p><strong>跨站脚本攻击</strong>，通过**【代码注入】**的方式来达到攻击的目的。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>text<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>您输入的内容：{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--!--</span><span class="token punctuation">&gt;</span></span>
	如果我们输入了类式 【 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>】 这样的信息，导致提交后可以执行等操作（支付操作等），Chrome是可以提示并拦截的，但不是所有的浏览器都可以的。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>--!--</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>规避</code></p><ol><li><p><strong>字符转义</strong></p><p>转义输入输出的内容【引号、尖括号、斜杠等】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span> 替换为 <span class="token operator">&amp;</span>
<span class="token operator">&lt;</span> <span class="token operator">===</span><span class="token operator">&gt;</span>  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token operator">===</span><span class="token operator">&gt;</span>  <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
” <span class="token operator">===</span><span class="token operator">&gt;</span>  &quot;
‘ <span class="token operator">===</span><span class="token operator">&gt;</span>  <span class="token operator">&amp;</span>#x27<span class="token punctuation">;</span>
<span class="token operator">/</span> <span class="token operator">===</span><span class="token operator">&gt;</span>  <span class="token operator">&amp;</span>#x2f<span class="token punctuation">;</span>
<span class="token operator">...</span><span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回头看上面的例子</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
转义为 <span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>alert(&#39;1&#39;)<span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token entity" title="/">&amp;#x2f;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样转义后，将无法执行对应的操作了。</p><p><strong>但是</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{url}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

这里的 url 可以是任何协议的地址，问题就在于，如果链接存在【 javascript：】开头的协议，便会执行后边的代码。 类式的还有：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{url}}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{url}}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>

上述的这几种情况：应该使用【白名单】检查协议，只允许http、https、meilto、等安全协议
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，【富文本】则也需要白名单过滤，参考：</p></li><li><p><strong>CSP</strong> (Content Security Policy)</p></li></ol><p>其本质也是使用白名单，<strong>设置允许浏览器加载哪些外部资源</strong>。</p><p>开启 CSP 的两种方式：</p><ul><li>设置 <strong>HTTP 的 Header</strong> 中的 <code>Content-Security-Policy </code></li><li>设置<code>meta</code>标签的方式</li></ul><h3 id="_3-csrf-cross-site-request-forgery" tabindex="-1"><a class="header-anchor" href="#_3-csrf-cross-site-request-forgery" aria-hidden="true">#</a> 3. CSRF( Cross Site Request Forgery)</h3><p><code>跨站请求伪造</code> — **借用 用户的<u>身份</u>或<u>权限</u>**悄咪咪的完成某些操作。本质 — <code>Cookie</code></p>`,19),r={href:"http://aaa.com/pay?id=123&money=1000%E3%80%91%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%90%BA%E5%B8%A6cookie%EF%BC%8C%E4%BB%A5%E4%BE%BFserver%E7%AB%AF%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%EF%BC%9B",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[a("现在，A 网站请求 B 网站的 API，是不可能携带 cookie 的，"),n("strong",null,"同源策略"),a("限制；")],-1),k={href:"http://aaa.com/pay?id=123&money=1000%E3%80%91%E5%88%99%E4%BC%9A%E6%90%BA%E5%B8%A6A%E7%BD%91%E7%AB%99cookie",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[a("防御 "),n("ul",null,[n("li",null,[a("请求各个层级添加"),n("strong",null,"权限验证"),a(" （如现金支付需要密码或扫码等验证）")]),n("li",null,"敏感接口使用 POST")])],-1),g=n("h3",{id:"_4-点击劫持-click-jacking-ui-覆盖攻击",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-点击劫持-click-jacking-ui-覆盖攻击","aria-hidden":"true"},"#"),a(" 4. 点击劫持（click-jacking）/ UI 覆盖攻击")],-1),v=n("p",null,[a("主要攻击方式："),n("strong",null,"按钮上加一次透明的 iframe")],-1),h=n("p",null,"防御",-1),b=n("ul",null,[n("li",null,"HTTP 头防御")],-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options",target:"_blank",rel:"noopener noreferrer"},q=e(`<ul><li>javascript 防御 —— 域名一致性</li></ul><p>判断顶层视口的域名是不是和本页面的域名一致，如果不一致就让恶意网页自动跳转到我方的网页。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname <span class="token operator">!==</span> self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;您正在访问不安全的页面，即将跳转到安全页面！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  top<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f=n("h3",{id:"_5-中间人攻击-man-in-the-middle-attack-mitm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-中间人攻击-man-in-the-middle-attack-mitm","aria-hidden":"true"},"#"),a(" 5. 中间人攻击(Man-in-the-Middle Attack, MITM)")],-1),x=n("p",null,[a("通过"),n("strong",null,"拦截正常的网络通信数据"),a("，并"),n("strong",null,"进行数据篡改和嗅探"),a("来达到攻击的目的，而通信的双方却毫不知情。如 SMB 会话劫持、DNS 欺骗攻击")],-1),S=n("p",null,"建议",-1),y=n("li",null,"确保当前你所访问的网站使用了 HTTPS",-1),E={href:"https://zhangzifan.com/hsts.html",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"不要在公共 Wi-Fi 上发送敏感数据",-1),B=n("li",null,"如果你的网站使用了 SSL，确保你禁用了不安全的 SSL/TLS 协议。",-1),C=n("li",null,"不要点击恶意链接或电子邮件。",-1),j=e(`<li><p>window.opener 存在的隐藏问题</p><p>带有 <code>target=&quot;_blank&quot; </code>跳转的网页拥有了浏览器 <code>window.opener</code> 对象赋予的对原网页的跳转权限，这可能会被恶意网站利用，</p><blockquote><p>例如一个恶意网站在某 UGC 网站 Po 了其恶意网址，该 UGC 网站用户在新窗口打开页面时，恶意网站利用该漏洞将原 UGC 网站跳转到伪造的钓鱼页面，用户返回到原窗口时可能会忽视浏览器 URL 已发生了变化，伪造页面即可进一步进行钓鱼或其他恶意行为:</p></blockquote><p><code>修复</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noopener noreferrer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> /*添加 rel 属性值*/ 缺点： referrer会导致目标网址没办法检测来源地址。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>好的做法</strong>——所有的外部链接都替换为内部的跳转连接服务，点击连接时，先跳到内部地址，再由服务器重定向（ redirect） 到外部网址。（你应该指定限制很多站点都是这样做的，即规避了风险，也控制了非法站点的打开）​</p></li>`,1);function T(P,L){const s=o("ExternalLinkIcon");return l(),c("div",null,[u,n("ul",null,[n("li",null,[a("理论基础 "),n("ul",null,[n("li",null,[a("登录 A 网站，此时 cookie 中便会记录登录标记，正常情况下在 A 网站发起【"),n("a",r,[a("http://aaa.com/pay?id=123&money=1000】会自动携带cookie，以便server端权限认证；"),t(s)])]),d,n("li",null,[a("重点，C 网站中去请求 A 网站中的 API【"),n("a",k,[a("http://aaa.com/pay?id=123&money=1000】则会携带A网站cookie"),t(s)])])])]),m]),g,v,n("ul",null,[n("li",null,[h,b,n("p",null,[a("通过配置 nginx 发送 "),n("a",_,[a("X-Frame-Options"),t(s)]),a(" 响应头，这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。 这样浏览器就会阻止嵌入网页的渲染。")]),q])]),f,x,n("ul",null,[n("li",null,[S,n("ul",null,[y,n("li",null,[a("如果你是一个网站管理员，你应当执行"),n("a",E,[a("HSTS 协议"),t(s)])]),A,B,C])]),j])])}const H=p(i,[["render",T],["__file","Web-5种常见攻击方式.html.vue"]]);export{H as default};
