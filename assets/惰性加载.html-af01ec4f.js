const n=JSON.parse(`{"key":"v-2fab44f8","path":"/posts/javascript/%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD.html","title":"Javascript惰性加载，不重复判断","lang":"zh-CN","frontmatter":{"title":"Javascript惰性加载，不重复判断","category":"javascript","description":"惰性加载存在的意义 惰性加载，意义在于避免重复的嗅探判断操作，因为这些操作在每次代码执行时都是一样的，而我们可以在一次执行时就得到嗅探结果，从而提高代码效率。 下面以案例佐证 我们在做兼容性处理时，会有下面这样的判断，这样处理的话，每调用一次就会执行一次判断， let addEvent = function (ele, type, handler) { if (window.addEventListener) { return ele.addEventListener(type, handler, false) } if (window.attachEvent) { return ele.attachEvent('on' + type, handler) } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/posts/javascript/%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"Javascript惰性加载，不重复判断"}],["meta",{"property":"og:description","content":"惰性加载存在的意义 惰性加载，意义在于避免重复的嗅探判断操作，因为这些操作在每次代码执行时都是一样的，而我们可以在一次执行时就得到嗅探结果，从而提高代码效率。 下面以案例佐证 我们在做兼容性处理时，会有下面这样的判断，这样处理的话，每调用一次就会执行一次判断， let addEvent = function (ele, type, handler) { if (window.addEventListener) { return ele.addEventListener(type, handler, false) } if (window.attachEvent) { return ele.attachEvent('on' + type, handler) } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-08T08:25:45.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2023-09-08T08:25:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javascript惰性加载，不重复判断\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-08T08:25:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"惰性加载存在的意义","slug":"惰性加载存在的意义","link":"#惰性加载存在的意义","children":[]}],"git":{"createdTime":1694161545000,"updatedTime":1694161545000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"posts/javascript/惰性加载.md","localizedDate":"2023年9月8日","excerpt":"<h2> 惰性加载存在的意义</h2>\\n<p>惰性加载，意义在于避免重复的嗅探判断操作，因为这些操作在每次代码执行时都是一样的，而我们可以在一次执行时就得到嗅探结果，从而提高代码效率。</p>\\n<h6> 下面以案例佐证</h6>\\n<p>我们在做兼容性处理时，会有下面这样的判断，这样处理的话，每调用一次就会执行一次判断，</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> <span class=\\"token function-variable function\\">addEvent</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">ele<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> handler</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>window<span class=\\"token punctuation\\">.</span>addEventListener<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> ele<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">,</span> handler<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>window<span class=\\"token punctuation\\">.</span>attachEvent<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> ele<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">attachEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'on'</span> <span class=\\"token operator\\">+</span> type<span class=\\"token punctuation\\">,</span> handler<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
