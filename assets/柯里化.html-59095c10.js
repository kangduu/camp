const n=JSON.parse('{"key":"v-bc4a0654","path":"/posts/javascript/%E6%9F%AF%E9%87%8C%E5%8C%96.html","title":"Javascript函数柯里化","lang":"zh-CN","frontmatter":{"title":"Javascript函数柯里化","category":"javascript","description":"函数柯里化(currying) 柯里化也属于一种高阶函数 把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科 自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值） 结合代码看看下面的这个实例吧 // 普通的add函数 function add(x, y) { return x + y } console.log(add(3, 4)); // 7 // 柯里化后 function curryingAdd(x) { return function (y) { return x + y } } console.log(curryingAdd(3)(4)); // 7","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/javascript/%E6%9F%AF%E9%87%8C%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"前端集训营"}],["meta",{"property":"og:title","content":"Javascript函数柯里化"}],["meta",{"property":"og:description","content":"函数柯里化(currying) 柯里化也属于一种高阶函数 把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科 自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值） 结合代码看看下面的这个实例吧 // 普通的add函数 function add(x, y) { return x + y } console.log(add(3, 4)); // 7 // 柯里化后 function curryingAdd(x) { return function (y) { return x + y } } console.log(curryingAdd(3)(4)); // 7"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-08T08:25:45.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2023-09-08T08:25:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javascript函数柯里化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-08T08:25:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":3,"title":"问题1 ：实现一个add方法，是计算结果能够满足以下预期","slug":"问题1-实现一个add方法-是计算结果能够满足以下预期","link":"#问题1-实现一个add方法-是计算结果能够满足以下预期","children":[]},{"level":3,"title":"问题2 ：实现 sum(1)(2)(3) 返回结果是1,2,3之和","slug":"问题2-实现-sum-1-2-3-返回结果是1-2-3之和","link":"#问题2-实现-sum-1-2-3-返回结果是1-2-3之和","children":[]},{"level":3,"title":"问题3 ：实现一个curry函数，将普通函数进行柯里化","slug":"问题3-实现一个curry函数-将普通函数进行柯里化","link":"#问题3-实现一个curry函数-将普通函数进行柯里化","children":[]}],"git":{"createdTime":1694161545000,"updatedTime":1694161545000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":3.65,"words":1095},"filePathRelative":"posts/javascript/柯里化.md","localizedDate":"2023年9月8日","excerpt":"<h1> 函数柯里化(currying)</h1>\\n<p><code>柯里化也属于一种高阶函数</code></p>\\n<blockquote>\\n<p>把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。——维基百科</p>\\n</blockquote>\\n<p>自我理解（柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值）</p>\\n<p>结合代码看看下面的这个实例吧</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 普通的add函数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x<span class=\\"token punctuation\\">,</span> y</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y\\n<span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 7</span>\\n\\n<span class=\\"token comment\\">// 柯里化后</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">curryingAdd</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">y</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">+</span> y\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">curryingAdd</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 7</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
