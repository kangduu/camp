import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as t,e}from"./app-ce51ebc2.js";const i={},r=n("h2",{id:"为什么-object-prototype-tostring-call-可以准确判断对象类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么-object-prototype-tostring-call-可以准确判断对象类型","aria-hidden":"true"},"#"),s(" 为什么 Object.prototype.toString.call() 可以准确判断对象类型？")],-1),u=n("p",null,"在回答这个问题之前，我们必须掌握以下知识点：",-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>由于 JavaScript 是弱类型语言，导致实际工程开发中，需要进行大量的类型检查工作。比如，在遍历一个数组之前，你必须先判断他是否是一个数组类型，否则这将可能出错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类型判断</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// todo</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你是一位初学者，你肯定遇到过下面的现象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JavaScript 诞生以来便如此</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"typeof null === 'object' ",-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"未经计算",-1),_=e('<p>下面列出了 <code>typeof</code> 可能返回的值：</p><table><thead><tr><th style="text-align:left;">类型</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:left;">Undefined</td><td>&quot;undefined&quot;</td></tr><tr><td style="text-align:left;">Boolean</td><td>&quot;boolean&quot;</td></tr><tr><td style="text-align:left;">Number</td><td>&quot;number&quot;</td></tr><tr><td style="text-align:left;">String</td><td>&quot;string&quot;</td></tr><tr><td style="text-align:left;">Function 对象</td><td>&quot;function&quot;</td></tr><tr><td style="text-align:left;">Symbol (ECMAScript 2015 新增)</td><td>&quot;symbol&quot;</td></tr><tr><td style="text-align:left;">BigInt (ECMAScript 2020 新增)</td><td>&quot;bigint&quot;</td></tr><tr><td style="text-align:left;">Null</td><td>&quot;object&quot;</td></tr><tr><td style="text-align:left;">宿主对象（由 JS 环境提供）</td><td>取决于具体实现</td></tr><tr><td style="text-align:left;"><strong>其他任何对象</strong></td><td>&quot;object&quot;</td></tr></tbody></table><p>从上表我们得出结论：</p><ol><li>使用 typeof 可以准确判断类型的有 <strong>Undefined、Boolean、Number、String、Function、Symbol、BigInt</strong> 。</li><li>特别注意一点，除 Function 外的所有构造函数的类型都是 &#39;object&#39;，如 Array、Set、WeakSet、Map、WeakMap 等的结果都是 ‘object’ 。</li></ol><h3 id="探讨对象的-tostring-方法" tabindex="-1"><a class="header-anchor" href="#探讨对象的-tostring-方法" aria-hidden="true">#</a> 探讨对象的 toString 方法</h3>',5),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},w=e("<p>每个对象都有一个 <code>toString()</code> 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，<code>toString()</code> 方法被每个 <code>Object</code> 对象继承。<strong>如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 &quot;[object <em>type</em>]&quot;，其中 <code>type</code> 是对象的类型。</strong></p>",1),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"Function",-1),z=n("strong",null,"覆盖",-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"Object",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"toString",-1),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Function",-1),B=n("code",null,"toString",-1),R=n("p",null,"......",-1),A=e(`<p>举个 🌰，如果我们将<code>Function.prototype.toString</code>删除后再调用<code>.toString()</code>，会得到什么结果啦？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function fn() {}</span>
<span class="token keyword">delete</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>Function.prototype.toString</code>删除后，第二次调用 toString 时，其实调用的是<code>Object.prototype.toString</code>，在上述代码基础上证明观点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">+</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">+</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，所有的内置对象都覆盖了从 Object 继承来的 toString 方法。</p><p>这也就解释了为什么 <code>Object.prototype.toString.call(operand)</code> 可以准确判断操作数的类型。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>Array、Function 等内置对象作为 Object 的实例，都各自重写了 <code>toString</code> 方法，要得到操作数的具体类型，就要调用 Object 的原型的未被重写的 toString 方法。</p><p>使用 <code>Object.prototype.toString</code> 来获取每个对象的类型。为了每个对象都能通过 <code>Object.prototype.toString()</code> 来检测，需要以 <code>Function.prototype.call()</code> 或者 <code>Function.prototype.apply()</code> 的形式来调用，传递要检查的对象作为第一个参数，称为 <code>thisArg</code>。</p><h3 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h3>`,10),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#%E4%BD%BF%E7%94%A8_tostring()_%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},G=e(`<h2 id="判断一个对象是否为空对象" tabindex="-1"><a class="header-anchor" href="#判断一个对象是否为空对象" aria-hidden="true">#</a> 判断一个对象是否为空对象？</h2><h3 id="使用json-stringify-object-方法-将对象转换为字符串-进行序列化。" tabindex="-1"><a class="header-anchor" href="#使用json-stringify-object-方法-将对象转换为字符串-进行序列化。" aria-hidden="true">#</a> 使用<code>JSON.stringify(object)</code> 方法，将对象转换为字符串，进行序列化。</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="for-in-遍历对象-同时使用-hasownproperty-去除原型属性" tabindex="-1"><a class="header-anchor" href="#for-in-遍历对象-同时使用-hasownproperty-去除原型属性" aria-hidden="true">#</a> for...in... 遍历对象，同时使用 hasOwnProperty()去除原型属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：for...in 循环包括原型属性</p><h3 id="jquery-的-isemptyobject-方法" tabindex="-1"><a class="header-anchor" href="#jquery-的-isemptyobject-方法" aria-hidden="true">#</a> jQuery 的 isEmptyObject()方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//该方法是对 （for in）的封装；</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">isEmptyObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-getownpropertynames-方法" tabindex="-1"><a class="header-anchor" href="#object-getownpropertynames-方法" aria-hidden="true">#</a> Object.getOwnPropertyNames()方法</h3><p><strong>Object.getOwnPropertyNames()<strong>方法返回一个由指定对象的所有</strong>自身属性</strong>的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-keys-方法" tabindex="-1"><a class="header-anchor" href="#object-keys-方法" aria-hidden="true">#</a> Object.keys()方法</h3><p><strong>Object.keys()<strong>方法会返回一个由一个给定对象的</strong>自身可枚举属性</strong>组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//该方法返回的同样是属性名组成的数组对象。</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连续赋值问题" tabindex="-1"><a class="header-anchor" href="#连续赋值问题" aria-hidden="true">#</a> 连续赋值问题</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = ? , b = ?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="你应该知道的知识" tabindex="-1"><a class="header-anchor" href="#你应该知道的知识" aria-hidden="true">#</a> 你应该知道的知识</h3><ol><li>赋值运算符 <code>=</code></li></ol><p>​ 在 javascript 中，赋值运算符是 <code>从右到左</code> （关联性）。</p>`,19),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},I={start:"2"},V={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>​ 定义：对它的每个操作数求值 <code>从左到右</code>，并<strong>返回最后一个操作数的值</strong>。</p><p>​ 优先级 1 （最低）</p><h3 id="解析为原始赋值结构" tabindex="-1"><a class="header-anchor" href="#解析为原始赋值结构" aria-hidden="true">#</a> 解析为原始赋值结构</h3><p>在遇到此情况时，应该<strong>先将其分解为简单赋值语句</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//分解</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 3 (在同一作用域下)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> m <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>

<span class="token comment">//外部作用域下只有 n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例 1</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 问，a和b的值是多少？ 为什么？</span>
<span class="token comment">/*------------
title: 析 --------------------*/</span>
<span class="token comment">// 1.对象增加属性和修改属性的方式</span>
	<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;dk&#39;</span><span class="token punctuation">;</span>
	obj<span class="token punctuation">[</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;man&#39;</span><span class="token punctuation">;</span>
	obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 并不会报错，问题就在这里。</span>
<span class="token comment">// 2.obj[1,2] = 3; 解析</span>
	<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m 实际值为 1 ，参考第2点</span>
	<span class="token comment">//所以</span>
    obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token operator">&gt;&gt;&gt;</span>  obj<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">&gt;&gt;&gt;</span> obj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 3.回到题目</span>
	<span class="token comment">// 可理解代码为(实际并不是)</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> 【<span class="token number">1</span>】
	<span class="token comment">//运行到【1】时，即是一个连续赋值的问题了。实际赋值顺序是：</span>
	<span class="token comment">// (a.)</span>
	<span class="token number">2</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> <span class="token comment">// 2[1,undefined] = [undefined,1] 会报错吗？ 【2】</span>
	<span class="token comment">// (b.)</span>
	b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span> <span class="token comment">// b 是指向对象2的属性a的值, 而2[a] = [b,a],所有 b = [b,a]</span>
<span class="token comment">// 4.【2】的理解</span>
	<span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span>length <span class="token comment">// 6, 这个都能够理解。其实他就是一个包装类。</span>
	<span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>

	<span class="token string">&#39;123456&#39;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
	<span class="token comment">//重点理解这句话,不会报错的。实际&#39;123456&#39;这个对象并不存在。可以理解为中间件。</span>
<span class="token comment">// 5.答案</span>
	a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例 2</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>n <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 问，a和b的值是多少？ 为什么？</span>
<span class="token comment">/*------------
title: 析 1--------------------*/</span>
<span class="token comment">// 拆分运算顺序 （1）a.n （2）a = {m:1} （3）a.n = a</span>
<span class="token comment">//	a.n 分配新的地址，则  { n: - }</span>
<span class="token comment">// a = { m : 1}</span>
<span class="token comment">// a.n = { m: 1 } ==&gt; {n: { m: 1} }</span>
<span class="token comment">// b=a ==&gt; b = {n: { m: 1} }</span>

<span class="token comment">/*------------
title: 析 2--------------------*/</span>
<span class="token comment">// 1.只要对变量进行赋值就会进行内存重新申请。 【1】</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;boom&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;dik&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//对象一样的，只是重新获取属性的地址.</span>
<span class="token comment">// 2.【2】</span>
<span class="token comment">// 变量a 内存分配图</span>

<span class="token comment">// 3.【3】</span>
<span class="token comment">// 变量b 内存分配图</span>

<span class="token comment">// 4. 在计算机中，复杂数据类型存储的都是地址，我们在取值时，都是根据地址（门牌号）去查找。</span>

<span class="token comment">// 5. a.n = a = { m: 1 }</span>
<span class="token comment">//执行a.n = a = { m: 1 },a.n和a都要申请新的地址，而且在Js引擎中，确实也是读到这句话就会给这个值进行内存分配。【4】</span>
<span class="token comment">//分为三步：</span>
<span class="token comment">// (1)</span>
a<span class="token punctuation">.</span>n<span class="token punctuation">;</span> <span class="token comment">// a对象添加了属性n，值为undefined</span>
<span class="token comment">// (2)</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// (3)</span>
a<span class="token punctuation">.</span>n <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token comment">// 6.答案</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【1】解释过程 （内存如何重新申请的）</p><p>执行 a = 1 时 ，内存示意图。</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">变量</th><th style="text-align:center;">存储值</th></tr></thead><tbody><tr><td style="text-align:center;">0x0001</td><td style="text-align:center;">a</td><td style="text-align:center;">1</td></tr></tbody></table><p>执行 a = 2 时，内存变化示意图 (原来的内存被释放？)</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">变量</th><th style="text-align:center;">存储值</th></tr></thead><tbody><tr><td style="text-align:center;"><s>0x0001</s></td><td style="text-align:center;"><s>a</s></td><td style="text-align:center;"><s>1</s></td></tr><tr><td style="text-align:center;">0x0002</td><td style="text-align:center;">a</td><td style="text-align:center;">2</td></tr></tbody></table><p>【2】a 的内存示意图</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">变量</th><th style="text-align:center;">存储值</th></tr></thead><tbody><tr><td style="text-align:center;">0x0001</td><td style="text-align:center;">a</td><td style="text-align:center;">0x0002</td></tr><tr><td style="text-align:center;">0x0002</td><td style="text-align:center;">a.n</td><td style="text-align:center;">1</td></tr></tbody></table><p>【3】 b 的内存示意图</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">变量</th><th style="text-align:center;">存储值</th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">0x0003</td><td style="text-align:center;">b</td><td style="text-align:center;">0x0001</td></tr></tbody></table><p>【4】a.n 和 a 重新分配内存</p><table><thead><tr><th style="text-align:center;">地址</th><th style="text-align:center;">变量</th><th style="text-align:center;">存储值</th></tr></thead><tbody><tr><td style="text-align:center;">0x0001</td><td style="text-align:center;"><s>a</s></td><td style="text-align:center;"><s>0x0002</s> 0x0004</td></tr><tr><td style="text-align:center;">0x0002</td><td style="text-align:center;"><s>a.n</s></td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">0x0003</td><td style="text-align:center;">b</td><td style="text-align:center;">0x0001</td></tr><tr><td style="text-align:center;">0x0004</td><td style="text-align:center;">a.n</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">0x0005</td><td style="text-align:center;">a</td><td style="text-align:center;"></td></tr></tbody></table><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><ol><li><code>只要对变量进行赋值就会进行内存重新申请</code></li><li>根据运算符优先级运算分析</li></ol><h2 id="_1-2-3-map-parseint-结果是什么-为什么" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint-结果是什么-为什么" aria-hidden="true">#</a> [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) 结果是什么？为什么？</h2><h2 id="如何提升-javascript-变量的存储性能" tabindex="-1"><a class="header-anchor" href="#如何提升-javascript-变量的存储性能" aria-hidden="true">#</a> 如何提升 JavaScript 变量的存储性能？</h2><blockquote><p>访问<strong>字面量和局部变量</strong>的速度最快，访问<strong>数组元素和对象成员</strong>相对较慢;<br> 由于局部变量存在于作用域链的起始位置，因此<strong>访问局部变量比访问跨作用域变量更快</strong>，全局变量的访问速度最慢;<br><strong>嵌套的对象成员</strong>会明显影响性能，尽量少用，例如<code>window.loacation.href</code>;<br> 属性和方法<strong>在原型链中的位置越深</strong>，则访问它的速度也越慢;<br> 通常来说，<strong>需要访问多次</strong>的对象成员、数组元素、跨作用域变量<strong>可以保存在局部变量中</strong>从而提升 JavaScript 执行效率;</p></blockquote><h2 id="介绍下-set、map、weakset-和-weakmap-的区别" tabindex="-1"><a class="header-anchor" href="#介绍下-set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a> 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h2><h2 id="es5-es6-的继承除了写法以外还有什么区别" tabindex="-1"><a class="header-anchor" href="#es5-es6-的继承除了写法以外还有什么区别" aria-hidden="true">#</a> ES5/ES6 的继承除了写法以外还有什么区别？</h2><h2 id="settimeout、promise、async-await-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout、promise、async-await-的区别" aria-hidden="true">#</a> setTimeout、Promise、Async/Await 的区别</h2><h2 id="async-await-如何通过同步的方式实现异步" tabindex="-1"><a class="header-anchor" href="#async-await-如何通过同步的方式实现异步" aria-hidden="true">#</a> Async/Await 如何通过同步的方式实现异步</h2>`,30);function T(U,D){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("instanceof"),t(a)])]),n("li",null,[n("a",k,[s("typeof"),t(a)])]),n("li",null,[n("a",m,[s("Object.prototype.toString"),t(a)]),s("，返回对象的字符串形式")]),n("li",null,[n("a",b,[s("delete 操作符"),t(a)])]),n("li",null,[n("a",v,[s("Object.prototype.hasOwnProperty()"),t(a)]),s("方法会返回一个布尔值，指示对象自身属性中是否具有指定属性")]),n("li",null,[n("a",h,[s("Function.prototype.call()"),t(a)])])]),g,n("p",null,[n("a",y,[s("为什么 "),f,t(a)])]),n("p",null,[s("所以，typeof 并不能判断所有类型，"),n("a",j,[s("typeof"),t(a)]),s(" 操作符返回一个字符串，表示"),x,s("的操作数的类型。")]),_,n("blockquote",null,[n("p",null,[n("a",S,[s("Object.prototype.toString"),t(a)])])]),w,n("blockquote",null,[n("p",null,[n("a",O,[q,t(a)]),s("对象"),z,s("了从"),n("a",N,[J,t(a)]),s("继承来的"),n("a",C,[E,t(a)]),s(" 方法。对于用户定义的 "),n("a",F,[W,t(a)]),s(" 对象，"),B,s("方法返回一个字符串，其中包含用于定义函数的源文本段。")]),R]),A,n("ul",null,[n("li",null,[n("a",P,[s("使用 toString() 检测对象类型"),t(a)])])]),G,n("p",null,[s("​ *注意："),n("a",M,[s("运算符的优先级"),t(a)])]),n("ol",I,[n("li",null,[n("a",V,[s("逗号操作符"),t(a)])])]),L])}const H=o(i,[["render",T],["__file","questions.html.vue"]]);export{H as default};
