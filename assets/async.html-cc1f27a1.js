const e=JSON.parse('{"key":"v-00d40066","path":"/javascript/async.html","title":"异步编程","lang":"zh-CN","frontmatter":{"title":"异步编程","category":"javascript","description":"异步操作的几种模式 事件监听 回调函数 Promise Generator async 函数 事件监听 异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。 事件监听方式的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合“（decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。 回调函数","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camp/javascript/async.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"异步编程"}],["meta",{"property":"og:description","content":"异步操作的几种模式 事件监听 回调函数 Promise Generator async 函数 事件监听 异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。 事件监听方式的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合“（decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。 回调函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-25T09:52:13.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2024-12-25T09:52:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-25T09:52:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"异步操作的几种模式","slug":"异步操作的几种模式","link":"#异步操作的几种模式","children":[{"level":3,"title":"事件监听","slug":"事件监听","link":"#事件监听","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":3,"title":"发布/订阅","slug":"发布-订阅","link":"#发布-订阅","children":[]},{"level":3,"title":"async/await","slug":"async-await","link":"#async-await","children":[]},{"level":3,"title":"generator 函数及其异步应用","slug":"generator-函数及其异步应用","link":"#generator-函数及其异步应用","children":[]}]},{"level":2,"title":"异步操作的流程控制","slug":"异步操作的流程控制","link":"#异步操作的流程控制","children":[{"level":3,"title":"串行执行(一个任务完成后，再执行另一个)","slug":"串行执行-一个任务完成后-再执行另一个","link":"#串行执行-一个任务完成后-再执行另一个","children":[]},{"level":3,"title":"并行执行(所有异步任务同时执行)","slug":"并行执行-所有异步任务同时执行","link":"#并行执行-所有异步任务同时执行","children":[]},{"level":3,"title":"串行和并行的结合","slug":"串行和并行的结合","link":"#串行和并行的结合","children":[]}]},{"level":2,"title":"处理异步的框架-RxJS","slug":"处理异步的框架-rxjs","link":"#处理异步的框架-rxjs","children":[]},{"level":2,"title":"webWorker 的多线程机制","slug":"webworker-的多线程机制","link":"#webworker-的多线程机制","children":[]},{"level":2,"title":"拓展阅读","slug":"拓展阅读","link":"#拓展阅读","children":[{"level":3,"title":"线程（thread）和进程（process）","slug":"线程-thread-和进程-process","link":"#线程-thread-和进程-process","children":[]},{"level":3,"title":"单线程和多线程","slug":"单线程和多线程","link":"#单线程和多线程","children":[]},{"level":3,"title":"单进程和多进程","slug":"单进程和多进程","link":"#单进程和多进程","children":[]},{"level":3,"title":"阻塞（block）和非阻塞（unblock）","slug":"阻塞-block-和非阻塞-unblock","link":"#阻塞-block-和非阻塞-unblock","children":[]},{"level":3,"title":"同步（asynchronous）和异步（synchronious）","slug":"同步-asynchronous-和异步-synchronious","link":"#同步-asynchronous-和异步-synchronious","children":[]}]}],"git":{"createdTime":1735120333000,"updatedTime":1735120333000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":8.5,"words":2550},"filePathRelative":"javascript/async.md","localizedDate":"2024年12月25日","excerpt":"<h2> 异步操作的几种模式</h2>\\n<ol>\\n<li>事件监听</li>\\n<li>回调函数</li>\\n<li>Promise</li>\\n<li>Generator</li>\\n<li>async 函数</li>\\n</ol>\\n<h3> 事件监听</h3>\\n<p>异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\\n<p>事件监听方式的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合“（decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。</p>\\n<h3> 回调函数</h3>","autoDesc":true}');export{e as data};
