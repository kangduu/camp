import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as t,e as i}from"./app-ce51ebc2.js";const u={},l=n("h3",{id:"简述-vue2-x-的响应式原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简述-vue2-x-的响应式原理","aria-hidden":"true"},"#"),s(" 简述 Vue2.x 的响应式原理")],-1),r=n("code",null,"data",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"Object.defineProperty",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"使用了",-1),b={href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>在 js 中，数组也是一种对象，但是 vue 对其数据响应化处理并不能简单的使用对象方式。而是需要重写 Array 对象的原型方法。</p><h3 id="vue2-x-中如何监测数组变化" tabindex="-1"><a class="header-anchor" href="#vue2-x-中如何监测数组变化" aria-hidden="true">#</a> Vue2.x 中如何监测数组变化</h3><p>使用函数劫持的方式，重写数组原型链上的数组方法（可以改变原数组的 7 种方法）。</p><blockquote><p><code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code> <code>splice</code> <code>reverse</code> <code>sort</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取原型</span>
<span class="token keyword">const</span> originalProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token comment">// 创建一个新对象，拦截数组的7个方法</span>
<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unshift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;splice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sort&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 做你本应该做的事情</span>
    originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//通知更新</span>
    <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue2-x-响应式存在的不足" tabindex="-1"><a class="header-anchor" href="#vue2-x-响应式存在的不足" aria-hidden="true">#</a> Vue2.x 响应式存在的不足</h3><ol><li>如果需要响应的数据量较大，初始化时递归遍历的性能不好、消耗大；</li><li>新增和删除属性无法监听；</li><li>数组的响应化需要额外实现，并且只能使用对应的 7 个原型方法；</li><li>对象的修改语法有限制（需要使用 vm.$set,直接 obj.peroto 会出现无法监听的问题）</li></ol><h3 id="思路解析图" tabindex="-1"><a class="header-anchor" href="#思路解析图" aria-hidden="true">#</a> 思路解析图</h3><ul><li>Observer 数据监听器：把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并 <strong>使用 Object.defineProperty 方法</strong> 把这些属性全部转成 setter、getter 方法。当 data 中的某个属性被访问时，则会调用 getter 方法；当 data 中的属性被改变时，则会调用 setter 方法。</li><li>Compile 指令解析器：对每个元素的指令进行解析，替换模板数据，并绑定对应的更新函数，初始化相应的订阅。</li><li>Watcher 订阅者：作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数。</li><li>Dep 消息订阅器：内部维护了一个<strong>数组</strong>，用来收集订阅者（Watcher），数据变动触发 notify 函数，再调用订阅者的 update 方法</li><li>Updater 更新</li></ul><h6 id="数据发生变化时" tabindex="-1"><a class="header-anchor" href="#数据发生变化时" aria-hidden="true">#</a> 数据发生变化时？</h6><ol><li>Observer 中的 setter 方法触发</li><li>setter 立即调用 Dep.notify()</li><li>Dep 开始遍历所有的订阅者，并调用订阅者的 update 方法</li><li>订阅者收到通知后对视图进行相应的更新</li></ol><h3 id="你需要格外注意的" tabindex="-1"><a class="header-anchor" href="#你需要格外注意的" aria-hidden="true">#</a> 你需要格外注意的</h3><ol><li><p>Vue 不支持 IE8 以及更低版本浏览器的原因?</p><p><strong>Object.defineProperty</strong>是 ES5 中一个无法 shim（可理解为兼容性处理） 的特性</p></li><li><p><code> vm.a === vm.date.a</code> ?</p><p>初始化时，使用 proxy 代理方法，遍历 data 的属性，并将其代理到 vm 实例上。</p></li><li><p>让你实现 observer 方法？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// array handler</span>
<span class="token keyword">const</span> originalProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unshift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;splice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sort&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理本应该做的事</span>
    originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通知更新</span>
    <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check type</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> options <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> options<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// array 替换其原型</span>
    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> arrayProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// obj 数据劫持</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 对每一个key执行拦截</span>
      <span class="token function">defineReactive</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> key<span class="token punctuation">,</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//递归遍历value</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 重定义getter/setter</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 若是对象</span>
        <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知更新</span>
        <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新 值</span>
        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token comment">// 你应该知道这个value是一个闭包。</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通知更新操作</span>
  <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h3><p>看完以上内容，你应该掌握 vue2.x 的响应式原理了，那么接下来你应该学习 vue3.x 的响应式原理。</p><blockquote><p>学无止境 啊.......</p></blockquote>`,16);function f(y,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[s("在 Vue 实例初始化数据时，遍历 Vue 实例的 "),r,s(" 选项，并使用 "),n("a",k,[d,t(a)]),s(" 将其属性转换为 "),n("a",v,[s("getter/setter"),t(a)]),s("。当页面"),m,s("对应的属性时，会进行依赖收集（当前组件的 watcher），若属性发生变化，则通知相关依赖进行更新操作（发布/订阅）。 参考—— "),n("a",b,[s("vue.js-深入响应式原理"),t(a)])]),h])}const x=e(u,[["render",f],["__file","Vue2-响应式原理.html.vue"]]);export{x as default};
