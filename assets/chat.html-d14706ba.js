const n=JSON.parse('{"key":"v-77d9bce6","path":"/blog/chat.html","title":"聊天上下文","lang":"zh-CN","frontmatter":{"title":"聊天上下文","description":"1. 滚动边界确定 JavaScript 判断元素是否在可视区域的方法 Intersection Observer API Observer API 实现 import { useLayoutEffect, useRef, type PropsWithChildren } from \\"react\\"; import { useScrollObserverCtx } from \\"../context\\"; // placeholder element const PlaceholderKeys = { up: \\"upstairs\\", down: \\"downstairs\\" }; const ElementPlaceholder = ({ className }: ComponentCSSProps) =&gt; &lt;div className={className} style={{ height: 1, visibility: \\"hidden\\" }} /&gt;; let observer: IntersectionObserver = null; export default function ScrollObserver({ children }: PropsWithChildren&lt;{}&gt;) { const { refresh } = useScrollObserverCtx(); // 详解 2 const ContainerRef = useRef(null); // mount useLayoutEffect(() =&gt; { const container = ContainerRef.current; const upTarget = container.querySelector(`div.${PlaceholderKeys.up}`), downTarget = container.querySelector(`div.${PlaceholderKeys.down}`); // observe observer = new IntersectionObserver( function (entires) { const state = entires.reduce( (prev, curr) =&gt; { const classList = curr.target.classList; const isIntersecting = curr.isIntersecting; if (classList.contains(PlaceholderKeys.up) &amp;&amp; isIntersecting) prev.upward = true; if (classList.contains(PlaceholderKeys.down) &amp;&amp; isIntersecting) prev.downward = true; return prev; }, { upward: false, downward: false } ); refresh(state); }, { root: container, threshold: 1.0 } ); observer.observe(upTarget); observer.observe(downTarget); // unobserve return () =&gt; (observer = null); }, []); return ( &lt;div style={{ overflow: \\"auto\\", height: \\"100%\\", padding: \\"0 24px\\" }} ref={ContainerRef}&gt; &lt;ElementPlaceholder className={PlaceholderKeys.up} /&gt; {children} &lt;ElementPlaceholder className={PlaceholderKeys.down} /&gt; &lt;/div&gt; ); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/blog/chat.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"聊天上下文"}],["meta",{"property":"og:description","content":"1. 滚动边界确定 JavaScript 判断元素是否在可视区域的方法 Intersection Observer API Observer API 实现 import { useLayoutEffect, useRef, type PropsWithChildren } from \\"react\\"; import { useScrollObserverCtx } from \\"../context\\"; // placeholder element const PlaceholderKeys = { up: \\"upstairs\\", down: \\"downstairs\\" }; const ElementPlaceholder = ({ className }: ComponentCSSProps) =&gt; &lt;div className={className} style={{ height: 1, visibility: \\"hidden\\" }} /&gt;; let observer: IntersectionObserver = null; export default function ScrollObserver({ children }: PropsWithChildren&lt;{}&gt;) { const { refresh } = useScrollObserverCtx(); // 详解 2 const ContainerRef = useRef(null); // mount useLayoutEffect(() =&gt; { const container = ContainerRef.current; const upTarget = container.querySelector(`div.${PlaceholderKeys.up}`), downTarget = container.querySelector(`div.${PlaceholderKeys.down}`); // observe observer = new IntersectionObserver( function (entires) { const state = entires.reduce( (prev, curr) =&gt; { const classList = curr.target.classList; const isIntersecting = curr.isIntersecting; if (classList.contains(PlaceholderKeys.up) &amp;&amp; isIntersecting) prev.upward = true; if (classList.contains(PlaceholderKeys.down) &amp;&amp; isIntersecting) prev.downward = true; return prev; }, { upward: false, downward: false } ); refresh(state); }, { root: container, threshold: 1.0 } ); observer.observe(upTarget); observer.observe(downTarget); // unobserve return () =&gt; (observer = null); }, []); return ( &lt;div style={{ overflow: \\"auto\\", height: \\"100%\\", padding: \\"0 24px\\" }} ref={ContainerRef}&gt; &lt;ElementPlaceholder className={PlaceholderKeys.up} /&gt; {children} &lt;ElementPlaceholder className={PlaceholderKeys.down} /&gt; &lt;/div&gt; ); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T09:38:26.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-04-27T09:38:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊天上下文\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T09:38:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":3,"title":"1. 滚动边界确定","slug":"_1-滚动边界确定","link":"#_1-滚动边界确定","children":[]},{"level":3,"title":"2. 使用useContext管理状态，确保 new IntersectionObserver 只在组件 mount 执行一次即可","slug":"_2-使用usecontext管理状态-确保-new-intersectionobserver-只在组件-mount-执行一次即可","link":"#_2-使用usecontext管理状态-确保-new-intersectionobserver-只在组件-mount-执行一次即可","children":[]},{"level":3,"title":"3. 滚动加载内容","slug":"_3-滚动加载内容","link":"#_3-滚动加载内容","children":[]},{"level":3,"title":"4. 数据加载后滚动到可视区域","slug":"_4-数据加载后滚动到可视区域","link":"#_4-数据加载后滚动到可视区域","children":[]}],"git":{"createdTime":1745746706000,"updatedTime":1745746706000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":1.9,"words":569},"filePathRelative":"blog/chat.md","localizedDate":"2025年4月27日","excerpt":"<h3> 1. 滚动边界确定</h3>\\n<ul>\\n<li>\\n<p><a href=\\"https://github.com/kangduu/camps/issues/65\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaScript 判断元素是否在可视区域的方法</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Intersection Observer API</a></p>\\n</li>\\n<li>\\n<p>Observer API 实现</p>\\n<div class=\\"language-tsx line-numbers-mode\\" data-ext=\\"tsx\\"><pre class=\\"language-tsx\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useLayoutEffect<span class=\\"token punctuation\\">,</span> useRef<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">PropsWithChildren</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"react\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useScrollObserverCtx <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"../context\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// placeholder element</span>\\n<span class=\\"token keyword\\">const</span> PlaceholderKeys <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> up<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"upstairs\\"</span><span class=\\"token punctuation\\">,</span> down<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"downstairs\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">ElementPlaceholder</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> className <span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">:</span> ComponentCSSProps<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>className<span class=\\"token punctuation\\">}</span></span> <span class=\\"token attr-name\\">style</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span> height<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> visibility<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"hidden\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> observer<span class=\\"token operator\\">:</span> IntersectionObserver <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">ScrollObserver</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> children <span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">:</span> PropsWithChildren<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> refresh <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useScrollObserverCtx</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 详解 2</span>\\n  <span class=\\"token keyword\\">const</span> ContainerRef <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useRef</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// mount</span>\\n  <span class=\\"token function\\">useLayoutEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> container <span class=\\"token operator\\">=</span> ContainerRef<span class=\\"token punctuation\\">.</span>current<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> upTarget <span class=\\"token operator\\">=</span> container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">div.</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>up<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n      downTarget <span class=\\"token operator\\">=</span> container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">div.</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>down<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// observe</span>\\n    observer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IntersectionObserver</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>entires<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">const</span> state <span class=\\"token operator\\">=</span> entires<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reduce</span><span class=\\"token punctuation\\">(</span>\\n          <span class=\\"token punctuation\\">(</span>prev<span class=\\"token punctuation\\">,</span> curr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">const</span> classList <span class=\\"token operator\\">=</span> curr<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>classList<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">const</span> isIntersecting <span class=\\"token operator\\">=</span> curr<span class=\\"token punctuation\\">.</span>isIntersecting<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>classList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>up<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> isIntersecting<span class=\\"token punctuation\\">)</span> prev<span class=\\"token punctuation\\">.</span>upward <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>classList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>down<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> isIntersecting<span class=\\"token punctuation\\">)</span> prev<span class=\\"token punctuation\\">.</span>downward <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> prev<span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">{</span> upward<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> downward<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">false</span> <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">refresh</span><span class=\\"token punctuation\\">(</span>state<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">{</span> root<span class=\\"token operator\\">:</span> container<span class=\\"token punctuation\\">,</span> threshold<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1.0</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    observer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>upTarget<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    observer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>downTarget<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// unobserve</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">(</span>observer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">style</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span> overflow<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"auto\\"</span><span class=\\"token punctuation\\">,</span> height<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"100%\\"</span><span class=\\"token punctuation\\">,</span> padding<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"0 24px\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span></span> <span class=\\"token attr-name\\">ref</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>ContainerRef<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ElementPlaceholder</span></span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>up<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token punctuation\\">{</span>children<span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ElementPlaceholder</span></span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>PlaceholderKeys<span class=\\"token punctuation\\">.</span>down<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token plain-text\\">\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{n as data};
