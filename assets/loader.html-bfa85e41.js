const a=JSON.parse(`{"key":"v-75d6796b","path":"/webpack/loader.html","title":"","lang":"zh-CN","frontmatter":{"description":"是否写过Loader？简单描述一下编写Loader的过程？ 我们都知道，Webpack最后打包出来的成果是一份Javascript代码，实际上在Webpack内部默认也只能够处理JS模块代码，在打包过程中，会默认把所有遇到的文件都当作JavaScript代码进行解析，因此当项目存在非JS类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是Loader机制存在的意义。 Loader的配置使用我们应该已经非常的熟悉： // webpack.config.js module.exports = { // ...other config module: { rules: [ { test: /^your-regExp$/, use: [ { loader: 'loader-name-A', }, { loader: 'loader-name-B', } ] }, ] } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/webpack/loader.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:description","content":"是否写过Loader？简单描述一下编写Loader的过程？ 我们都知道，Webpack最后打包出来的成果是一份Javascript代码，实际上在Webpack内部默认也只能够处理JS模块代码，在打包过程中，会默认把所有遇到的文件都当作JavaScript代码进行解析，因此当项目存在非JS类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是Loader机制存在的意义。 Loader的配置使用我们应该已经非常的熟悉： // webpack.config.js module.exports = { // ...other config module: { rules: [ { test: /^your-regExp$/, use: [ { loader: 'loader-name-A', }, { loader: 'loader-name-B', } ] }, ] } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T07:09:08.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-27T07:09:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T07:09:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"是否写过Loader？简单描述一下编写Loader的过程？","slug":"是否写过loader-简单描述一下编写loader的过程","link":"#是否写过loader-简单描述一下编写loader的过程","children":[]}],"git":{"createdTime":1740640148000,"updatedTime":1740640148000,"contributors":[{"name":"Seven","email":"74498826+kangduu@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"webpack/loader.md","localizedDate":"2025年2月27日","excerpt":"<h2> 是否写过Loader？简单描述一下编写Loader的过程？</h2>\\n<p>我们都知道，Webpack最后打包出来的成果是一份Javascript代码，实际上在Webpack内部默认也只能够处理JS模块代码，在打包过程中，会默认把所有遇到的文件都当作JavaScript代码进行解析，因此当项目存在非JS类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是Loader机制存在的意义。</p>\\n<p>Loader的配置使用我们应该已经非常的熟悉：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// webpack.config.js</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ...other config</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">rules</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^your-regExp$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n          <span class=\\"token punctuation\\">{</span>\\n             <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'loader-name-A'</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\n          <span class=\\"token punctuation\\">{</span>\\n             <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'loader-name-B'</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">]</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{a as data};
