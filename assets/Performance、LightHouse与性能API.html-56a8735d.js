const e=JSON.parse('{"key":"v-b70957e2","path":"/performance/Performance%E3%80%81LightHouse%E4%B8%8E%E6%80%A7%E8%83%BDAPI.html","title":"Performance、LightHouse 与性能 API","lang":"zh-CN","frontmatter":{"description":"Performance、LightHouse 与性能 API 性能监测是前端性能优化的重要一环。监测的目的是为了确定性能瓶颈，从而有的放矢地开展具体的优化工作。 平时我们比较推崇的性能监测方案主要有两种：可视化方案、可编程方案。这两种方案下都有非常优秀、且触手可及的相关工具供大家选择，本节我们就一起来研究一下这些工具的用法。 可视化监测：从 Performance 面板说起 Performance 是 Chrome 提供给我们的开发者工具，用于记录和分析我们的应用在运行时的所有活动。它呈现的数据具有实时性、多维度的特点，可以帮助我们很好地定位性能问题。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/performance/Performance%E3%80%81LightHouse%E4%B8%8E%E6%80%A7%E8%83%BDAPI.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"Performance、LightHouse 与性能 API"}],["meta",{"property":"og:description","content":"Performance、LightHouse 与性能 API 性能监测是前端性能优化的重要一环。监测的目的是为了确定性能瓶颈，从而有的放矢地开展具体的优化工作。 平时我们比较推崇的性能监测方案主要有两种：可视化方案、可编程方案。这两种方案下都有非常优秀、且触手可及的相关工具供大家选择，本节我们就一起来研究一下这些工具的用法。 可视化监测：从 Performance 面板说起 Performance 是 Chrome 提供给我们的开发者工具，用于记录和分析我们的应用在运行时的所有活动。它呈现的数据具有实时性、多维度的特点，可以帮助我们很好地定位性能问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T14:05:38.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-26T14:05:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Performance、LightHouse 与性能 API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T14:05:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"可视化监测：从 Performance 面板说起","slug":"可视化监测-从-performance-面板说起","link":"#可视化监测-从-performance-面板说起","children":[{"level":3,"title":"开始记录","slug":"开始记录","link":"#开始记录","children":[]},{"level":3,"title":"简要分析","slug":"简要分析","link":"#简要分析","children":[]},{"level":3,"title":"挖掘性能瓶颈","slug":"挖掘性能瓶颈","link":"#挖掘性能瓶颈","children":[]}]},{"level":2,"title":"可视化监测： 更加聪明的 LightHouse","slug":"可视化监测-更加聪明的-lighthouse","link":"#可视化监测-更加聪明的-lighthouse","children":[]},{"level":2,"title":"可编程的性能上报方案： W3C 性能 API","slug":"可编程的性能上报方案-w3c-性能-api","link":"#可编程的性能上报方案-w3c-性能-api","children":[{"level":3,"title":"访问 performance 对象","slug":"访问-performance-对象","link":"#访问-performance-对象","children":[]},{"level":3,"title":"关键时间节点","slug":"关键时间节点","link":"#关键时间节点","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1740578738000,"updatedTime":1740578738000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":9.47,"words":2841},"filePathRelative":"performance/Performance、LightHouse与性能API.md","localizedDate":"2025年2月26日","excerpt":"<h1> Performance、LightHouse 与性能 API</h1>\\n<p>性能监测是前端性能优化的重要一环。监测的目的是为了确定性能瓶颈，从而有的放矢地开展具体的优化工作。</p>\\n<p>平时我们比较推崇的性能监测方案主要有两种：<strong>可视化方案、可编程方案</strong>。这两种方案下都有非常优秀、且触手可及的相关工具供大家选择，本节我们就一起来研究一下这些工具的用法。</p>\\n<h2> 可视化监测：从 Performance 面板说起</h2>\\n<p>Performance 是 Chrome 提供给我们的开发者工具，用于记录和分析我们的应用在运行时的所有活动。它呈现的数据具有实时性、多维度的特点，可以帮助我们很好地定位性能问题。</p>","autoDesc":true}');export{e as data};
