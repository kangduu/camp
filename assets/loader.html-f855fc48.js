const a=JSON.parse('{"key":"v-75d6796b","path":"/webpack/loader.html","title":"webpack loader","lang":"zh-CN","frontmatter":{"title":"webpack loader","description":"是否写过 Loader？简单描述一下编写 Loader 的过程？ 我们都知道，Webpack 最后打包出来的成果是一份 Javascript 代码，实际上在 Webpack 内部默认也只能够处理 JS 模块代码，在打包过程中，会默认把所有遇到的文件都当作 JavaScript 代码进行解析，因此当项目存在非 JS 类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是 Loader 机制存在的意义。 Loader 的配置使用我们应该已经非常的熟悉： // webpack.config.js module.exports = { // ...other config module: { rules: [ { test: /^your-regExp$/, use: [ { loader: \\"loader-name-A\\", }, { loader: \\"loader-name-B\\", }, ], }, ], }, };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/webpack/loader.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"webpack loader"}],["meta",{"property":"og:description","content":"是否写过 Loader？简单描述一下编写 Loader 的过程？ 我们都知道，Webpack 最后打包出来的成果是一份 Javascript 代码，实际上在 Webpack 内部默认也只能够处理 JS 模块代码，在打包过程中，会默认把所有遇到的文件都当作 JavaScript 代码进行解析，因此当项目存在非 JS 类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是 Loader 机制存在的意义。 Loader 的配置使用我们应该已经非常的熟悉： // webpack.config.js module.exports = { // ...other config module: { rules: [ { test: /^your-regExp$/, use: [ { loader: \\"loader-name-A\\", }, { loader: \\"loader-name-B\\", }, ], }, ], }, };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T08:21:45.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-03-28T08:21:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack loader\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-28T08:21:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"是否写过 Loader？简单描述一下编写 Loader 的过程？","slug":"是否写过-loader-简单描述一下编写-loader-的过程","link":"#是否写过-loader-简单描述一下编写-loader-的过程","children":[]}],"git":{"createdTime":1740640148000,"updatedTime":1743150105000,"contributors":[{"name":"Seven","email":"74498826+kangduu@users.noreply.github.com","commits":1},{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"webpack/loader.md","localizedDate":"2025年2月27日","excerpt":"<h2> 是否写过 Loader？简单描述一下编写 Loader 的过程？</h2>\\n<p>我们都知道，Webpack 最后打包出来的成果是一份 Javascript 代码，实际上在 Webpack 内部默认也只能够处理 JS 模块代码，在打包过程中，会默认把所有遇到的文件都当作 JavaScript 代码进行解析，因此当项目存在非 JS 类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是 Loader 机制存在的意义。</p>\\n<p>Loader 的配置使用我们应该已经非常的熟悉：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// webpack.config.js</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ...other config</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">rules</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^your-regExp$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">use</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n          <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"loader-name-A\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"loader-name-B\\"</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
