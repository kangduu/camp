const n=JSON.parse('{"key":"v-aa72c644","path":"/javascript/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD.html","title":"空对象判断","lang":"zh-CN","frontmatter":{"title":"空对象判断","category":"javascript","description":"判断一个对象是否为空对象？ 使用JSON.stringify(object) 方法，将对象转换为字符串，进行序列化。 console.log(JSON.stringify({}) === \\"{}\\"); // true for...in... 遍历对象，同时使用hasOwnProperty()去除原型属性 function isEmptyObject(object) { for (const key in object) { if (object.hasOwnProperty(key)) { return false } } return true } 注意：for...in 循环包括原型属性 jQuery的isEmptyObject()方法 //该方法是对 （for in）的封装； let obj = {}; let b = $.isEmptyObject(obj); alert(b); // true Object.getOwnPropertyNames()方法 Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。 let obj = {}; let b = Object.getOwnPropertyNames(obj); console.log(b.length); // 0 \\t Object.keys()方法 Object.keys()方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。 //该方法返回的同样是属性名组成的数组对象。 let obj = {}; let arr = Object.keys(obj); console.log(arr.length); // 0","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/javascript/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"空对象判断"}],["meta",{"property":"og:description","content":"判断一个对象是否为空对象？ 使用JSON.stringify(object) 方法，将对象转换为字符串，进行序列化。 console.log(JSON.stringify({}) === \\"{}\\"); // true for...in... 遍历对象，同时使用hasOwnProperty()去除原型属性 function isEmptyObject(object) { for (const key in object) { if (object.hasOwnProperty(key)) { return false } } return true } 注意：for...in 循环包括原型属性 jQuery的isEmptyObject()方法 //该方法是对 （for in）的封装； let obj = {}; let b = $.isEmptyObject(obj); alert(b); // true Object.getOwnPropertyNames()方法 Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。 let obj = {}; let b = Object.getOwnPropertyNames(obj); console.log(b.length); // 0 \\t Object.keys()方法 Object.keys()方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。 //该方法返回的同样是属性名组成的数组对象。 let obj = {}; let arr = Object.keys(obj); console.log(arr.length); // 0"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T03:54:51.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2024-12-22T03:54:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"空对象判断\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-22T03:54:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":3,"title":"判断一个对象是否为空对象？","slug":"判断一个对象是否为空对象","link":"#判断一个对象是否为空对象","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1734839691000,"updatedTime":1734839691000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":0.92,"words":276},"filePathRelative":"javascript/空对象判断.md","localizedDate":"2024年12月22日","excerpt":"<h3> 判断一个对象是否为空对象？</h3>\\n<ol>\\n<li>\\n<p>使用<code>JSON.stringify(object)</code> 方法，将对象转换为字符串，进行序列化。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"{}\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>for...in... 遍历对象，同时使用hasOwnProperty()去除原型属性</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">isEmptyObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">object</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> key <span class=\\"token keyword\\">in</span> object<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>注意：for...in 循环包括原型属性</p>\\n</li>\\n<li>\\n<p>jQuery的isEmptyObject()方法</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//该方法是对 （for in）的封装；</span>\\n<span class=\\"token keyword\\">let</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> b <span class=\\"token operator\\">=</span> $<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEmptyObject</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>Object.getOwnPropertyNames()方法</p>\\n<p><strong>Object.getOwnPropertyNames()<strong>方法返回一个由指定对象的所有</strong>自身属性</strong>的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> b <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwnPropertyNames</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0 \\t</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>Object.keys()方法</p>\\n<p><strong>Object.keys()<strong>方法会返回一个由一个给定对象的</strong>自身可枚举属性</strong>组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//该方法返回的同样是属性名组成的数组对象。</span>\\n<span class=\\"token keyword\\">let</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> arr <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
