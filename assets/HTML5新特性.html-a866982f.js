import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as d,a as e,b as n,d as t,e as r}from"./app-07d6e59a.js";const c={},o=r(`<h2 id="html5的新特性" tabindex="-1"><a class="header-anchor" href="#html5的新特性" aria-hidden="true">#</a> HTML5的新特性</h2><h4 id="_1-新的doctype" tabindex="-1"><a class="header-anchor" href="#_1-新的doctype" aria-hidden="true">#</a> 1. 新的Doctype</h4><p>尽管使用<!--DOCTYPE html-->，即使浏览器不懂这句话也会按照标准模式去渲染</p><h4 id="_2-figure元素" tabindex="-1"><a class="header-anchor" href="#_2-figure元素" aria-hidden="true">#</a> 2. Figure元素</h4><p>用figure和figcaption来语义化地表示带标题的图片</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;figure&gt; 
&lt;img src=”path/to/image” alt=”About image” /&gt; 
&lt;figcaption&gt; 
&lt;p&gt;This is an image of something interesting. &lt;/p&gt; 
&lt;/figcaption&gt; 
&lt;/figure&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-重新定义的small" tabindex="-1"><a class="header-anchor" href="#_3-重新定义的small" aria-hidden="true">#</a> 3. 重新定义的small</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;small&gt;已经被重新定义了，现在被用来表示小的排版，如网站底部的版权声明
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-去掉link和script标签里面的type属性" tabindex="-1"><a class="header-anchor" href="#_4-去掉link和script标签里面的type属性" aria-hidden="true">#</a> 4. 去掉link和script标签里面的type属性</h4><h4 id="_5-加-不加-括号" tabindex="-1"><a class="header-anchor" href="#_5-加-不加-括号" aria-hidden="true">#</a> 5. 加/不加 括号</h4><p>HTML5没有严格的要求属性必须加引号，闭合不闭合，但是建议加上引号和闭合标签</p><h4 id="_6-让你的内容可编辑-只需要加一个contenteditable属性" tabindex="-1"><a class="header-anchor" href="#_6-让你的内容可编辑-只需要加一个contenteditable属性" aria-hidden="true">#</a> 6. 让你的内容可编辑，只需要加一个contenteditable属性</h4><h4 id="_7-email-inputs" tabindex="-1"><a class="header-anchor" href="#_7-email-inputs" aria-hidden="true">#</a> 7. Email Inputs</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果我们给Input的type设置为email，浏览器就会验证这个输入是否是email类型，当然不能只依赖前端的校验，后端也得有相应的校验
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-placeholders" tabindex="-1"><a class="header-anchor" href="#_8-placeholders" aria-hidden="true">#</a> 8. Placeholders</h4><p>这个input属性的意义就是不必通过javascript来做placeholder的效果了</p><h4 id="_9-local-storage" tabindex="-1"><a class="header-anchor" href="#_9-local-storage" aria-hidden="true">#</a> 9. Local Storage</h4><p>使用Local Storage可以永久存储大的数据片段在客户端（除非主动删除），目前大部分浏览器已经支持，在使用之前可以检测一下window.localStorage是否存在</p><h4 id="_10-语义化的header和footer" tabindex="-1"><a class="header-anchor" href="#_10-语义化的header和footer" aria-hidden="true">#</a> 10. 语义化的header和footer</h4><h4 id="_11-更多的html5表单特性" tabindex="-1"><a class="header-anchor" href="#_11-更多的html5表单特性" aria-hidden="true">#</a> 11. 更多的HTML5表单特性</h4><h4 id="_12-ie和html5" tabindex="-1"><a class="header-anchor" href="#_12-ie和html5" aria-hidden="true">#</a> 12. IE和HTML5</h4><p>默认的，HTML5新元素被以inline的方式渲染，不过可以通过下面这种方式让<br> 其以block方式渲染</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>header, footer, article, section, nav, menu, hgroup { 
display: block; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不幸的是IE会忽略这些样式，可以像下面这样fix:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>document.createElement(”article”); 
document.createElement(”footer”); 
document.createElement(”header”); 
document.createElement(”hgroup”); 
document.createElement(”nav”); 
document.createElement(”menu”); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-hgroup" tabindex="-1"><a class="header-anchor" href="#_13-hgroup" aria-hidden="true">#</a> 13. hgroup</h4><p>一般在header里面用来将一组标题组合在一起，如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;header&gt; 
&lt;hgroup&gt; 
&lt;h1&gt; Recall Fan Page &lt;/h1&gt; 
&lt;h2&gt; Only for people who want the memory of a lifetime. &lt;/h2&gt; 
&lt;/hgroup&gt; 
&lt;/header&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-required属性" tabindex="-1"><a class="header-anchor" href="#_14-required属性" aria-hidden="true">#</a> 14. Required属性</h4><p>required属性定义了一个input是否是必须的，你可以像下面这样声明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;input type=”text” name=”someInput” required&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;input type=”text” name=”someInput” required=”required”&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_15-autofocus属性" tabindex="-1"><a class="header-anchor" href="#_15-autofocus属性" aria-hidden="true">#</a> 15. Autofocus属性</h4><p>正如它的词义，就是聚焦到输入框里面</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;input type=”text” name=”someInput” placeholder=”Douglas Quaid” required autofocus&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_16-audio支持" tabindex="-1"><a class="header-anchor" href="#_16-audio支持" aria-hidden="true">#</a> 16. Audio支持</h4><p>HTML5提供了audio标签，你不需要再按照第三方插件来渲染音频，大多数现代浏览器提供了对于HTML5 Audio的支持，不过目前仍旧需要提供一些兼容处理，如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;audio autoplay=”autoplay” controls=”controls”&gt; 
&lt;source src=”file.ogg” /&gt;&lt;!–FF–&gt; 
&lt;source src=”file.mp3″ /&gt;&lt;!–Webkit–&gt; 
&lt;a href=”file.mp3″&gt;Download this file.&lt;/a&gt; 
&lt;/audio&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_17-video支持" tabindex="-1"><a class="header-anchor" href="#_17-video支持" aria-hidden="true">#</a> 17. Video支持</h4><p>和Audio很像，video标签提供了对于video的支持，由于HTML5文档并没有给video指定一个特定的编码，所以浏 览器去决定要支持哪些编码，导致了很多不一致。Safari和IE支持H.264编码的格式，Firefox和Opera支持Theora和Vorbis 编码的格式，当使用HTML5 video的时候，你必须都提供：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;video controls preload&gt; 
&lt;source src=”cohagenPhoneCall.ogv” type=”video/ogg; codecs=’vorbis, theora’” /&gt; 
&lt;source src=”cohagenPhoneCall.mp4″ type=”video/mp4; ’codecs=’avc1.42E01E, mp4a.40.2′” /&gt; 
&lt;p&gt; Your browser is old. &lt;a href=”cohagenPhoneCall.mp4″&gt;Download this video instead.&lt;/a&gt; &lt;/p&gt; 
&lt;/video&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_18-预加载视频" tabindex="-1"><a class="header-anchor" href="#_18-预加载视频" aria-hidden="true">#</a> 18. 预加载视频</h4><p>preload属性就像它的字面意思那么简单，你需要决定是否需要在页面加载的时候去预加载视频</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;video preload&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_19-显示视频控制" tabindex="-1"><a class="header-anchor" href="#_19-显示视频控制" aria-hidden="true">#</a> 19. 显示视频控制</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;video preload controls&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_20-正则表达式" tabindex="-1"><a class="header-anchor" href="#_20-正则表达式" aria-hidden="true">#</a> 20. 正则表达式</h4><p>由于pattern属性，我们可以在你的markup里面直接使用正则表达式了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;form action=”&quot; method=”post”&gt; 
&lt;label for=”username”&gt;Create a Username: &lt;/label&gt; 
&lt;input type=”text” name=”username” id=”username” placeholder=”4 &lt;&gt; 10″ pattern=”[A-Za-z]{4,10}” autofocus required&gt; 
&lt;button type=”submit”&gt;Go &lt;/button&gt; 
&lt;/form&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_21-检测属性支持" tabindex="-1"><a class="header-anchor" href="#_21-检测属性支持" aria-hidden="true">#</a> 21. 检测属性支持</h4><p>除了Modernizr之外我们还可以通过javascript简单地检测一些属性是否支持，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script&gt; 
if (!’pattern’ in document.createElement(’input’) ) { 
// do client/server side validation 
} 
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_22-mark元素" tabindex="-1"><a class="header-anchor" href="#_22-mark元素" aria-hidden="true">#</a> 22. Mark元素</h4><p>把mark元素看做是高亮的作用，当我选择一段文字的时候，javascript对于HTML的markup效果应该是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;h3&gt; Search Results &lt;/h3&gt; 
&lt;p&gt; They were interrupted, just after Quato said, &lt;mark&gt;”Open your Mind”&lt;/mark&gt;. &lt;/p&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_23-什么时候用div" tabindex="-1"><a class="header-anchor" href="#_23-什么时候用div" aria-hidden="true">#</a> 23. 什么时候用div</h4><p>HTML5已经引入了这么多元素，那么div我们还要用吗？div你可以在没有更好的元素的时候去用。</p><h4 id="_24-想立即使用html5" tabindex="-1"><a class="header-anchor" href="#_24-想立即使用html5" aria-hidden="true">#</a> 24. 想立即使用HTML5?</h4><p>不要等2022了，现在就可以使用了，just do it.</p><h4 id="_25-哪些不是html5" tabindex="-1"><a class="header-anchor" href="#_25-哪些不是html5" aria-hidden="true">#</a> 25. 哪些不是HTML5</h4><ol><li>SVG</li><li>CSS3</li><li>Geolocation</li><li>Client Storage</li><li>Web Sockets</li></ol><h4 id="_26-data属性" tabindex="-1"><a class="header-anchor" href="#_26-data属性" aria-hidden="true">#</a> 26. Data属性</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div id=”myDiv” data-custom-attr=”My Value”&gt; Bla Bla &lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>CSS中使用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;style&gt; 
h1:hover:after { 
content: attr(data-hover-response); 
color: black; 
position: absolute; 
left: 0; 
} 
&lt;/style&gt; 
&lt;h1 data-hover-response=”I Said Don’t Touch Me!”&gt; Don’t Touch Me &lt;/h1&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_27-output元素" tabindex="-1"><a class="header-anchor" href="#_27-output元素" aria-hidden="true">#</a> 27. Output元素</h4><p>output元素用来显示计算结果，也有一个和label一样的for属性</p><h4 id="_28-用range-input来创建滑块" tabindex="-1"><a class="header-anchor" href="#_28-用range-input来创建滑块" aria-hidden="true">#</a> 28. 用Range Input来创建滑块</h4><p>HTML5引用的range类型可以创建滑块，它接受min, max, step和value属性<br> 可以使用css的:before和:after来显示min和max的值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>range<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>range<span class="token punctuation">&quot;</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">input[type=range]:before</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">padding-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token selector">input[type=range]:after</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),u={href:"https://www.jianshu.com/p/37c0b1eb4145",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.cnblogs.com/vicky1018/p/7705223.html",target:"_blank",rel:"noopener noreferrer"};function h(v,m){const a=i("ExternalLinkIcon");return l(),d("div",null,[o,e("p",null,[e("a",u,[n("link-1"),t(a)])]),e("p",null,[e("a",p,[n("link-2"),t(a)])])])}const x=s(c,[["render",h],["__file","HTML5新特性.html.vue"]]);export{x as default};
