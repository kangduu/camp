import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,e as t}from"./app-c0775de9.js";const c={},n=t('<h3 id="svg" tabindex="-1"><a class="header-anchor" href="#svg" aria-hidden="true">#</a> SVG</h3><blockquote><p>SVG 是一种使用 XML 描述 2D 图形的语言。<br> SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。<br> 在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p></blockquote><h3 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas" aria-hidden="true">#</a> Canvas</h3><blockquote><p>Canvas 使用 JavaScript 来绘制 2D/3D 图形。<br> Canvas 以像素级进行渲染。<br> 在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p></blockquote><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li>SVG</li></ul><p>不依赖分辨率；<br> 支持事件处理器；<br> 最适合带有大型渲染区域的应用程序（比如谷歌地图）；<br> 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）；<br> 不适合游戏应用；</p><ul><li>Canvas</li></ul><p>依赖分辨率；<br> 不支持事件处理器；<br> 弱的文本渲染能力；<br> 能够以 .png 或 .jpg 格式保存结果图像；<br> 最适合图像密集型的游戏，其中的许多对象会被频繁重绘；</p>',9),s=[n];function o(i,l){return e(),r("div",null,s)}const b=a(c,[["render",o],["__file","Canvas-SVG.html.vue"]]);export{b as default};
