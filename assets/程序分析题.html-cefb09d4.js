import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,e as r}from"./app-5d6ef5da.js";const s={},n=r('<h3 id="_1-2-3-map-parseint-结果是什么-为什么" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint-结果是什么-为什么" aria-hidden="true">#</a> [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) 结果是什么？为什么？</h3><h3 id="如何提升-javascript-变量的存储性能" tabindex="-1"><a class="header-anchor" href="#如何提升-javascript-变量的存储性能" aria-hidden="true">#</a> 如何提升 JavaScript 变量的存储性能？</h3><p>访问<strong>字面量和局部变量</strong>的速度最快，访问<strong>数组元素和对象成员</strong>相对较慢;</p><p>由于局部变量存在于作用域链的起始位置，因此<strong>访问局部变量比访问跨作用域变量更快</strong>，全局变量的访问速度最慢;</p><p><strong>嵌套的对象成员</strong>会明显影响性能，尽量少用，例如<code>window.loacation.href</code>;</p><p>属性和方法<strong>在原型链中的位置越深</strong>，则访问它的速度也越慢;</p><p>通常来说，<strong>需要访问多次</strong>的对象成员、数组元素、跨作用域变量<strong>可以保存在局部变量中</strong>从而提升 JavaScript 执行效率;</p><h3 id="介绍下-set、map、weakset-和-weakmap-的区别" tabindex="-1"><a class="header-anchor" href="#介绍下-set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a> 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h3><h3 id="es5-es6-的继承除了写法以外还有什么区别" tabindex="-1"><a class="header-anchor" href="#es5-es6-的继承除了写法以外还有什么区别" aria-hidden="true">#</a> ES5/ES6 的继承除了写法以外还有什么区别？</h3><h3 id="settimeout、promise、async-await-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout、promise、async-await-的区别" aria-hidden="true">#</a> setTimeout、Promise、Async/Await 的区别</h3><h3 id="async-await-如何通过同步的方式实现异步" tabindex="-1"><a class="header-anchor" href="#async-await-如何通过同步的方式实现异步" aria-hidden="true">#</a> Async/Await 如何通过同步的方式实现异步</h3>',11),i=[n];function o(c,h){return e(),t("div",null,i)}const _=a(s,[["render",o],["__file","程序分析题.html.vue"]]);export{_ as default};
