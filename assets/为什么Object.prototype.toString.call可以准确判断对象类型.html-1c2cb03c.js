import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as t,d as e,e as a}from"./app-e5581bd9.js";const r={},i=n("h1",{id:"为什么-object-prototype-tostring-call-可以准确判断对象类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么-object-prototype-tostring-call-可以准确判断对象类型","aria-hidden":"true"},"#"),t(" 为什么 Object.prototype.toString.call() 可以准确判断对象类型？")],-1),u=n("p",null,"在回答这个问题之前，我们必须掌握以下知识点：",-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[n("a",{href:""},"operand.prototype.toString()"),t("，返回对象的字符串形式")],-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>由于JavaScript是弱类型语言，导致实际工程开发中，需要进行大量的类型检查工作。比如，在遍历一个数组之前，你必须先判断他是否是一个数组类型，否则这将可能出错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 类型判断</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        	<span class="token comment">// todo</span>
    	<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你是一位初学者，你肯定遇到过下面的现象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JavaScript 诞生以来便如此</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"未经计算",-1),y=a('<p>下面列出了 <code>typeof</code> 可能返回的值：</p><table><thead><tr><th style="text-align:left;">类型</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:left;">Undefined</td><td>&quot;undefined&quot;</td></tr><tr><td style="text-align:left;">Boolean</td><td>&quot;boolean&quot;</td></tr><tr><td style="text-align:left;">Number</td><td>&quot;number&quot;</td></tr><tr><td style="text-align:left;">String</td><td>&quot;string&quot;</td></tr><tr><td style="text-align:left;">Function 对象</td><td>&quot;function&quot;</td></tr><tr><td style="text-align:left;">Symbol (ECMAScript 2015 新增)</td><td>&quot;symbol&quot;</td></tr><tr><td style="text-align:left;">BigInt (ECMAScript 2020 新增)</td><td>&quot;bigint&quot;</td></tr><tr><td style="text-align:left;">Null</td><td>&quot;object&quot;</td></tr><tr><td style="text-align:left;">宿主对象（由 JS 环境提供）</td><td>取决于具体实现</td></tr><tr><td style="text-align:left;"><strong>其他任何对象</strong></td><td>&quot;object&quot;</td></tr></tbody></table><p>从上表我们得出结论：</p><ol><li>使用 typeof 可以准确判断类型的有 <strong>Undefined、Boolean、Number、String、Function、Symbol、BigInt</strong> 。</li><li>特别注意一点，除 Function 外的所有构造函数的类型都是 &#39;object&#39;，如Array、Set、WeakSet、Map、WeakMap 等的结果都是 ‘object’ 。</li></ol>',4),S={id:"从-object-prototype-tostring-探讨内置对象的-tostring-实现",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#从-object-prototype-tostring-探讨内置对象的-tostring-实现","aria-hidden":"true"},"#",-1),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},z=a("<p>每个对象都有一个 <code>toString()</code> 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，<code>toString()</code> 方法被每个 <code>Object</code> 对象继承。<strong>如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 &quot;[object <em>type</em>]&quot;，其中 <code>type</code> 是对象的类型。</strong></p>",1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"Function",-1),F=n("strong",null,"覆盖",-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"Object",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"toString",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Function",-1),R=n("code",null,"toString",-1),w=n("p",null,"......",-1),A=a(`<p>举个🌰，如果我们将<code>Function.prototype.toString</code>删除后再调用<code>.toString()</code>，会得到什么结果啦？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function fn() {}</span>
<span class="token keyword">delete</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>Function.prototype.toString</code>删除后，第二次调用toString时，其实调用的是<code>Object.prototype.toString</code>，在上述代码基础上证明观点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">+</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">+</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，所有的内置对象都覆盖了从Object继承来的toString方法。</p><p>这也就解释了为什么 <code>Object.prototype.toString.call(operand)</code> 可以准确判断操作数的类型。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Array、Function 等内置对象作为 Object 的实例，都各自重写了 <code>toString</code> 方法，要得到操作数的具体类型，就要调用 Object 的原型的未被重写的 toString 方法。</p><p>使用 <code>Object.prototype.toString</code> 来获取每个对象的类型。为了每个对象都能通过 <code>Object.prototype.toString()</code> 来检测，需要以 <code>Function.prototype.call()</code> 或者 <code>Function.prototype.apply()</code> 的形式来调用，传递要检查的对象作为第一个参数，称为 <code>thisArg</code>。</p>`,9),G=n("code",null,"typeof null === 'object' ",-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null",target:"_blank",rel:"noopener noreferrer"},M=n("h2",{id:"references",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),t(" References")],-1),V={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#%E4%BD%BF%E7%94%A8_tostring()_%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"};function P(L,U){const s=p("ExternalLinkIcon");return c(),l("div",null,[i,u,n("ul",null,[n("li",null,[n("a",d,[t("instanceof"),e(s)])]),n("li",null,[n("a",k,[t("typeof"),e(s)])]),b,n("li",null,[n("a",g,[t("delete 操作符"),e(s)])]),n("li",null,[n("a",_,[t("Object.prototype.hasOwnProperty()"),e(s)]),t("方法会返回一个布尔值，指示对象自身属性中是否具有指定属性")]),n("li",null,[n("a",f,[t("Function.prototype.call()"),e(s)])])]),h,n("p",null,[t("所以，typeof 并不能判断所有类型，"),n("a",v,[t("typeof"),e(s)]),t(" 操作符返回一个字符串，表示"),m,t("的操作数的类型。")]),y,n("h3",S,[j,t(" 从 "),n("a",O,[t("Object.prototype.toString"),e(s)]),t(" 探讨内置对象的 toString 实现")]),z,n("blockquote",null,[n("p",null,[n("a",x,[q,e(s)]),t("对象"),F,t("了从"),n("a",N,[B,e(s)]),t("继承来的"),n("a",C,[J,e(s)]),t(" 方法。对于用户定义的 "),n("a",E,[W,e(s)]),t(" 对象，"),R,t("方法返回一个字符串，其中包含用于定义函数的源文本段。")]),w]),A,n("p",null,[t("QA：为什么 "),G,t(" ? "),n("a",I,[t("答案"),e(s)])]),M,n("ul",null,[n("li",null,[t("["),n("a",V,[t("使用 toString() 检测对象类型"),e(s)])])])])}const T=o(r,[["render",P],["__file","为什么Object.prototype.toString.call可以准确判断对象类型.html.vue"]]);export{T as default};
