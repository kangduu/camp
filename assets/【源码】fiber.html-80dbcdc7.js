import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as t,e as a}from"./app-b4cefb65.js";const i={},u=a(`<h2 id="你对-react-fiber-有了解吗" tabindex="-1"><a class="header-anchor" href="#你对-react-fiber-有了解吗" aria-hidden="true">#</a> 你对 react-fiber 有了解吗？</h2><ol><li>对于 react 原理的了解。</li><li>对于新技术的敏感程度，求知欲。</li></ol><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h3><ul><li>为了使 react 渲染的过程可以被<strong>中断</strong>，可以将控制权交还给浏览器，可以让位给<strong>高优先级的任务</strong>，浏览器空闲后再恢复渲染。</li><li>对于计算量比较大的 js 计算或者 dom 计算，就不会显得特别的卡顿，而是一帧一帧的有规律的执行任务。</li></ul><p>🌰 中断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 多个任务 同步</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> task<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>task <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里执行execute需要5秒左右时间</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种就会存在一个问题，每一个任务都需要大约 5 秒时间，那就会导致阻塞。<br> 如果在某个任务处停止啦？</p>`,7),r={id:"使用-generator-模拟中断",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#使用-generator-模拟中断","aria-hidden":"true"},"#",-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 多个任务 同步</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> task<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>task <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasHighPriorityTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">yield</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里执行execute需要5秒左右时间</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 恢复</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的代码简单的实现了中断任务并可恢复。</p><p><strong>🤔Question：</strong> 既然 generator 有类似的功能，为什么 react 不用 啦？</p><ol><li><p>需要用 generator 将涉及到的所有的代码都包装成 generator * 形式，非常麻烦，工作量比较大。</p></li><li><p>generator 内部是有状态的</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">doExpensiveWorkA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x的值依赖a</span>
  <span class="token keyword">yield</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">doExpensiveWorkA</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依赖x的值</span>
  <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 假设doExpensiveWorkA作用是将传入的参数相加后并返回结果。</span>
<span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> working <span class="token operator">=</span> <span class="token function">doWork</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
working<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x = m = 1</span>

m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//如果这里改变了m，但是x已经done了，所以我们只能沿用旧的x值。</span>
working<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y = x + b = a + b = m + n;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何判断当前是否有高优先级任务" tabindex="-1"><a class="header-anchor" href="#如何判断当前是否有高优先级任务" aria-hidden="true">#</a> 如何判断当前是否有高优先级任务？</h3><p>首先我们需要明白的是，当前 js 的环境其实并没有办法去判断是否有高优任务。<strong>🤔Question：</strong> 那你会怎么实现或者模拟一个啦？</p>`,7),m=n("li",null,[n("p",null,"只能约定一个合理的执行时间，当超过这个执行时间，如果任务任然没有执行完成，那就中断当前任务，将控制权交还给浏览器。"),n("p",null,[s("普遍的显示器都是每秒 60 帧，"),n("strong",null,"1000ms / 60fps = 16ms"),s("。大概就是一帧的时间大约是 16 毫秒。")])],-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"浏览器空闲时期",-1),g=n("p",null,"并且 callback 函数会接收到一个名为 IdleDeadline 的参数，这个参数可以获取当前空闲时间以及回调是否在超时时间前已经执行的状态。",-1),_=a("<li><p>浏览器在一帧内要做什么事情？</p><ol><li>处理用户输入事件</li><li>JS 的执行</li><li>requestAnimation 调用</li><li>布局 layout</li><li>绘制 paint</li></ol><blockquote><p>16ms 一帧时间内，浏览器就没有空闲时间，<br> 即 0ms -&gt; requestIdleCallback 将没有时间被调用<br> 那一直都没有空闲时间啦？</p></blockquote></li>",1),f=n("p",null,"浏览器很忙怎么办？（空闲时间为 0）",-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"{ timeout: 100 }",-1),y=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token comment">//如果指定了timeout，并且有一个正值，而回调在timeout毫秒过后还没有被调用，那么回调任务将放入事件循环中排队，即使这样做有可能对性能产生负面影响。</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q={href:"https://caniuse.com/?search=requestIdleCallback",target:"_blank",rel:"noopener noreferrer"},I=a('<h2 id="说说-react-是如何实现-requestidlecallback-的" tabindex="-1"><a class="header-anchor" href="#说说-react-是如何实现-requestidlecallback-的" aria-hidden="true">#</a> 说说 react 是如何实现 requestIdleCallback 的？</h2><blockquote><p>通过 messageChannel 模拟实现</p></blockquote><h2 id="react-中的任务优先级" tabindex="-1"><a class="header-anchor" href="#react-中的任务优先级" aria-hidden="true">#</a> react 中的任务优先级？</h2><p>5 个优先级：</p><ol><li><strong>Immediate</strong> 最高优先级，这个优先级的任务应该马上被执行，且不能中断；</li><li><strong>UserBlocking</strong> 这些任务一般是用户交互的结果，需要及时得到反馈；</li><li><strong>Normal</strong> 不需要用户立刻能感受到的变化，比如网络请求等；</li><li><strong>Low</strong> 这些任务可以被延后，但是最终也需要被执行；</li><li><strong>Idle</strong> 可以被无限期延后，比如 console</li></ol><blockquote><blockquote><blockquote><p>同一级别的任务，先后顺序</p></blockquote></blockquote></blockquote>',6);function j(C,W){const e=p("ExternalLinkIcon");return c(),l("div",null,[u,n("h3",r,[k,s(),n("a",d,[s("使用 generator 模拟中断"),t(e)])]),v,n("ul",null,[m,n("li",null,[n("p",null,[n("a",b,[s("requestIdleCallback(callback[, options])"),t(e)]),s(" : callback 函数将在"),h,s("被调用。")]),g]),_,n("li",null,[f,n("p",null,[n("a",x,[s("requestIdleCallback(callback[, options])"),t(e)]),s(" 第二个参数 "),w]),y])]),n("blockquote",null,[n("blockquote",null,[n("blockquote",null,[n("p",null,[n("a",q,[s("requestIdelCallback 的兼容性"),t(e)]),s(" 很差")])])])]),I])}const A=o(i,[["render",j],["__file","【源码】fiber.html.vue"]]);export{A as default};
