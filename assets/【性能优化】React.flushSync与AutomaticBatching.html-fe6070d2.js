const n=JSON.parse('{"key":"v-163373aa","path":"/react/%E3%80%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E3%80%91React.flushSync%E4%B8%8EAutomaticBatching.html","title":"Automatic Batching Update","lang":"zh-CN","frontmatter":{"title":"Automatic Batching Update","category":"React","description":"Automatic Batching Update React 是如何进行自动批处理更新的？ 在 React@18.0.0之前，我们使用 setState 或者 Hook 修改状态后，并不会立即触发重新渲染。React 会执行全部事件处理函数，然后触发一个单独的 re-render，合并所有更新。 —— tips：只能处理同步任务 🌰 写一个案例，实现多次同步调用 setState 或 hooks import { useEffect, useState } from \\"react\\"; const Increment = () =&gt; { const [count, setCount] = useState(0); useEffect(() =&gt; { console.log(\\"count value:\\", count); }); const incermentHandler = () =&gt; { setCount((c) =&gt; c + 1); setCount((c) =&gt; c + 1); setCount((c) =&gt; c + 1); }; return &lt;button onClick={incermentHandler}&gt;点击&lt;/button&gt;; }; export default Increment;","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camp/react/%E3%80%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E3%80%91React.flushSync%E4%B8%8EAutomaticBatching.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"Automatic Batching Update"}],["meta",{"property":"og:description","content":"Automatic Batching Update React 是如何进行自动批处理更新的？ 在 React@18.0.0之前，我们使用 setState 或者 Hook 修改状态后，并不会立即触发重新渲染。React 会执行全部事件处理函数，然后触发一个单独的 re-render，合并所有更新。 —— tips：只能处理同步任务 🌰 写一个案例，实现多次同步调用 setState 或 hooks import { useEffect, useState } from \\"react\\"; const Increment = () =&gt; { const [count, setCount] = useState(0); useEffect(() =&gt; { console.log(\\"count value:\\", count); }); const incermentHandler = () =&gt; { setCount((c) =&gt; c + 1); setCount((c) =&gt; c + 1); setCount((c) =&gt; c + 1); }; return &lt;button onClick={incermentHandler}&gt;点击&lt;/button&gt;; }; export default Increment;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T03:54:51.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2024-12-22T03:54:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Automatic Batching Update\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-22T03:54:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":3,"title":"React 是如何进行自动批处理更新的？","slug":"react-是如何进行自动批处理更新的","link":"#react-是如何进行自动批处理更新的","children":[]},{"level":3,"title":"使用ReactDOM.flushSync解决异步多次修改状态导致多次更新的问题","slug":"使用reactdom-flushsync解决异步多次修改状态导致多次更新的问题","link":"#使用reactdom-flushsync解决异步多次修改状态导致多次更新的问题","children":[]},{"level":3,"title":"React@18+之后便不存在以上问题了","slug":"react-18-之后便不存在以上问题了","link":"#react-18-之后便不存在以上问题了","children":[]}],"git":{"createdTime":1734839691000,"updatedTime":1734839691000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":2.16,"words":647},"filePathRelative":"react/【性能优化】React.flushSync与AutomaticBatching.md","localizedDate":"2024年12月22日","excerpt":"<h1> Automatic Batching Update</h1>\\n<h3> React 是如何进行自动批处理更新的？</h3>\\n<p><strong>在 React@18.0.0之前</strong>，我们使用 setState 或者 Hook 修改状态后，并不会立即触发重新渲染。React 会执行全部事件处理函数，然后触发一个单独的 re-render，<strong>合并所有更新</strong>。 <em>—— tips：只能处理同步任务</em></p>\\n<p>🌰 写一个案例，实现<strong>多次</strong>同步调用 setState 或 hooks</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useEffect<span class=\\"token punctuation\\">,</span> useState <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"react\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">Increment</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>count<span class=\\"token punctuation\\">,</span> setCount<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token function\\">useEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"count value:\\"</span><span class=\\"token punctuation\\">,</span> count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">incermentHandler</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">setCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">c</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> c <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">setCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">c</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> c <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">setCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">c</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> c <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">onClick</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>incermentHandler<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">点击</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> Increment<span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
