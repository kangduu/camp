import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-ec8b5cef.js";const i={},u=n("h3",{id:"_1-滚动边界确定",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-滚动边界确定","aria-hidden":"true"},"#"),s(" 1. 滚动边界确定")],-1),r={href:"https://github.com/kangduu/camp/issues/65",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},d=p(`<li><p>Observer API 实现</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useLayoutEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">PropsWithChildren</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useScrollObserverCtx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../context&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// placeholder element</span>
<span class="token keyword">const</span> PlaceholderKeys <span class="token operator">=</span> <span class="token punctuation">{</span> up<span class="token operator">:</span> <span class="token string">&quot;upstairs&quot;</span><span class="token punctuation">,</span> down<span class="token operator">:</span> <span class="token string">&quot;downstairs&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">ElementPlaceholder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> className <span class="token punctuation">}</span><span class="token operator">:</span> ComponentCSSProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> visibility<span class="token operator">:</span> <span class="token string">&quot;hidden&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>

<span class="token keyword">let</span> observer<span class="token operator">:</span> IntersectionObserver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ScrollObserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> PropsWithChildren<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> refresh <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useScrollObserverCtx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 详解 2</span>
  <span class="token keyword">const</span> ContainerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// mount</span>
  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> ContainerRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
    <span class="token keyword">const</span> upTarget <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">div.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PlaceholderKeys<span class="token punctuation">.</span>up<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      downTarget <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">div.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>PlaceholderKeys<span class="token punctuation">.</span>down<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// observe</span>
    observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span>entires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> state <span class="token operator">=</span> entires<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
          <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> classList <span class="token operator">=</span> curr<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">;</span>
            <span class="token keyword">const</span> isIntersecting <span class="token operator">=</span> curr<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>PlaceholderKeys<span class="token punctuation">.</span>up<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isIntersecting<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>upward <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>PlaceholderKeys<span class="token punctuation">.</span>down<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isIntersecting<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>downward <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> upward<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> downward<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">refresh</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> root<span class="token operator">:</span> container<span class="token punctuation">,</span> threshold<span class="token operator">:</span> <span class="token number">1.0</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>upTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>downTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// unobserve</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>observer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> overflow<span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token string">&quot;100%&quot;</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token string">&quot;0 24px&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ContainerRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ElementPlaceholder</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>PlaceholderKeys<span class="token punctuation">.</span>up<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ElementPlaceholder</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>PlaceholderKeys<span class="token punctuation">.</span>down<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),v=p(`<h3 id="_2-使用usecontext管理状态-确保-new-intersectionobserver-只在组件-mount-执行一次即可" tabindex="-1"><a class="header-anchor" href="#_2-使用usecontext管理状态-确保-new-intersectionobserver-只在组件-mount-执行一次即可" aria-hidden="true">#</a> 2. 使用<code>useContext</code>管理状态，确保 <code>new IntersectionObserver</code> 只在组件 mount 执行一次即可</h3><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// context.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ScrollObserverState</span> <span class="token punctuation">{</span>
  upward<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  downward<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ScrollObserverContext</span> <span class="token punctuation">{</span>
  state<span class="token operator">:</span> ScrollObserverState<span class="token punctuation">;</span>
  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> ScrollObserverState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ScrollObserverInitialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  upward<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  downward<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ScrollObserverCtx <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>ScrollObserverContext<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token operator">:</span> ScrollObserverInitialState<span class="token punctuation">,</span>
  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useScrollObserverCtx</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ScrollObserverCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-滚动加载内容" tabindex="-1"><a class="header-anchor" href="#_3-滚动加载内容" aria-hidden="true">#</a> 3. 滚动加载内容</h3><p>获取 context 状态，判断上下滚动</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// index.tsx</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> <span class="token function-variable function">loadPreviousData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// other feature ...</span>

   <span class="token function">scrollTargetIntoView</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">const</span> <span class="token function-variable function">loadNextData</span> <span class="token operator">=</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// other feature ...</span>

   <span class="token function">scrollTargetIntoView</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

  <span class="token comment">// 向上或向下滚动</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>scrollState<span class="token punctuation">,</span> setScrollState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>ScrollObserverState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    ScrollObserverInitialState
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> refreshScrollState <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>setScrollState<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pending <span class="token operator">=</span> loading <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 向上滚动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollState<span class="token punctuation">.</span>upward <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> first <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScrollState</span><span class="token punctuation">(</span>ScrollObserverInitialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">loadPreviousData</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载数据</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 向下滚动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollState<span class="token punctuation">.</span>downward <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> last <span class="token operator">=</span> list<span class="token punctuation">[</span>list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setScrollState</span><span class="token punctuation">(</span>ScrollObserverInitialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">loadNextData</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载数据</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>scrollState<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> ScrollEleWrapper <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollObserverCtx.Provider</span></span>
      <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token operator">:</span> scrollState<span class="token punctuation">,</span> refresh<span class="token operator">:</span> refreshScrollState <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token string">&quot;relative&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token comment">// 高度固定，且用来矫正滚动 详见 4</span>
        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ScrollEleWrapper<span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollObserver</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
           &lt;!--  实际渲染的内容 --&gt;
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ScrollObserver</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ScrollObserverCtx.Provider</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-数据加载后滚动到可视区域" tabindex="-1"><a class="header-anchor" href="#_4-数据加载后滚动到可视区域" aria-hidden="true">#</a> 4. 数据加载后滚动到可视区域</h3><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> ScrollEleWrapper <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">scrollTargetIntoView</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> block<span class="token operator">?</span><span class="token operator">:</span> ScrollLogicalPosition<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">intoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ScrollElement<span class="token operator">:</span> HTMLUListElement <span class="token operator">=</span> scroll_ref<span class="token operator">?.</span>current<span class="token punctuation">;</span>
    <span class="token keyword">const</span> TargetElement<span class="token operator">:</span> HTMLLIElement <span class="token operator">=</span> ScrollElement<span class="token operator">?.</span>querySelector<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token operator">?.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>TargetElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> _block <span class="token operator">=</span> block <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> block <span class="token operator">:</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">;</span>
      <span class="token comment">// 【1】</span>
      <span class="token comment">// ! 当调用子元素内目标元素的 scrollIntoView() 时，浏览器默认会逐级向上遍历所有可滚动的祖先容器（包括 body），并调整它们的滚动位置以确保目标元素在视口中可见。</span>
      TargetElement<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> block<span class="token operator">:</span> _block <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 矫正祖先元素滚动导致当前上下文展示错误问题 【1】</span>
    ScrollEleWrapper<span class="token punctuation">.</span>current<span class="token operator">?.</span>scrollIntoView<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">{</span> block<span class="token operator">:</span> <span class="token string">&quot;center&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 这里也很重要</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>intoView<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(b,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[n("a",r,[s("JavaScript 判断元素是否在可视区域的方法"),t(a)])])]),n("li",null,[n("p",null,[n("a",k,[s("Intersection Observer API"),t(a)])])]),d]),v])}const y=e(i,[["render",m],["__file","chat.html.vue"]]);export{y as default};
