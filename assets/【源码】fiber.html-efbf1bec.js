const t=JSON.parse('{"key":"v-838a3000","path":"/posts/react/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91fiber.html","title":"你对 react-fiber 有了解吗？","lang":"zh-CN","frontmatter":{"title":"你对 react-fiber 有了解吗？","category":"React","description":"你对 react-fiber 有了解吗？ 对于 react 原理的了解。 对于新技术的敏感程度，求知欲。 目的 为了使 react 渲染的过程可以被中断，可以将控制权交还给浏览器，可以让位给高优先级的任务，浏览器空闲后再恢复渲染。 对于计算量比较大的 js 计算或者 dom 计算，就不会显得特别的卡顿，而是一帧一帧的有规律的执行任务。 🌰 中断 const tasks = []; // 多个任务 同步 function run() { let task; while ((task = tasks.shift())) { execute(task); // 这里执行execute需要5秒左右时间 } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/front-end-camps/posts/react/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91fiber.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"你对 react-fiber 有了解吗？"}],["meta",{"property":"og:description","content":"你对 react-fiber 有了解吗？ 对于 react 原理的了解。 对于新技术的敏感程度，求知欲。 目的 为了使 react 渲染的过程可以被中断，可以将控制权交还给浏览器，可以让位给高优先级的任务，浏览器空闲后再恢复渲染。 对于计算量比较大的 js 计算或者 dom 计算，就不会显得特别的卡顿，而是一帧一帧的有规律的执行任务。 🌰 中断 const tasks = []; // 多个任务 同步 function run() { let task; while ((task = tasks.shift())) { execute(task); // 这里执行execute需要5秒左右时间 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-08T08:25:45.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2023-09-08T08:25:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"你对 react-fiber 有了解吗？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-08T08:25:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"你对 react-fiber 有了解吗？","slug":"你对-react-fiber-有了解吗","link":"#你对-react-fiber-有了解吗","children":[{"level":3,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":3,"title":"使用 generator 模拟中断","slug":"使用-generator-模拟中断","link":"#使用-generator-模拟中断","children":[]},{"level":3,"title":"如何判断当前是否有高优先级任务？","slug":"如何判断当前是否有高优先级任务","link":"#如何判断当前是否有高优先级任务","children":[]}]},{"level":2,"title":"说说 react 是如何实现 requestIdleCallback 的？","slug":"说说-react-是如何实现-requestidlecallback-的","link":"#说说-react-是如何实现-requestidlecallback-的","children":[]},{"level":2,"title":"react 中的任务优先级？","slug":"react-中的任务优先级","link":"#react-中的任务优先级","children":[]}],"git":{"createdTime":1694161545000,"updatedTime":1694161545000,"contributors":[{"name":"dukang","email":"dk@nosugartech.com","commits":1}]},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"posts/react/【源码】fiber.md","localizedDate":"2023年9月8日","excerpt":"<h2> 你对 react-fiber 有了解吗？</h2>\\n<ol>\\n<li>对于 react 原理的了解。</li>\\n<li>对于新技术的敏感程度，求知欲。</li>\\n</ol>\\n<h3> 目的</h3>\\n<ul>\\n<li>为了使 react 渲染的过程可以被<strong>中断</strong>，可以将控制权交还给浏览器，可以让位给<strong>高优先级的任务</strong>，浏览器空闲后再恢复渲染。</li>\\n<li>对于计算量比较大的 js 计算或者 dom 计算，就不会显得特别的卡顿，而是一帧一帧的有规律的执行任务。</li>\\n</ul>\\n<p>🌰 中断</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> tasks <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 多个任务 同步</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> task<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>task <span class=\\"token operator\\">=</span> tasks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">execute</span><span class=\\"token punctuation\\">(</span>task<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 这里执行execute需要5秒左右时间</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
