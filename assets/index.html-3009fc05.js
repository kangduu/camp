import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as l,a,b as e,d as r,e as p}from"./app-ec8b5cef.js";const c={},o=a("h3",{id:"playground",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#playground","aria-hidden":"true"},"#"),e(" Playground")],-1),d={href:"https://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"},h=p(`<h3 id="获取typescript" tabindex="-1"><a class="header-anchor" href="#获取typescript" aria-hidden="true">#</a> 获取TypeScript</h3><ol><li>使用 npm 包管理器安装<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>验证TypeScript<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>编译TypeScript文件<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc test.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="typescript基础类型" tabindex="-1"><a class="header-anchor" href="#typescript基础类型" aria-hidden="true">#</a> TypeScript基础类型</h3><p>boolean、number、string、symbol、array、enum（数字枚举、字符串枚举、常量枚举、异构枚举）、any、unknown、void、tuple（元祖）、null和undefined、never、（** object和Object和｛｝？**）</p><h3 id="typescript断言" tabindex="-1"><a class="header-anchor" href="#typescript断言" aria-hidden="true">#</a> TypeScript断言</h3><ol><li>类型断言<br> a. &quot;&lt;&gt;&quot; 语法</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> name<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;kangduu&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> len<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>b. as 语法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> name<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;kangduu&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> len<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>非空断言</li><li>确定赋值断言</li></ol><h3 id="类型守卫" tabindex="-1"><a class="header-anchor" href="#类型守卫" aria-hidden="true">#</a> 类型守卫</h3><ol><li>in 关键字</li><li>typeof 关键字</li><li>instanceof 关键字</li><li>自定义类型保护的类型谓词？</li></ol><h3 id="联合类型和类型别名" tabindex="-1"><a class="header-anchor" href="#联合类型和类型别名" aria-hidden="true">#</a> 联合类型和类型别名</h3><ol><li>联合类型</li><li>可辨识联合</li><li>类型别名</li></ol><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h3><h3 id="typescript函数" tabindex="-1"><a class="header-anchor" href="#typescript函数" aria-hidden="true">#</a> TypeScript函数</h3><ol><li>剪头函数</li><li>参数类型和返回类型</li><li>函数类型</li><li>可选参数和默认参数</li><li>剩余参数</li><li>函数重载</li></ol><h3 id="typescript数组" tabindex="-1"><a class="header-anchor" href="#typescript数组" aria-hidden="true">#</a> TypeScript数组</h3><ol><li>数组解构</li><li>数组展开运算符</li><li>数组遍历</li></ol><h3 id="typescript对象" tabindex="-1"><a class="header-anchor" href="#typescript对象" aria-hidden="true">#</a> TypeScript对象</h3><h3 id="typescript-接口" tabindex="-1"><a class="header-anchor" href="#typescript-接口" aria-hidden="true">#</a> TypeScript 接口</h3><h3 id="typescript-类" tabindex="-1"><a class="header-anchor" href="#typescript-类" aria-hidden="true">#</a> TypeScript 类</h3><h3 id="typescript-泛型" tabindex="-1"><a class="header-anchor" href="#typescript-泛型" aria-hidden="true">#</a> TypeScript 泛型</h3><ol><li>泛型语法</li><li>泛型接口</li><li>泛型类</li><li>泛型工具类型 <ol><li>typeof</li><li>keyof</li><li>in</li><li>infer</li><li>extends</li></ol></li></ol><h3 id="typescript装饰器" tabindex="-1"><a class="header-anchor" href="#typescript装饰器" aria-hidden="true">#</a> TypeScript装饰器</h3><h3 id="编译上下文" tabindex="-1"><a class="header-anchor" href="#编译上下文" aria-hidden="true">#</a> 编译上下文</h3><ol><li>tsconfig.json</li><li>compilerOptions</li></ol><h3 id="typescript开发辅助工具" tabindex="-1"><a class="header-anchor" href="#typescript开发辅助工具" aria-hidden="true">#</a> TypeScript开发辅助工具</h3><ol><li>TypeScript Playground</li><li>TypeScript UML Playground</li><li>JSON TO TS</li><li>Schemats</li><li>TypeScript AST Viewer</li><li>TypeDoc</li><li>TypeScript ESLint</li></ol>`,29);function u(y,b){const n=i("ExternalLinkIcon");return t(),l("div",null,[o,a("p",null,[a("a",d,[e("TypeScript playground"),r(n)])]),h])}const g=s(c,[["render",u],["__file","index.html.vue"]]);export{g as default};
