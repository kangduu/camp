import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-2778ff1b.js";const i={},u=t('<h2 id="vue-采用了什么模型-和-mvc-模型有什么区别" tabindex="-1"><a class="header-anchor" href="#vue-采用了什么模型-和-mvc-模型有什么区别" aria-hidden="true">#</a> Vue 采用了什么模型？和 MVC 模型有什么区别？</h2><p>​ vue 采用的是 mvvm 模型。</p><p>​ mvvm 模型中，视图和模型无法直接通信，必须依赖 View Model 通信。</p><p>​ ViewModel 模型中通常需要实现一个 observer 观察者，其职责就是当数据改变时（model），通知视图做更新，当视图改变（用户操作等）时，通知数据修改。</p><p>​ <code>双向数据绑定</code> 实现数据在模型和视图的相互转换（更新）。模型--&gt;VM--&gt;视图 （数据绑定）；视图--&gt;VM--&gt;模型（事件监听）</p><h4 id="mvvm-【模型-视图-视图模型】-model-view-viewmodel" tabindex="-1"><a class="header-anchor" href="#mvvm-【模型-视图-视图模型】-model-view-viewmodel" aria-hidden="true">#</a> MVVM 【模型-视图-视图模型】（Model-View-ViewModel）</h4><ul><li><strong>M（Model）：数据模型层</strong>。<u>js 中的数据</u>，（后端传递的数据，业务逻辑相关的数据对象）；</li><li><strong>V（View）：视图层</strong>。用户所有<strong>可见页面</strong>；</li><li><strong>VM（ViewModel）：视图模型层</strong> 。<u>vue 实例化对象</u>，MVVM 的核心，连接 view 和 model 的桥梁；</li></ul><p>View 与 ViewModel 之间通过双向绑定（data-binding）建立联系，这样当 View（视图层）变化时，会自动更新到 ViewModel（视图模型），反之亦然。</p><h4 id="mvc-【模型-视图-控制器】-model-view-controller" tabindex="-1"><a class="header-anchor" href="#mvc-【模型-视图-控制器】-model-view-controller" aria-hidden="true">#</a> MVC 【模型-视图-控制器】（Model-View-Controller)</h4><ul><li><strong>M（Model）：数据模型层</strong>。是应用程序中用于<strong>处理应用程序数据逻辑</strong>的部分，模型对象<strong>负责在数据库中存取数据</strong>。</li><li><strong>V（View）：视图层</strong>。是应用程序中<strong>处理数据显示</strong>的部分，视图是依据模型数据创建的。</li><li><strong>C（Controller）：控制层</strong>。是应用程序中<strong>处理用户交互</strong>的部分，控制器<strong>负责从视图读取数据，控制用户输入，并向模型发送数据</strong>。</li></ul><h4 id="mvvm-和-mvc-的区别" tabindex="-1"><a class="header-anchor" href="#mvvm-和-mvc-的区别" aria-hidden="true">#</a> MVVM 和 MVC 的区别</h4><p>​ MVC 和 MVVM 的区别并不是 VM 完全取代了 C，ViewModel 存在目的在于抽离 Controller 中展示的业务逻辑，而不是替代 Controller，其它视图操作业务等还是应该放在 Controller 中实现。也就是说 MVVM 实现的是业务逻辑组件的重用。由于 mvc 出现的时间比较早，前端并不那么成熟，很多业务逻辑也是在后端实现，所以前端并没有真正意义上的 MVC 模式。</p><h4 id="拓展—前后端数据处理流程" tabindex="-1"><a class="header-anchor" href="#拓展—前后端数据处理流程" aria-hidden="true">#</a> 拓展—前后端数据处理流程</h4><ul><li><strong>Client</strong> - 客户端，一般指浏览器，浏览器可以通过 HTTP 协议向服务器请求数据。</li><li><strong>Server</strong> - 服务端，一般指 Web 服务器，可以接收客户端请求，并向客户端发送响应数据。</li><li><strong>Business</strong> - 业务层， 通过 Web 服务器处理应用程序，如与数据库交互，逻辑运算，调用外部程序等。</li><li><strong>Data</strong> - 数据层，一般由数据库组成。</li></ul><h2 id="说一说-vue2-x-的生命周期" tabindex="-1"><a class="header-anchor" href="#说一说-vue2-x-的生命周期" aria-hidden="true">#</a> 说一说 Vue2.x 的生命周期</h2>',15),r={href:"http://dukangblog.top/2020/03/17/Vue-2.x%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",target:"_blank",rel:"noopener noreferrer"},d={id:"vue2-响应式原理-【深度理解-vue】",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#vue2-响应式原理-【深度理解-vue】","aria-hidden":"true"},"#",-1),h={href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h4 id="observe-的实现思路" tabindex="-1"><a class="header-anchor" href="#observe-的实现思路" aria-hidden="true">#</a> observe 的实现思路</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue2 数组的响应式原理： 覆盖可以修改数组的7个方法（修改原型上的方法）</span>
<span class="token comment">// 思想(数组)： 从数组原型上获取到这7个方法，并覆盖为可以发送更新通知的函数实现</span>
<span class="token keyword">const</span> originalProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unshift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;splice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sort&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//做你本来该做的事</span>
    originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//通知更新</span>
    <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// vue2 对象的响应式原理： Object.defineProperty() 、 遍历每个key，定义getter、setter</span>
<span class="token comment">// 思想(对象)： 递归遍历传入的obj，定义每一个属性的拦截</span>
<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判断类型：如果是数组则替换其原型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arrayProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 对obj每个key执行拦截</span>
      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 具体定义指定的key拦截器</span>
<span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//递归遍历，val是否为对象</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// newVal可能是对象</span>
        <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知更新</span>
        <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        val <span class="token operator">=</span> newVal<span class="token punctuation">;</span> <span class="token comment">// val 不会被释放 ，val 在这里是一个闭包</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;响应数据更新&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 普通更新</span>
<span class="token comment">// data.foo = &#39;foooooooooooooooooooooooooooo&#39;</span>
<span class="token comment">// 2. 嵌套属性更新</span>
<span class="token comment">// data.bar.a = 3</span>
<span class="token comment">// 3. 赋值是对象</span>
<span class="token comment">// data.bar = { a: 100 }</span>
<span class="token comment">// 4. 数组的更新</span>
<span class="token comment">// data.arr.push(4)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="简单描述-vue2-x-的响应式原理" tabindex="-1"><a class="header-anchor" href="#简单描述-vue2-x-的响应式原理" aria-hidden="true">#</a> 简单描述 vue2.x 的响应式原理</h6><blockquote><p>在初始化数据时，使用 Object.definePrototype 重新定义 data 中所有属性的 getter/setter，当页面使用对应的属性时，先进行依赖收集（收集当前组建的 watcher），若属性发生变化会通知相关依赖进行更新操作（发布订阅）。</p></blockquote><h6 id="vue2-x-中如何监测数组变化" tabindex="-1"><a class="header-anchor" href="#vue2-x-中如何监测数组变化" aria-hidden="true">#</a> vue2.x 中如何监测数组变化</h6><blockquote><p>使用函数劫持的方式，重写原型链上的数组方法（七个能够改变原数组，[&#39;push&#39;, &#39;pop&#39;, &#39;shift&#39;, &#39;unshift&#39;, &#39;splice&#39;, &#39;reverse&#39;, &#39;sort&#39;]）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originalProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;shift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unshift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;splice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reverse&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sort&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//做你本来该做的事</span>
    originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//通知更新</span>
    <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue2-响应式存在的不足" tabindex="-1"><a class="header-anchor" href="#vue2-响应式存在的不足" aria-hidden="true">#</a> vue2 响应式存在的不足</h4><ol><li>当需要响应化数据较大时，递归遍历性能不好、消耗较大。（初始化进行）</li><li>新增或删除属性无法监听。需使用 vue.set(obj,proName,value)</li><li>数组的响应化需要额外实现</li><li>对象属性修改语法有限制（需要使用 vm.$set,直接 obj.peroto 会出现无法监听的问题)</li></ol><h2 id="vue3-x-的响应式原理" tabindex="-1"><a class="header-anchor" href="#vue3-x-的响应式原理" aria-hidden="true">#</a> vue3.x 的响应式原理</h2><h4 id="知识储备" tabindex="-1"><a class="header-anchor" href="#知识储备" aria-hidden="true">#</a> 知识储备</h4><ol><li>Proxy</li><li>Reflect</li><li>WeakMap()</li></ol><h4 id="响应原理" tabindex="-1"><a class="header-anchor" href="#响应原理" aria-hidden="true">#</a> 响应原理</h4><p>Vue3.x 改用了 ES6 的 proxy 替代 Object.definePrototype。同时支持优雅降级（<strong>如果浏览器不支持 3.x，则采用 2.x 方法</strong>）</p><ol><li>proxy 可以监听数组和对象的变化</li><li>多达 13 种拦截方法</li><li>作为新标准将受到浏览器厂商重点持续的性能优化</li></ol><h6 id="proxy-只会代理对象的第一层-那么-vue3-x-又是怎样处理这个问题的" tabindex="-1"><a class="header-anchor" href="#proxy-只会代理对象的第一层-那么-vue3-x-又是怎样处理这个问题的" aria-hidden="true">#</a> Proxy 只会代理对象的第一层，那么 Vue3.x 又是怎样处理这个问题的？</h6><blockquote><p>判断当前 Reflcet.get 的返回值是否为对象 Object，如果是则再通过 reactive 方法做代理，这样便实现了深度代理。</p></blockquote><h6 id="监测数组的时候-可能会触发多次-get-set-那么如何防止触发多次啦" tabindex="-1"><a class="header-anchor" href="#监测数组的时候-可能会触发多次-get-set-那么如何防止触发多次啦" aria-hidden="true">#</a> 监测数组的时候，可能会触发多次 get/set，那么如何防止触发多次啦？</h6><blockquote><p>判断 key 是否为当前被代理对象 target 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 trigger。</p></blockquote><h2 id="事件绑定原理" tabindex="-1"><a class="header-anchor" href="#事件绑定原理" aria-hidden="true">#</a> 事件绑定原理</h2><ol><li><strong>原生事件</strong>绑定是通过<code>addEventListener</code>绑定给真实元素的，</li><li><strong>组件事件</strong>绑定是通过 Vue 自定义的<code>$on</code>实现的。</li></ol><h2 id="组件间通信" tabindex="-1"><a class="header-anchor" href="#组件间通信" aria-hidden="true">#</a> 组件间通信</h2><h4 id="父子组件通信" tabindex="-1"><a class="header-anchor" href="#父子组件通信" aria-hidden="true">#</a> 父子组件通信</h4>`,23),m={href:"https://cn.vuejs.org/v2/guide/components-props.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://vuejs.bootcss.com/api/#vm-emit",target:"_blank",rel:"noopener noreferrer"},g=n("span",{class:"katex-error",title:"ParseError: KaTeX parse error: Expected 'EOF', got '#' at position 35: …ootcss.com/api/#̲vm-on) [",style:{color:"#cc0000"}},"on](https://vuejs.bootcss.com/api/#vm-on) [",-1),f=n("li",null,[n("p",null,[n("code",null,"$parent"),s(),n("code",null,"$children"),s(" (获取父子组件实例)")])],-1),_={href:"https://vuejs.bootcss.com/api/#ref",target:"_blank",rel:"noopener noreferrer"},y={href:"https://vuejs.bootcss.com/api/#provide-inject",target:"_blank",rel:"noopener noreferrer"},x=t(`<h4 id="兄弟组件通信" tabindex="-1"><a class="header-anchor" href="#兄弟组件通信" aria-hidden="true">#</a> 兄弟组件通信</h4><ul><li>Event Bus (实现跨组件通信 <code>Vue.prototype.$bus = new Vue</code> )</li><li>Vuex</li></ul><h4 id="跨级组件通信" tabindex="-1"><a class="header-anchor" href="#跨级组件通信" aria-hidden="true">#</a> 跨级组件通信</h4><ul><li><code>Vuex</code></li><li><code>$attrs、$listeners</code></li><li><code>provide/inject</code></li></ul><h2 id="vue-里-v-model-指令可以缩写成什么" tabindex="-1"><a class="header-anchor" href="#vue-里-v-model-指令可以缩写成什么" aria-hidden="true">#</a> vue 里 v-model 指令可以缩写成什么？</h2><p><strong><u>似乎是没有缩写</u></strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>something<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
等同于下边：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>something<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>something = $event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
// 这里的 $event.target.value 是指的js对象的property
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>v-model</code>本质就是一个语法糖，可以看成是<code>value + input</code>方法的语法糖。 可以通过 model 属性的<code>prop</code>和<code>event</code>属性来进行自定义。原生的 v-model，会根据标签的不同生成不同的事件和属性。</p><h2 id="v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-show" aria-hidden="true">#</a> v-if 和 v-show</h2><p>条件不成立时：</p><p>v-if <strong>不渲染 DOM 元素</strong>；</p><p>v-show 操作样式（display），切换当前 DOM 的显示和隐藏。</p><h2 id="组件中的-data-为什么是一个函数" tabindex="-1"><a class="header-anchor" href="#组件中的-data-为什么是一个函数" aria-hidden="true">#</a> 组件中的 data 为什么是一个函数？</h2><p>组件被复用多少次，就会创建多少个实例；本质上，<code>这些实例用的都是同一个构造函数</code>。</p><p>data 是对象（属于引用类型）则会影响到所有的实例。</p><p><strong>保证组件不同的实例之间 data 不冲突</strong>，data 必须是一个函数（return）。</p>`,16),w={id:"特殊属性-key-的作用",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#特殊属性-key-的作用","aria-hidden":"true"},"#",-1),j={href:"https://vuejs.bootcss.com/api/#key",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[n("strong",null,[s("key 的作用是"),n("u",null,"尽可能的复用 DOM 元素"),s("。")])],-1),E=n("p",null,"新旧 children 中的节点只有顺序是不同的时候，最佳的操作应该是通过移动元素的位置来达到更新的目的。",-1),M=n("p",null,"需要在新旧 children 的节点中保存映射关系，以便能够在旧 children 的节点中找到可复用的节点。key 也就是 children 中节点的唯一标识。",-1),B={id:"探讨computed和watch",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#探讨computed和watch","aria-hidden":"true"},"#",-1),O={href:"https://vuejs.bootcss.com/api/#computed",target:"_blank",rel:"noopener noreferrer"},P={href:"https://vuejs.bootcss.com/api/#vm-watch",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"Computed",-1),D={href:"https://vuejs.bootcss.com/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},S={href:"https://vuejs.bootcss.com/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"标签元素上的表达式过于复杂时，在模板中放入过多逻辑会让模板难以维护，可以将复杂的逻辑放入计算属性中处理。",-1),$=n("p",null,"计算属性默认只有 getter，不过在需要时你也可以提供一个 setter",-1),F=t("<blockquote><p><code>Watch</code>没有缓存性，更多的是<strong>观察</strong>的作用，可以监听某些数据执行回调。</p><p><strong>需要在数据变化时<u>执行异步或开销较大</u>的操作时，这个方式最有用（合适）。</strong></p><p>当我们需要深度监听对象中的属性时，可以打开<code>deep：true</code>选项，这样便会对对象中的每一项进行监听。</p><p><code>deep：true</code>会带来性能问题，优化的话可以使用<code>字符串形式</code>监听，如果没有写到组件中，不要忘记使用<code>unWatch手动注销</code></p></blockquote>",1),N={id:"keep-alive的作用",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#keep-alive的作用","aria-hidden":"true"},"#",-1),W={href:"https://vuejs.bootcss.com/api/#keep-alive",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[n("code",null,"keep-alive"),s("可以实现组件缓存，当组件切换时不会对当前组件进行卸载。")],-1),I=n("p",null,[s("常用的两个属性"),n("code",null,"include/exclude"),s("，允许组件有条件的进行缓存(主要用于保留组件状态或避免重新渲染。)。")],-1),U=n("p",null,[s("两个生命周期"),n("code",null,"activated/deactivated"),s("，用来得知当前组件是否处于活跃状态。")],-1),H=n("p",null,[n("strong",null,"注意")],-1),z=n("li",null,[n("code",null,"<keep-alive>"),s(" 是用在"),n("strong",null,"其一个直属的子组件"),s("被开关的情形。")],-1),J=n("li",null,[n("strong",null,[s("如果你在其中有 "),n("code",null,"v-for"),s(" 则不会工作。")])],-1),K=n("li",null,[s("如果有上述的多个条件性的子元素，"),n("code",null,"<keep-alive>"),s(" 要求同时只有一个子元素被渲染。")],-1),X=n("code",null,"<keep-alive>",-1),G={href:"https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="vue-里有一种情况是双向绑定失效-说一说你遇到的例子-怎么解决" tabindex="-1"><a class="header-anchor" href="#vue-里有一种情况是双向绑定失效-说一说你遇到的例子-怎么解决" aria-hidden="true">#</a> vue 里有一种情况是双向绑定失效，说一说你遇到的例子，怎么解决</h2><blockquote><p><strong>Vue 无法检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式属性。例如<code>Vue.set(vm.someObject, &#39;b&#39;, 2)</code></p><p>数组方法[&#39;push&#39;, &#39;pop&#39;, &#39;shift&#39;, &#39;unshift&#39;, &#39;splice&#39;, &#39;reverse&#39;, &#39;sort&#39;]之外的方法(修改操作)都无法监听。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{personal.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#box&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">personal</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jake&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">4222</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personal<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 这里为personal对象新增 age 属性，不是响应式的。</span>
        <span class="token comment">//正确做法</span>
        <span class="token comment">// this.$set(this.personal, &#39;age&#39;, 12)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的做法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的做法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12213</span><span class="token punctuation">;</span> <span class="token comment">// 无效</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Y={href:"https://cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://cn.vuejs.org/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://cn.vuejs.org/v2/guide/list.html#%E5%AF%B9%E8%B1%A1%E5%8F%98%E6%9B%B4%E6%A3%80%E6%B5%8B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},sn={id:"你理解的-vue-路由是什么-vue-router",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#你理解的-vue-路由是什么-vue-router","aria-hidden":"true"},"#",-1),en={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},tn=t("<p>它和 Vue.js 的核心深度集成，让<strong>构建单页面应用变得易如反掌</strong>。包含的功能有：</p><ol><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ol>",2),on={href:"https://blog.csdn.net/zl13015214442/article/details/89636046",target:"_blank",rel:"noopener noreferrer"},pn=n("h2",{id:"vue-和其他框架有什么区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue-和其他框架有什么区别","aria-hidden":"true"},"#"),s(" vue 和其他框架有什么区别？")],-1),cn={href:"https://cn.vuejs.org/v2/guide/comparison.html",target:"_blank",rel:"noopener noreferrer"},ln={id:"vue-全局-api-vue-nexttick-handler",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#vue-全局-api-vue-nexttick-handler","aria-hidden":"true"},"#",-1),rn={href:"https://cn.vuejs.org/v2/api/#Vue-nextTick",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p><strong>下次 DOM 更新循环结束之后执行延迟回调。</strong> nextTick 使用了<strong>宏任务和微任务</strong> （不知道的就不要说出来）</p><p>执行环境不同，采用的方法也不同（按序嗅探）：</p><ol><li>Promise</li><li>MutationObserver</li><li>setImmediate</li><li>setTimeout</li></ol><p>上述操作定义了一个异步方法，如果多次调用 nextTick 会将方法存入队列中，通过这个异步方法来清空当前队列。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">submit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// DOM 还没有更新</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 数据更新完成执行的回调函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 注意：this 指向当前Vue实列</span>
    <span class="token comment">// DOM 更新了</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 数据更新完成执行的回调函数</span>
    <span class="token comment">// DOM 更新了</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 注意：this 指向window，即定义时环境</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;olds&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>提示：上述两种方案，其this指向不同</code></p><h2 id="虚拟-dom" tabindex="-1"><a class="header-anchor" href="#虚拟-dom" aria-hidden="true">#</a> 虚拟 DOM</h2><p><strong>产生原因</strong></p><blockquote><p>浏览器中操作 DOM 是很昂贵的。频繁的操作 DOM，会产生一定的性能问题。</p></blockquote><p><strong>本质</strong></p><blockquote><p><code>用一个原生的JS对象去描述一个DOM节点。是对真实DOM的一层抽象。</code></p><p>也就是源码中的 VNode 类，它定义在 src/core/vdom/vnode.js 中</p></blockquote><p>虚拟 DOM 映射到真实 DOM 要经历 VNode 的 create、diff、patch 等阶段。</p>`,12),kn={id:"vue-ssr-服务端渲染",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#vue-ssr-服务端渲染","aria-hidden":"true"},"#",-1),vn={href:"https://ssr.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},mn=t('<p><code>将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端</code></p><h6 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h6><ol><li>更好的 SEO</li><li>首屏加载速度更快</li></ol><h6 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h6><ol><li>开发条件会受到限制，服务器端渲染只支持<code>beforeCreate</code>和<code>created</code>两个钩子</li><li>需要一些外部扩展库时需要特殊处理</li><li>服务端渲染应用程序也需要处于 Node.js 的运行环境</li><li>服务器会有更大的负载需求。</li></ol><p>你必须掌握</p><ol><li>webpack</li><li>node.js</li><li>vue</li></ol><h1 id="vue-的性能优化" tabindex="-1"><a class="header-anchor" href="#vue-的性能优化" aria-hidden="true">#</a> Vue 的性能优化</h1><h3 id="编码阶段" tabindex="-1"><a class="header-anchor" href="#编码阶段" aria-hidden="true">#</a> 编码阶段</h3><ul><li>尽量减少<code>data</code>中的数据，<code>data</code>中的数据都会增加 getter 和 setter，会收集对应的 watcher</li><li><code>v-if</code>和<code>v-for</code>不能同时使用</li><li>在能够满足需求且不出错的情况下，使用 <code>v-if</code> 替代 <code>v-for</code></li><li>如果需要使用<code>v-for</code>给每项元素绑定事件时使用<code>事件代理</code></li><li><code>key</code>保证唯一</li><li>单页面应用（SPA 页面）采用<code>keep-alive</code>缓存组件</li><li>使用路由懒加载、异步组件</li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ul><h3 id="seo-优化" tabindex="-1"><a class="header-anchor" href="#seo-优化" aria-hidden="true">#</a> SEO 优化</h3><ul><li>预渲染</li><li>服务端渲染 SSR</li></ul><h3 id="打包优化" tabindex="-1"><a class="header-anchor" href="#打包优化" aria-hidden="true">#</a> 打包优化</h3>',13),bn=n("li",null,"压缩代码",-1),gn={href:"https://blog.csdn.net/qq_17175013/article/details/87002440",target:"_blank",rel:"noopener noreferrer"},fn=n("li",null,"使用 cdn 加载第三方模块",-1),_n=n("li",null,"webpack 的多线程打包 happypack",-1),yn=n("li",null,"webpack 插件 splitChunks 抽离公共文件",-1),xn=n("li",null,"sourceMap 优化",-1),wn=n("li",null,"dll(一次打包第三方包，无需重复打包)",-1),Vn=t('<h3 id="用户体验" tabindex="-1"><a class="header-anchor" href="#用户体验" aria-hidden="true">#</a> 用户体验</h3><ul><li>骨架屏</li><li>PWA（Progressive Web App） 渐进式增强 WEB 应用</li><li>缓存（客户端缓存、服务端缓存）</li></ul><h2 id="hash-路由和-history-路由" tabindex="-1"><a class="header-anchor" href="#hash-路由和-history-路由" aria-hidden="true">#</a> hash 路由和 history 路由</h2><p><code>location.hash</code>的值实际就是 URL 中<code>#</code>后面的东西。</p><p><code>history</code>实际采用了 HTML5 中提供的 API 来实现，主要有<code>history.pushState()</code>和<code>history.replaceState()</code>。</p>',5);function jn(qn,En){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[s("声明周期"),e(a)])]),n("h2",d,[k,s(" vue2 响应式原理 【"),n("a",h,[s("深度理解 vue"),e(a)]),s("】")]),v,n("ul",null,[n("li",null,[n("p",null,[n("a",m,[s("props"),e(a)]),s(" (父传子)")])]),n("li",null,[n("p",null,[n("a",b,[g,s("emit"),e(a)]),s(" (子传父)")])]),f,n("li",null,[n("p",null,[n("a",_,[s("ref"),e(a)]),s(" (获取实例的方式、调用组件的属性或者方法)")])]),n("li",null,[n("p",null,[n("a",y,[s("provide / inject"),e(a)]),s(" (官方不推荐使用，但是写组件库时很常用)")])])]),x,n("h2",w,[V,s(" 特殊属性 "),n("a",j,[s("key"),e(a)]),s(" 的作用")]),q,E,M,n("h2",B,[A,s(" 探讨"),n("a",O,[s("computed"),e(a)]),s("和"),n("a",P,[s("watch"),e(a)])]),n("blockquote",null,[n("p",null,[C,s("本质是一个具备"),n("a",D,[s("缓存"),e(a)]),s("的 watcher，相关响应式依赖的属性发生变化时重新计算并更新视图。")]),n("p",null,[s("适用于计算比较消耗性能的"),n("a",S,[s("计算属性"),e(a)]),s("场景。（有缓存，不用每次都去调用方法）")]),T,$]),F,n("h2",N,[R,s(),n("a",W,[s("keep-alive"),e(a)]),s("的作用")]),L,I,U,H,n("ol",null,[z,J,K,n("li",null,[X,s(" 不会在"),n("a",G,[s("函数式组件"),e(a)]),s("中正常工作，因为它们没有缓存实例。")])]),Q,n("p",null,[n("a",Y,[s("检测变化的注意事项"),e(a)])]),n("p",null,[n("a",Z,[s("Vue 不能检测数组的变动"),e(a)])]),n("p",null,[n("a",nn,[s("Vue 中对象变更检测注意事项"),e(a)])]),n("h2",sn,[an,s(" 你理解的 vue 路由是什么？ "),n("a",en,[s("Vue Router"),e(a)])]),tn,n("p",null,[s("参考： "),n("a",on,[s("怎样理解 Vue 中的路由"),e(a)])]),pn,n("p",null,[n("a",cn,[s("Vue.js 对比其他框架"),e(a)])]),n("h2",ln,[un,s(" Vue 全局 API "),n("a",rn,[s("Vue.nextTick(handler)"),e(a)])]),dn,n("h1",kn,[hn,s(),n("a",vn,[s("VUE SSR 服务端渲染"),e(a)])]),mn,n("ul",null,[bn,n("li",null,[s("webpack 的 "),n("a",gn,[s("Tree Shaking/Scope Hoisting"),e(a)])]),fn,_n,yn,xn,wn]),Vn])}const An=o(i,[["render",jn],["__file","Vue.html.vue"]]);export{An as default};
