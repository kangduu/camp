const e=JSON.parse('{"key":"v-13f1e565","path":"/performance/%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5%E5%89%96%E6%9E%90.html","title":"浏览器缓存机制介绍与缓存策略剖析","lang":"zh-CN","frontmatter":{"description":"浏览器缓存机制介绍与缓存策略剖析 缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些： 通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。 很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/performance/%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5%E5%89%96%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"浏览器缓存机制介绍与缓存策略剖析"}],["meta",{"property":"og:description","content":"浏览器缓存机制介绍与缓存策略剖析 缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些： 通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。 很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T14:05:38.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-26T14:05:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器缓存机制介绍与缓存策略剖析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T14:05:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"HTTP 缓存机制探秘","slug":"http-缓存机制探秘","link":"#http-缓存机制探秘","children":[{"level":3,"title":"强缓存的特征","slug":"强缓存的特征","link":"#强缓存的特征","children":[]},{"level":3,"title":"强缓存的实现：从 expires 到 cache-control","slug":"强缓存的实现-从-expires-到-cache-control","link":"#强缓存的实现-从-expires-到-cache-control","children":[]},{"level":3,"title":"Cache-Control 应用分析","slug":"cache-control-应用分析","link":"#cache-control-应用分析","children":[]},{"level":3,"title":"协商缓存：浏览器与服务器合作之下的缓存策略","slug":"协商缓存-浏览器与服务器合作之下的缓存策略","link":"#协商缓存-浏览器与服务器合作之下的缓存策略","children":[]},{"level":3,"title":"协商缓存的实现：从 Last-Modified 到 Etag","slug":"协商缓存的实现-从-last-modified-到-etag","link":"#协商缓存的实现-从-last-modified-到-etag","children":[]}]},{"level":2,"title":"HTTP 缓存决策指南","slug":"http-缓存决策指南","link":"#http-缓存决策指南","children":[]},{"level":2,"title":"MemoryCache","slug":"memorycache","link":"#memorycache","children":[]},{"level":2,"title":"Service Worker Cache","slug":"service-worker-cache","link":"#service-worker-cache","children":[]},{"level":2,"title":"Push Cache","slug":"push-cache","link":"#push-cache","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1740578738000,"updatedTime":1740578738000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":15.19,"words":4556},"filePathRelative":"performance/览器缓存机制介绍与缓存策略剖析.md","localizedDate":"2025年2月26日","excerpt":"<h1> 浏览器缓存机制介绍与缓存策略剖析</h1>\\n<p>缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些：</p>\\n<blockquote>\\n<p>通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p>\\n</blockquote>\\n<p>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p>","autoDesc":true}');export{e as data};
