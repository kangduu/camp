import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-07d6e59a.js";const p={},t=e(`<h3 id="javascript运行三部曲-脚本执行js引擎都做了什么呢" tabindex="-1"><a class="header-anchor" href="#javascript运行三部曲-脚本执行js引擎都做了什么呢" aria-hidden="true">#</a> JavaScript运行三部曲 （脚本执行js引擎都做了什么呢？）</h3><ol><li>语法分析（通篇扫描检查是否存在低级语法错误）</li><li>预编译（简单理解就是在内存中开辟一些空间，存放一些变量与函数）</li><li>提升问题（发生预编译时产生，确实是js运行中存在的原理，但是不能实质性解决预编译问题）</li></ol><ul><li><ul><li><p>函数声明整体提升</p></li><li><p>变量声明提升（变量初始化不算，只存在声明变量这一步：var a;）</p></li><li><p><code>优先级：函数 &gt; 变量声明</code></p></li></ul></li></ul><ol start="4"><li>解释执行</li></ol><h3 id="预编译前奏" tabindex="-1"><a class="header-anchor" href="#预编译前奏" aria-hidden="true">#</a> 预编译前奏</h3><ol><li><p>暗示全局变量(imply global)</p><p>即任何变量未经声明就赋值，此变量就为全局对象（global object）所有</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// throw error &#39;a is not defined &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>一切声明的全局变量，全是window的属性。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//b是局部变量</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意</code>：预编译阶段(脚本代码块script执行前) 发生变量声明和函数声明，没有初始化行为（赋值），匿名函数不参与预编译 ，只有在解释执行阶段才会进行变量初始化</p><p><code>运行期上下文</code>：当函数执行时（前一刻），会创建一个称为执行期上下文的内部对象（AO 等）。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行期上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行期上下文，当函数执行完毕，它所产生的执行期上下文被销毁。</p><p><code>查找变量</code>：从作用域链的顶部依次向下查找。</p><h3 id="js预编译实例" tabindex="-1"><a class="header-anchor" href="#js预编译实例" aria-hidden="true">#</a> JS预编译实例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 创建变量（变量声明+为变量赋值）</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//函数声明</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;so easy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">b</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>让我们看看引擎对这段代码做了什么吧</p><ol><li>页面产生便创建了GO全局对象（window）</li><li>第一个脚本文件加载</li><li>脚本加载完毕后，分析语法是否合法</li><li>开始预编译</li></ol><ul><li>查找函数声明，作为GO属性，值赋予函数体</li><li>查找变量声明，作为GO属性，值赋予undefined（执行代码时进行初始化）</li></ul></blockquote><h6 id="全局的预编译" tabindex="-1"><a class="header-anchor" href="#全局的预编译" aria-hidden="true">#</a> 全局的预编译</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//伪代码</span>
<span class="token constant">GO</span>
window <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//页面加载创建GO同时，创建了document、navigator、screen等等属性，此处省略</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span>，
    <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;so easy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//解释执行代码（直到执行函数b）</span>
<span class="token comment">//GO</span>
  window <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//变量随着执行流得到初始化</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token comment">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;so easy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//执行函数b之前，发生预编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="函数执行前的预编译" tabindex="-1"><a class="header-anchor" href="#函数执行前的预编译" aria-hidden="true">#</a> 函数执行前的预编译</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//伪代码</span>
<span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建AO同时，创建了arguments等等属性，此处省略</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
<span class="token comment">// 解释执行函数中代码</span>
<span class="token comment">// 第一个脚本文件执行完毕，加载第二个脚本文件</span>
<span class="token comment">// 第二个脚本文件加载完毕后，进行语法分析</span>
<span class="token comment">// 语法分析完毕，开始预编译</span>
<span class="token comment">// 重复最开始的预编译步骤……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>预编译(函数执行前) ※ （AO）</p><ol><li>创建AO（Argument Object）对象（执行期上下文，即一个函数执行库。 eg： AO{... }）</li><li>查找函数形参及函数内 变量声明，将形参名及变量名作为AO对象的属性名，值为undefined</li><li>实参形参相统一，（实参值赋给形参 ）</li><li>查找函数声明，函数名作为AO对象的属性，值为函数体（值 或函数引用）</li></ol><p><code>注：变量和函数同名AO中只能有一个；执行函数时AO对象也会接着改变（即AO在函数执行完才失效）</code></p><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">注意执行当前语句时，a还为1，执行到 a = 3 时a才为3</span><span class="token regex-delimiter">/</span></span>
  c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c<span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    1</span>
<span class="token comment">//    2</span>
<span class="token comment">//    function d() {}</span>
<span class="token comment">//    0</span>
<span class="token comment">/*    AO = {
        a = 3;
        b = 2;
        c = 0;
        d = function () {};
    }*/</span>
<span class="token comment">//预编译(脚本代码块script执行前) （GO）</span>
<span class="token comment">// 1. 查找全局变量声明（包括隐式全局变量声明，省略var的声明），变量名作全局对象的属性，值为undefined</span>
<span class="token comment">// 2. 查找函数声明，函数名作为全局对象的属性，值为函数引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),c=[t];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","预编译.html.vue"]]);export{d as default};
