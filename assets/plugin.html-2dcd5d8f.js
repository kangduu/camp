const e=JSON.parse('{"key":"v-f362a36a","path":"/webpack/plugin.html","title":"","lang":"zh-CN","frontmatter":{"description":"是否写过Plugin？简述一下编写plugin的思路？ 如果说Loader负责文件转换，那么Plugin便是负责功能扩展。Loader和Plugin作为Webpack的两个重要组成部分，承担着两部分不同的职责。 我们知道，webpack基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。 既然基于发布订阅模式，那么知道Webpack到底提供了哪些事件钩子供插件开发者使用是非常重要的，之前提到过compiler和compilation是Webpack两个非常核心的对象，其中compiler暴露了和 Webpack整个生命周期相关的钩子（compiler-hooks），而compilation则暴露了与模块和依赖有关的粒度更小的事件钩子（Compilation Hooks）。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/webpack/plugin.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:description","content":"是否写过Plugin？简述一下编写plugin的思路？ 如果说Loader负责文件转换，那么Plugin便是负责功能扩展。Loader和Plugin作为Webpack的两个重要组成部分，承担着两部分不同的职责。 我们知道，webpack基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。 既然基于发布订阅模式，那么知道Webpack到底提供了哪些事件钩子供插件开发者使用是非常重要的，之前提到过compiler和compilation是Webpack两个非常核心的对象，其中compiler暴露了和 Webpack整个生命周期相关的钩子（compiler-hooks），而compilation则暴露了与模块和依赖有关的粒度更小的事件钩子（Compilation Hooks）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T07:04:07.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-27T07:04:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T07:04:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"是否写过Plugin？简述一下编写plugin的思路？","slug":"是否写过plugin-简述一下编写plugin的思路","link":"#是否写过plugin-简述一下编写plugin的思路","children":[]}],"git":{"createdTime":1740639847000,"updatedTime":1740639847000,"contributors":[{"name":"Seven","email":"74498826+kangduu@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"webpack/plugin.md","localizedDate":"2025年2月27日","excerpt":"<h2> 是否写过Plugin？简述一下编写plugin的思路？</h2>\\n<p>如果说<strong>Loader负责文件转换</strong>，那么<strong>Plugin便是负责功能扩展</strong>。Loader和Plugin作为Webpack的两个重要组成部分，承担着两部分不同的职责。</p>\\n<p>我们知道，<strong>webpack基于发布订阅模式</strong>，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。</p>\\n<p>既然基于发布订阅模式，那么知道Webpack到底提供了哪些事件钩子供插件开发者使用是非常重要的，之前提到过compiler和compilation是Webpack两个非常核心的对象，其中compiler暴露了和 Webpack整个生命周期相关的钩子（compiler-hooks），而compilation则暴露了与模块和依赖有关的粒度更小的事件钩子（Compilation Hooks）。</p>","autoDesc":true}');export{e as data};
