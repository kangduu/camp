import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-991790b5.js";const t={},e=p(`<h2 id="为什么会有分时函数啦" tabindex="-1"><a class="header-anchor" href="#为什么会有分时函数啦" aria-hidden="true">#</a> 为什么会有分时函数啦？</h2><p>​ 防抖和节流是对重复或频繁触发的任务控制，移除部分操作，只执行最后一次或每隔一段时间执行一次。</p><p>​ 分时函数同样是<strong>多任务，但是不让其一次执行完，而是每一段时间执行一部分</strong>。比如添加dom节点，一次需要条件100个，可分为10次，一次10个。</p><p>​ 分时函数主要是<strong>解决页面一次渲染数据（或节点）太多，导致页面卡顿或假死现象</strong>。</p><h2 id="分时函数" tabindex="-1"><a class="header-anchor" href="#分时函数" aria-hidden="true">#</a> 分时函数</h2><p>首先我们来看一个案例，通过循环添加了1000个div。其中处理数据少，当每一个元素都需要请求计算数据是，消耗无比的大。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;time-chunk&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> index<span class="token punctuation">;</span>
    parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们解决这种问题的思路是</p><ol><li>知道任务总数，每次执行数量，执行间隔，以及单元任务的处理函数</li><li>将所有任务传入，执行一个任务后便将其移除——<strong>队列数组（先进先出）</strong></li><li>维护一个setInterval，循环执行</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>array<span class="token punctuation">}</span></span>       <span class="token parameter">dataArray</span>  ，任务数组
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>    <span class="token parameter">fn</span>   ， 每一次任务的业务逻辑执行函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>      <span class="token parameter">count</span> ， 每一次任务执行数量
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>      <span class="token parameter">duraiton</span>  ，单位 ms ，间隔多少毫秒执行一次
 */</span>
<span class="token keyword">function</span> <span class="token function">timeChunk</span><span class="token punctuation">(</span><span class="token parameter">dataArray<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> duration <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer<span class="token punctuation">,</span>
      <span class="token comment">//防止重复</span>
      isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">eachChunk</span><span class="token punctuation">(</span><span class="token parameter">chunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> obj <span class="token operator">=</span> dataArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每次实际执行操作</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRuning<span class="token punctuation">)</span> <span class="token keyword">return</span>
    isRuning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 动态计算任务长度</span>
      <span class="token keyword">let</span> len <span class="token operator">=</span> dataArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        isRuning <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果剩余任务长度不足count，则全部执行</span>
        <span class="token keyword">let</span> remainder <span class="token operator">=</span> len <span class="token operator">&gt;=</span> count <span class="token operator">?</span> count <span class="token operator">:</span> len<span class="token punctuation">;</span>
        <span class="token function">eachChunk</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","分时函数.html.vue"]]);export{k as default};
