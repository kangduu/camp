import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as e,e as l}from"./app-c5a91522.js";const i={},u=l(`<h2 id="运算优先级" tabindex="-1"><a class="header-anchor" href="#运算优先级" aria-hidden="true">#</a> 运算优先级</h2><p><code>从左到右，从高到低</code></p><h2 id="常用正则表达式" tabindex="-1"><a class="header-anchor" href="#常用正则表达式" aria-hidden="true">#</a> 常用正则表达式</h2><ol><li><p><strong>[0,1)</strong> 的数字 <code>/^[0](\\.\\d+)?$/.test(value)</code></p></li><li><p>正整数 <code>/^[1-9]\\d*$/.test(value)</code></p></li><li><p><s>整数 <code>/^(-?[1-9]*)$/.test(value) 和 /^-?0{1}$/.test(value)</code> 【正整数、负整数、正负 0】</s></p></li><li><p>大于 0 的自然数 <code>/^[0](\\.\\d+)$/.test(value) 和 /^[1-9]\\d*(\\.\\d+)?$/.test(value)</code></p></li></ol><h2 id="qa" tabindex="-1"><a class="header-anchor" href="#qa" aria-hidden="true">#</a> QA</h2><h3 id="正则表达式出现的-1代表什么意思" tabindex="-1"><a class="header-anchor" href="#正则表达式出现的-1代表什么意思" aria-hidden="true">#</a> 正则表达式出现的 <code>\\1</code>代表什么意思？</h3><blockquote><p>正则表达式中的小括号<code>()</code>代表分组的意思。如果在其后面出现<code>\\1</code>则是代表<strong>与小括号中要匹配的内容相同</strong>。</p><p><strong>注意</strong>：<code>\\1</code> 必须与小括号配合使用</p></blockquote><p>示例</p><ol><li><p><code> /([yMdhsm])\\1*/g</code> 时间格式判断</p><p>首先<code>()</code>中[yMdhsm] 字符集合，匹配<code>yMdhsm</code>的任意一个字符；其后面出现<code>\\1</code> ，且存在<code>*</code> 匹配前面的子表达式<code>零次或多次</code> ,则是代表继续匹配相同的字符；所以，最终<strong>连续相同的字符</strong>匹配。</p></li><li><p>判断一个字符串中出现次数最多的字符，并统计次数 <code> /(\\w)\\1*/g</code></p><p><code> /(\\w)\\1*/g</code> 解析同【1】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxChart</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> charts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> common <span class="token operator">=</span> charts<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> maxStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  common<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxStr <span class="token operator">=</span> val<span class="token punctuation">;</span>
      len <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> maxStr <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1. 长度为 1 的情况</span>
<span class="token comment">// 2. 最大长度多个相同的</span>
<span class="token comment">// 3. 参数非法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>返回字符串最长重复字符字串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxChart</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> common <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> maxStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  common<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxStr <span class="token operator">=</span> val<span class="token punctuation">;</span>
      len <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> maxStr <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,10),r={href:"https://www.runoob.com/regexp/regexp-tutorial.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.runoob.com/regexp/regexp-rule.html",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[a("菜鸟教程"),e(s)])]),n("p",null,[n("a",d,[a("匹配规则"),e(s)])])])}const b=t(i,[["render",k],["__file","reg-exp.html.vue"]]);export{b as default};
