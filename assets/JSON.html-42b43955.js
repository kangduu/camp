import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c as r,a as n,b as s,d as p,f as t}from"./app-fc02369b.js";const c={},i=n("h3",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),s(" JSON")],-1),u=n("code",null,"stringify",-1),k=n("code",null,"parse",-1),d={href:"http://dukangblog.top/2020/03/31/JSON/#%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},v={href:"http://dukangblog.top/2020/03/31/JSON/#%E6%8B%93%E5%B1%95%E9%98%85%E8%AF%BB",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[n("p",null,"支持（序列化和解析）"),n("p",null,[n("code",null,"对象"),s("、"),n("code",null,"数组"),s("、"),n("code",null,"字符串"),s("、"),n("code",null,"boolean 值"),s("、"),n("code",null,"null")])],-1),m=t("<p>特殊的（只能序列化，且结果很意外啊）</p><p>序列化后结果是 <strong>null</strong> ：<code>NaN</code>、 <code>Infinity</code>、<code>-Infinity</code> ；</p><p>序列化后结果是 <strong>{}</strong> ：<code>RegExp对象</code>、<code>Error对象</code></p>",3),g=n("code",null,"Date对象",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("p",null,"不支持（不可序列化也不可解析）"),n("p",null,[n("code",null,"函数"),s("、"),n("code",null,"undefined"),s(" 、"),n("code",null,"Symbol")])],-1),q=t(`<p>下面定义一个json对象，然后使用 JSON.stringify() 和 JSON.parse() 测试，思考结果是怎样的？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支持的</span>
    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">boolt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">boolf</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">nll</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

    <span class="token comment">// 序列为 null</span>
    <span class="token literal-property property">nan</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>
    <span class="token literal-property property">inf</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_inf</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span>

    <span class="token comment">// 序列化后为 {}</span>
    <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">//不支持</span>
    <span class="token literal-property property">sym</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">und</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>

    <span class="token comment">//特殊的 Date对象</span>
    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// BigInt 数据类型为ES10新的数据类型，未测试</span>
    <span class="token comment">// big: BigInt(222222222222222222)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="json-stringify-value-replacer-array-function-indent-number-string" tabindex="-1"><a class="header-anchor" href="#json-stringify-value-replacer-array-function-indent-number-string" aria-hidden="true">#</a> JSON.stringify( value [ , replacer&lt;array | function&gt; [ , indent&lt;number | string&gt; ] ] )</h5><blockquote><p>序列化对象，返回与指定值对应的JSON字符串。</p><p>可以通过额外的参数, 控制仅包含某些属性, 或者以自定义方法来替换某些key对应的属性值。</p><p>只可序列化对象可枚举的自身属性（否则会被忽略）</p><p>序列化属于深度遍历，即嵌套的属性。</p></blockquote><h6 id="第二个参数" tabindex="-1"><a class="header-anchor" href="#第二个参数" aria-hidden="true">#</a> 第二个参数</h6><ul><li><p><strong>null | 无</strong></p><p>对象所有可序列化的属性都会被序列化</p><p>使用 <strong>JSON.stringify(json)</strong> 得到的结果，会发现和源对象有出入，存在很多隐式问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// normal</span>
  <span class="token string-property property">&quot;obj&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;arr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;str&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;boolt&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;boolf&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;nll&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

  <span class="token comment">// is null</span>
  <span class="token string-property property">&quot;nan&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

  <span class="token comment">// is {}</span>
  <span class="token string-property property">&quot;reg&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// Date</span>
  <span class="token string-property property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2020-04-05T08:55:38.213Z&quot;</span> <span class="token comment">// 注意时间的序列化结果</span>

  <span class="token comment">// vanish 消失了</span>
  <span class="token comment">//sym: Symbol(&#39;symbol&#39;),</span>
  <span class="token comment">//fun: function () { return &#39;123&#39; },</span>
  <span class="token comment">//und: undefined,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数组</strong></p><p><code>只有包含在这个数组中的属性名且其属性值支持序列化的</code>才会被序列化到最终的 JSON 字符串中，其中可能存在与预期不符合的结果，如RegExp、Date、function（被忽略了）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {&quot;obj&quot;:{},&quot;reg&quot;:{},&quot;date&quot;:&quot;2020-04-05T09:17:21.821Z&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一特性，<strong>可以在实际开发中可用于调试代码</strong>，如：返回的数据对象很大，直接打印指定属性即可。</p></li><li><p><strong>函数</strong></p><p>在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> value
  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//console.log(res);</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;obj&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;arr&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;str&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;boolt&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;inf&quot;</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_inf&quot;</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;reg&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2020-04-05T09:37:36.035Z&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：Infinity和-Infinity这两个值，序列化结果为null，但是却为真值</strong></p></li></ul><h5 id="第三个参数" tabindex="-1"><a class="header-anchor" href="#第三个参数" aria-hidden="true">#</a> 第三个参数</h5><p>​ 只是增加索引，便于调试阅读，<code>指定缩进用的字符串</code></p><ul><li><p><strong>null | 空</strong></p><p>无缩进，连续字符串形式</p></li><li><p><strong>数字</strong></p><p>代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时需要第二个参数</span>
<span class="token punctuation">{</span>
          <span class="token string-property property">&quot;obj&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;arr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token number">2</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;str&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;boolt&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;boolf&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;nll&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;nan&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;_inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;reg&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2020-04-05T09:47:17.483Z&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串</p><p>该字符串将被作为空格，(当字符串长度超过10个字母，取其前10个字母)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;*****************&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;obj&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;arr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token number">1</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;str&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;boolt&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;boolf&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;nll&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;nan&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;_inf&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;reg&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;err&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token string">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2020-04-05T09:48:11.359Z&quot;</span>
<span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="json-parse-string-reviver-function" tabindex="-1"><a class="header-anchor" href="#json-parse-string-reviver-function" aria-hidden="true">#</a> JSON.parse( string [ , reviver&lt;function&gt; ] )</h5><blockquote><p>解析<code>JSON字符串</code>并返回对应的值（反序列化）。</p><p>可以额外传入一个转换函数，用来将生成的值和其属性, 在返回之前进行某些修改。</p><p>转换函数是从内向外遍历每一个属性。</p><p>不允许用逗号作为结尾</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token string">&#39;{ &quot;obj&quot;: { &quot;a&quot;: 1 }, &quot;arr&quot;: [1, 2], &quot;str&quot;: &quot;string&quot;, &quot;boolt&quot;: true, &quot;nll&quot;: null,&quot;date&quot;: &quot;2020-04-05T09:57:59.470Z&quot; }&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">boolt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nll</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&quot;2020-04-05T09:57:59.470Z&quot;</span> <span class="token comment">// 注意，Date对象在反序列化时，按字符串处理</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="tojson方法" tabindex="-1"><a class="header-anchor" href="#tojson方法" aria-hidden="true">#</a> toJSON方法</h5><p>如果一个被序列化的对象拥有 <code>toJSON</code> 方法，那么该 <code>toJSON</code> 方法就会覆盖该对象默认的序列化行为：不是该对象被序列化，而是调用 <code>toJSON</code> 方法后的返回值会被序列化，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot; hello javascript&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据交换格式" tabindex="-1"><a class="header-anchor" href="#数据交换格式" aria-hidden="true">#</a> 数据交换格式</h3><h5 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h5><ol><li><p>拓展标记语言（Extensible Markup Language, XML）,<code>标记电子文件使其具有结构性</code>的<strong>标记语言</strong>;</p></li><li><p>可<code>标记数据</code>、<code>定义数据类型</code>；</p></li><li><p>允许<code>用户对自己的标记语言进行定义</code>的源语言；</p></li><li><p>使用<code>DTD(document type definition)</code>文档类型定义来组织数据；</p></li><li><p>提供<strong>统一的方法</strong>来<strong>描述和交换</strong>独立于应用程序或供应商的结构化数据。</p></li></ol><h6 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h6><p><code>格式统一</code> 、<code>跨平台</code> 、<code>符合标准</code></p><h6 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h6><ol><li>XML文件大，文件格式复杂，传输占带宽；</li><li>服务端和客户端需大量代码解析XML，导致代码变得异常复杂且不易维护；</li><li>客户端不同浏览器解析方式不一致，需编写多套代码（兼容）；</li><li>服务端和客户端需花费较多的资源和时间解析XML。</li></ol><h6 id="示例-167个字符" tabindex="-1"><a class="header-anchor" href="#示例-167个字符" aria-hidden="true">#</a> 示例（167个字符）</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Object Thinking<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>David West<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>published</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>by</span><span class="token punctuation">&gt;</span></span>Microsoft Press<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>by</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2004<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>published</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="json-1" tabindex="-1"><a class="header-anchor" href="#json-1" aria-hidden="true">#</a> JSON</h5><h6 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h6><ol><li><p>数据格式比较简单，易于读写，格式都是压缩的，占用带宽小；</p></li><li><p>易于解析，客户端JavaScript可以简单的通过eval()进行JSON数据的读取；</p></li><li><p>支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析；</p></li><li><p>跨平台</p></li><li><p>因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。</p></li></ol><h6 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h6><p>​ ......</p><h6 id="示例-140个字符" tabindex="-1"><a class="header-anchor" href="#示例-140个字符" aria-hidden="true">#</a> 示例（140个字符）</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Object Thinking&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;David West&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;published&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;by&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Microsoft Press&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;year&quot;</span><span class="token operator">:</span> <span class="token number">2004</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml和json的优缺点对比" tabindex="-1"><a class="header-anchor" href="#xml和json的优缺点对比" aria-hidden="true">#</a> XML和JSON的优缺点对比</h3><ol><li><p>可读性</p><p>xml相对好一些。</p></li><li><p>可拓展性</p><p>xml天生好些，但并不是JSON就做不到</p></li><li><p>编码难度</p><p>XML有丰Dom4j、JDom等，JSON有json.org提供的工具；</p><p>但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易。</p></li><li><p>解码难度</p><p>XML的解析得考虑子节点父节点；JSON的解析难度几乎为0。</p></li><li><p>解析手段</p><p>JSON和XML同样拥有丰富的解析手段； 差不多。</p></li><li><p>数据体积</p><p>同样的数据需求，JSON小于XML</p></li><li><p>数据交互</p><p>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互</p></li><li><p>数据描述</p><p>JSON对数据的描述性比XML较差</p></li><li><p>传输速率</p><p>JSON远远快于XML</p></li><li><p>流行度</p></li></ol><p>似乎以前xml更受欢迎，现在可能是JSON；但针对其特点和用途，各有所好</p><h3 id="xml与json数据格式比较" tabindex="-1"><a class="header-anchor" href="#xml与json数据格式比较" aria-hidden="true">#</a> XML与JSON数据格式比较</h3><h5 id="关于轻量级和重量级-解析上" tabindex="-1"><a class="header-anchor" href="#关于轻量级和重量级-解析上" aria-hidden="true">#</a> 关于轻量级和重量级（解析上）</h5><blockquote><p>JSON只提供<code>整体解析</code>方案，只在解析<code>较少的数据</code>时才能起到良好的效果；</p><p>XML提供对大规模数据的<code>逐步解析</code>方案，很适合于对<code>大量数据</code>的处理。</p></blockquote><ul><li>XML的两种解析方式（DOM和 SAX）</li></ul><p>​ DOM是把一个数据交换格式XML看成一个DOM对象，需要把XML文件整个读入内存，这一点上JSON和XML的原理是一样的，但是<code>XML要考虑父节点和子节点</code>，这一点上JSON的解析难度要小很多。</p><p>​ SAX不需要整个读入文档就可以对解析出的内容进行处理，是一种<code>逐步解析</code>的方法。程序也可以<code>随时终止</code>解析。这样，一个大的文档就可以逐步的、一点一点的展现出来，所以SAX适合于大规模的解析。这一点，JSON目前是做不到得。</p><h5 id="关于数据格式编码及解码难度" tabindex="-1"><a class="header-anchor" href="#关于数据格式编码及解码难度" aria-hidden="true">#</a> 关于数据格式编码及解码难度</h5><ul><li><p>在编码方面</p><p>虽然XML和JSON都有各自的编码工具，但是JSON的编码要比XML简单，即使不借助工具，也可以写出JSON代码，但要写出好的XML代码就有点困难；与XML一样，JSON也是基于文本的，且它们都使用Unicode编码，且其与数据交换格式XML一样具有可读性。</p><p>主观来看，JSON更为清晰且冗余更少些。JSON网站提供了对JSON语法的严格描述，只是描述较简短。</p><p>总体来看，XML比较<strong>适合于标记文档</strong>，而JSON却更<strong>适于进行数据交换处理</strong>。</p></li><li><p>在解析方面</p><p>在普通的web应用领域，开发者经常为XML的解析伤脑筋，无论是服务器端生成或处理XML，还是客户端用 JavaScript 解析XML，都常常导致复杂的代码，极低的开发效率。</p><p>实际上，对于大多数Web应用来说，他们根本不需要复杂的XML来传输数据，XML宣称的扩展性在此就很少具有优势,许多Ajax应用甚至直接返回HTML片段来构建动态Web页面，和返回XML并解析它相比，返回HTML片段大大降低了系统的复杂性，但同时缺少了一定的灵活性。</p><p>同XML或 HTML片段相比，数据交换格式JSON 提供了更好的简单性和灵活性。在Web Serivice应用中，至少就目前来说XML仍有不可动摇的地位。</p></li><li><p>在实例方面</p><p>参见上述两个示例，你会发现同样的信息，编码出来大小不同。在可读性上xml更适合人类语言，而JSON却更像数据块。从编码手写难度来说，xml相对好一些。压缩后，xml却多了很多标记字符。</p></li></ul><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,43),f=n("li",null,"【JavaScript权威指南 p141】",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,[n("a",{href:""},"XML")],-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"},O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse",target:"_blank",rel:"noopener noreferrer"},j=n("h3",{id:"拓展阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#拓展阅读","aria-hidden":"true"},"#"),s(" 拓展阅读")],-1),_={href:"http://timelessrepo.com/json-isnt-a-javascript-subset",target:"_blank",rel:"noopener noreferrer"},x=t("<li><p>JSON和JSONP的区别</p><blockquote><p><strong>JSON</strong>和<strong>JSONP</strong>虽然只有一个字母的差别，但其实他们根本不是一回事儿</p><p><strong>JSON是一种数据交换格式</strong> ；</p><p><strong>JSONP</strong>是一种依靠开发人员的聪明才智创造出的一种<strong>非官方跨域数据交互协议</strong>。</p><p>拿谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？<strong>一个是描述信息的格式，一个是信息传递双方约定的方法。</strong></p></blockquote></li>",1);function M(L,w){const a=e("ExternalLinkIcon");return l(),r("div",null,[i,n("p",null,[s("JavaScript对象表示法（JavaScript Object Notation），只有 "),u,s(" 和 "),k,s(" 两个方法，不能被调用或作为构造函数调用。可用于前后端的"),n("a",d,[s("数据交换"),p(a)]),s("，XML也是一种数据交换格式。")]),n("p",null,[s("JSON是JavaScript的子集，但是却不能表示JavaScript中所有的值。"),n("a",v,[s("link"),p(a)])]),n("ul",null,[b,n("li",null,[m,n("p",null,[g,s("序列化后结果是ISO格式的日期字符串，"),n("a",y,[s("Date.toJSON() "),p(a)]),s(" ；")])]),h]),q,n("ul",null,[f,n("li",null,[n("a",S,[s("JSON"),p(a)])]),J,n("li",null,[n("a",N,[s("JSON.stringify"),p(a)])]),n("li",null,[n("a",O,[s("JSON.parse"),p(a)])])]),j,n("ul",null,[n("li",null,[n("p",null,[n("a",_,[s("JSON: The JavaScript subset that isn't （json不完全是JavaScript的子集）"),p(a)])])]),x])])}const D=o(c,[["render",M],["__file","JSON.html.vue"]]);export{D as default};
