import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as r,a as n,d as s,w as o,b as a,e as c}from"./app-07d6e59a.js";const u={},d=c(`<h2 id="分时函数" tabindex="-1"><a class="header-anchor" href="#分时函数" aria-hidden="true">#</a> 分时函数</h2><h3 id="为什么会有分时函数啦" tabindex="-1"><a class="header-anchor" href="#为什么会有分时函数啦" aria-hidden="true">#</a> 为什么会有分时函数啦？</h3><p>​ 防抖和节流是对重复或频繁触发的任务控制，移除部分操作，只执行最后一次或每隔一段时间执行一次。</p><p>​ 分时函数同样是<strong>多任务，但是不让其一次执行完，而是每一段时间执行一部分</strong>。比如添加 dom 节点，一次需要条件 100 个，可分为 10 次，一次 10 个。</p><p>​ 分时函数主要是<strong>解决页面一次渲染数据（或节点）太多，导致页面卡顿或假死现象</strong>。</p><h3 id="分时函数案例" tabindex="-1"><a class="header-anchor" href="#分时函数案例" aria-hidden="true">#</a> 分时函数案例</h3><p>首先我们来看一个案例，通过循环添加了 1000 个 div。其中处理数据少，当每一个元素都需要请求计算数据是，消耗无比的大。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;time-chunk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> index<span class="token punctuation">;</span>
    parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路" aria-hidden="true">#</a> 解决思路</h3><p>我们解决这种问题的思路是</p><ol><li>知道任务总数，每次执行数量，执行间隔，以及单元任务的处理函数</li><li>将所有任务传入，执行一个任务后便将其移除——<strong>队列数组（先进先出）</strong></li><li>维护一个 setInterval，循环执行</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>array<span class="token punctuation">}</span></span>       <span class="token parameter">dataArray</span>  ，任务数组
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span>    <span class="token parameter">fn</span>   ， 每一次任务的业务逻辑执行函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>      <span class="token parameter">count</span> ， 每一次任务执行数量
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>      <span class="token parameter">duraiton</span>  ，单位 ms ，间隔多少毫秒执行一次
 */</span>
<span class="token keyword">function</span> <span class="token function">timeChunk</span><span class="token punctuation">(</span><span class="token parameter">dataArray<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> duration <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer<span class="token punctuation">,</span>
    <span class="token comment">//防止重复</span>
    isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">eachChunk</span><span class="token punctuation">(</span><span class="token parameter">chunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> obj <span class="token operator">=</span> dataArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每次实际执行操作</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRuning<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    isRuning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 动态计算任务长度</span>
      <span class="token keyword">let</span> len <span class="token operator">=</span> dataArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果剩余任务长度不足count，则全部执行</span>
        <span class="token keyword">let</span> remainder <span class="token operator">=</span> len <span class="token operator">&gt;=</span> count <span class="token operator">?</span> count <span class="token operator">:</span> len<span class="token punctuation">;</span>
        <span class="token function">eachChunk</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="惰性加载-不重复判断" tabindex="-1"><a class="header-anchor" href="#惰性加载-不重复判断" aria-hidden="true">#</a> 惰性加载-不重复判断</h2><h3 id="惰性加载存在的意义" tabindex="-1"><a class="header-anchor" href="#惰性加载存在的意义" aria-hidden="true">#</a> 惰性加载存在的意义</h3><p>惰性加载，意义在于避免重复的嗅探判断操作，因为这些操作在每次代码执行时都是一样的，而我们可以在一次执行时就得到嗅探结果，从而提高代码效率。</p><h3 id="案例佐证" tabindex="-1"><a class="header-anchor" href="#案例佐证" aria-hidden="true">#</a> 案例佐证</h3><p>我们在做兼容性处理时，会有下面这样的判断，这样处理的话，每调用一次就会执行一次判断，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你需要做点什么，封装一个方法，用于为元素绑定事件，但是像上面的判断只需要执行一次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> addEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用立即执行函数，在初始化时便执行一次嗅探，然后返回浏览器支持的方法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果你没有一次事件绑定操作，那这一次立即执行岂不是浪费？</p><p>所以还要修改：(在绑定事件第一次执行时修改绑定方法)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 嗅探判断，并更新绑定函数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">addEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 执行一次绑定</span>
  <span class="token function">addEvent</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高阶函数-higher-order-function" tabindex="-1"><a class="header-anchor" href="#高阶函数-higher-order-function" aria-hidden="true">#</a> 高阶函数（higher-order-function）</h2><p>“所谓高阶函数就是<strong>操作函数的函数</strong>，它接收一个或多个函数作为参数，并返回一个函数。”——JavaScript 权威指南。注意两个概念：<code>操作函数</code> <code>参数或返回值</code></p><h3 id="作为参数" tabindex="-1"><a class="header-anchor" href="#作为参数" aria-hidden="true">#</a> 作为参数</h3><ul><li>回调函数（第一个能想到的） <ul><li>在 ajax 异步请求的过程中，回调函数使用的非常频繁</li><li>在不确定请求返回的时间时，将 callback 回调函数当成参数传入</li><li>待请求完成后执行 callback 函数</li></ul></li></ul><h3 id="作为返回值-类型判断——object-prototype-tostring-call-target" tabindex="-1"><a class="header-anchor" href="#作为返回值-类型判断——object-prototype-tostring-call-target" aria-hidden="true">#</a> 作为返回值 - 类型判断——<code>Object.prototype.toString.call(target)</code></h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 之前的写法
function checkType(target) {
  let typeStr = typeof (target),
      template = {
        &#39;[object Array]&#39;: &#39;array -&gt; Object&#39;,
        &#39;[object Object]&#39;: &#39;object -&gt; Object&#39;,
        &#39;[object Null]&#39;: &#39;null -&gt; Object&#39;
      };
  if (typeStr === &#39;function&#39;) return &#39;function&#39;
  if (typeStr !== &#39;object&#39;) return typeStr
  else return template[Object.prototype.toString.call(target)]
}
// ！注意
Object.prototype.toString.call(null) // [object Null]
// undefined null string number boolean Symbol BigInt Array function Object Date ......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 现在我要这样写
function checkType(type) {
  return function (target) {
    return Object.prototype.toString.call(target) === \`[object \${type}]\`
  }
}
const isString = checkType(&#39;String&#39;);
const isDate = checkType(&#39;Date&#39;);

console.log(isDate(new Date())); // true
console.log(isString(&#39;ddd&#39;)) //true

// 这样写更加强大，其原理也是使用Object.prototype.toString.call(target)
//偏函数——返回了一个包含预处理参数的新函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作为返回值-预置函数——当目标条件满足才执行回调函数" tabindex="-1"><a class="header-anchor" href="#作为返回值-预置函数——当目标条件满足才执行回调函数" aria-hidden="true">#</a> 作为返回值 - 预置函数——当目标条件满足才执行回调函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">preset</span><span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
      condition<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;doing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">preset</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作为返回值-装饰者模式" tabindex="-1"><a class="header-anchor" href="#作为返回值-装饰者模式" aria-hidden="true">#</a> 作为返回值 - 装饰者模式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hint<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">//...</span>
      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment">// 原有业务</span>
          <span class="token comment">// do something</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//装饰者模式</span>
    <span class="token keyword">function</span> <span class="token function">decorator</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//事件源 element</span>
      <span class="token keyword">let</span> eventOrigin <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>；
      <span class="token keyword">if</span><span class="token punctuation">(</span>eventOrigin<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 是否绑定事件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> eventOrigin<span class="token punctuation">.</span>onclick <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//保存原有事件</span>
          <span class="token keyword">const</span> oldClickFn <span class="token operator">=</span> eventOrigin<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>
          <span class="token comment">//添加新事件</span>
          eventOrigin<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行原事件</span>
            <span class="token function">oldClickFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">// 执行新增事件</span>
              <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//直接执行新增事件</span>
          eventOrigin<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> clickName <span class="token operator">=</span> <span class="token function">decorator</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//新增业务，不改变原有业务</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    clickName <span class="token operator">&amp;&amp;</span> <span class="token function">clickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作为返回值-单列模式" tabindex="-1"><a class="header-anchor" href="#作为返回值-单列模式" aria-hidden="true">#</a> 作为返回值 - 单列模式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ! 单列模式——私有变量</span>
<span class="token keyword">const</span> singleModel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> privateVariable <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">MAX_NUM</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token constant">MIN_NUM</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token constant">COUNT</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> privateVariable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> privateVariable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">singleModel</span><span class="token punctuation">(</span><span class="token string">&quot;MAX_NUM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其它应用" tabindex="-1"><a class="header-anchor" href="#其它应用" aria-hidden="true">#</a> 其它应用</h3>`,37),k=n("li",null,[n("a",{href:"#%E5%88%86%E6%97%B6%E5%87%BD%E6%95%B0"},"分时函数")],-1),h=n("li",null,[n("a",{href:"#%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BD-%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%88%A4%E6%96%AD"},"惰性加载")],-1),v=n("h2",{id:"更多内容",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更多内容","aria-hidden":"true"},"#"),a(" 更多内容")],-1),m={id:"函数调用之-call、apply-和-bind",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#函数调用之-call、apply-和-bind","aria-hidden":"true"},"#",-1),_={id:"模块",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#模块","aria-hidden":"true"},"#",-1),g={id:"javascript-事件循环机制",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#javascript-事件循环机制","aria-hidden":"true"},"#",-1),E={id:"parseint-和-parsefloat",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#parseint-和-parsefloat","aria-hidden":"true"},"#",-1),x={id:"new-关键字",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#new-关键字","aria-hidden":"true"},"#",-1),j={id:"this-原理",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#this-原理","aria-hidden":"true"},"#",-1),S={id:"为什么-object-prototype-tostring-call-可以准确判断对象类型",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#为什么-object-prototype-tostring-call-可以准确判断对象类型","aria-hidden":"true"},"#",-1),D={id:"内存泄漏",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#内存泄漏","aria-hidden":"true"},"#",-1),F={id:"原型链",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#原型链","aria-hidden":"true"},"#",-1),M={id:"预编译",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#预编译","aria-hidden":"true"},"#",-1),I={id:"面向对象编程",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#面向对象编程","aria-hidden":"true"},"#",-1),L={id:"防抖和节流",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#防抖和节流","aria-hidden":"true"},"#",-1),V={id:"连续赋值",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#连续赋值","aria-hidden":"true"},"#",-1),U={id:"空对象判断",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#空对象判断","aria-hidden":"true"},"#",-1),G={id:"深拷贝和浅拷贝",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#深拷贝和浅拷贝","aria-hidden":"true"},"#",-1),X={id:"柯里化",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#柯里化","aria-hidden":"true"},"#",-1),$={id:"异步编程",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#异步编程","aria-hidden":"true"},"#",-1),K={id:"执行机制",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#执行机制","aria-hidden":"true"},"#",-1),Y={id:"数组去重",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#数组去重","aria-hidden":"true"},"#",-1),nn={id:"正则表达式",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#",-1),sn=n("h2",{id:"es6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#es6","aria-hidden":"true"},"#"),a(" ES6+")],-1),en={href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"},tn={id:"let-和-const-命令",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#let-和-const-命令","aria-hidden":"true"},"#",-1),pn={href:"https://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},cn={id:"变量的解构赋值",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#变量的解构赋值","aria-hidden":"true"},"#",-1),rn={href:"https://es6.ruanyifeng.com/#docs/destructuring",target:"_blank",rel:"noopener noreferrer"},un={id:"字符串的扩展",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#字符串的扩展","aria-hidden":"true"},"#",-1),kn={href:"https://es6.ruanyifeng.com/#docs/string",target:"_blank",rel:"noopener noreferrer"},hn={id:"字符串的新增方法",tabindex:"-1"},vn=n("a",{class:"header-anchor",href:"#字符串的新增方法","aria-hidden":"true"},"#",-1),mn={href:"https://es6.ruanyifeng.com/#docs/string-methods",target:"_blank",rel:"noopener noreferrer"},bn={id:"正则的扩展",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#正则的扩展","aria-hidden":"true"},"#",-1),fn={href:"https://es6.ruanyifeng.com/#docs/regex",target:"_blank",rel:"noopener noreferrer"},gn={id:"数值的扩展",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#数值的扩展","aria-hidden":"true"},"#",-1),En={href:"https://es6.ruanyifeng.com/#docs/number",target:"_blank",rel:"noopener noreferrer"},wn={id:"函数的扩展",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#函数的扩展","aria-hidden":"true"},"#",-1),Bn={href:"https://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},jn={id:"数组的扩展",tabindex:"-1"},An=n("a",{class:"header-anchor",href:"#数组的扩展","aria-hidden":"true"},"#",-1),Sn={href:"https://es6.ruanyifeng.com/#docs/array",target:"_blank",rel:"noopener noreferrer"},Cn={id:"对象的扩展",tabindex:"-1"},Dn=n("a",{class:"header-anchor",href:"#对象的扩展","aria-hidden":"true"},"#",-1),qn={href:"https://es6.ruanyifeng.com/#docs/object",target:"_blank",rel:"noopener noreferrer"},Fn={id:"对象的新增方法",tabindex:"-1"},On=n("a",{class:"header-anchor",href:"#对象的新增方法","aria-hidden":"true"},"#",-1),Mn={href:"https://es6.ruanyifeng.com/#docs/object-methods",target:"_blank",rel:"noopener noreferrer"},Nn={id:"symbol",tabindex:"-1"},In=n("a",{class:"header-anchor",href:"#symbol","aria-hidden":"true"},"#",-1),Jn={href:"https://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"},Ln={id:"set-和-map-数据结构",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#set-和-map-数据结构","aria-hidden":"true"},"#",-1),Vn={href:"https://es6.ruanyifeng.com/#docs/set-map",target:"_blank",rel:"noopener noreferrer"},Rn={id:"proxy",tabindex:"-1"},Un=n("a",{class:"header-anchor",href:"#proxy","aria-hidden":"true"},"#",-1),Pn={href:"https://es6.ruanyifeng.com/#docs/proxy",target:"_blank",rel:"noopener noreferrer"},Gn={id:"reflect",tabindex:"-1"},Wn=n("a",{class:"header-anchor",href:"#reflect","aria-hidden":"true"},"#",-1),Xn={href:"https://es6.ruanyifeng.com/#docs/reflect",target:"_blank",rel:"noopener noreferrer"},Hn={id:"promise-对象",tabindex:"-1"},$n=n("a",{class:"header-anchor",href:"#promise-对象","aria-hidden":"true"},"#",-1),zn={href:"https://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"},Kn={id:"iterator-和-for-of-循环",tabindex:"-1"},Qn=n("a",{class:"header-anchor",href:"#iterator-和-for-of-循环","aria-hidden":"true"},"#",-1),Yn={href:"https://es6.ruanyifeng.com/#docs/iterator",target:"_blank",rel:"noopener noreferrer"},Zn={id:"generator-函数的语法",tabindex:"-1"},na=n("a",{class:"header-anchor",href:"#generator-函数的语法","aria-hidden":"true"},"#",-1),aa={href:"https://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"},sa={id:"generator-函数的异步应用",tabindex:"-1"},ea=n("a",{class:"header-anchor",href:"#generator-函数的异步应用","aria-hidden":"true"},"#",-1),ta={href:"https://es6.ruanyifeng.com/#docs/generator-async",target:"_blank",rel:"noopener noreferrer"},oa={id:"async-函数",tabindex:"-1"},pa=n("a",{class:"header-anchor",href:"#async-函数","aria-hidden":"true"},"#",-1),ca={href:"https://es6.ruanyifeng.com/#docs/async",target:"_blank",rel:"noopener noreferrer"},ia={id:"class-的基本语法",tabindex:"-1"},la=n("a",{class:"header-anchor",href:"#class-的基本语法","aria-hidden":"true"},"#",-1),ra={href:"https://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},ua={id:"class-的继承",tabindex:"-1"},da=n("a",{class:"header-anchor",href:"#class-的继承","aria-hidden":"true"},"#",-1),ka={href:"https://es6.ruanyifeng.com/#docs/class-extends",target:"_blank",rel:"noopener noreferrer"},ha={id:"module-的语法",tabindex:"-1"},va=n("a",{class:"header-anchor",href:"#module-的语法","aria-hidden":"true"},"#",-1),ma={href:"https://es6.ruanyifeng.com/#docs/module",target:"_blank",rel:"noopener noreferrer"},ba={id:"module-的加载实现",tabindex:"-1"},_a=n("a",{class:"header-anchor",href:"#module-的加载实现","aria-hidden":"true"},"#",-1),fa={href:"https://es6.ruanyifeng.com/#docs/module-loader",target:"_blank",rel:"noopener noreferrer"},ga={id:"编程风格",tabindex:"-1"},ya=n("a",{class:"header-anchor",href:"#编程风格","aria-hidden":"true"},"#",-1),Ea={href:"https://es6.ruanyifeng.com/#docs/style",target:"_blank",rel:"noopener noreferrer"},wa={id:"读懂规格",tabindex:"-1"},xa=n("a",{class:"header-anchor",href:"#读懂规格","aria-hidden":"true"},"#",-1),Ba={href:"https://es6.ruanyifeng.com/#docs/spec",target:"_blank",rel:"noopener noreferrer"},ja={id:"异步遍历器",tabindex:"-1"},Aa=n("a",{class:"header-anchor",href:"#异步遍历器","aria-hidden":"true"},"#",-1),Sa={href:"https://es6.ruanyifeng.com/#docs/async-iterator",target:"_blank",rel:"noopener noreferrer"},Ca={id:"arraybuffer",tabindex:"-1"},Da=n("a",{class:"header-anchor",href:"#arraybuffer","aria-hidden":"true"},"#",-1),qa={href:"https://es6.ruanyifeng.com/#docs/arraybuffer",target:"_blank",rel:"noopener noreferrer"},Fa={id:"最新提案",tabindex:"-1"},Oa=n("a",{class:"header-anchor",href:"#最新提案","aria-hidden":"true"},"#",-1),Ma={href:"https://es6.ruanyifeng.com/#docs/proposals",target:"_blank",rel:"noopener noreferrer"},Na={id:"decorator",tabindex:"-1"},Ia=n("a",{class:"header-anchor",href:"#decorator","aria-hidden":"true"},"#",-1),Ja={href:"https://es6.ruanyifeng.com/#docs/decorator",target:"_blank",rel:"noopener noreferrer"},La=c('<h2 id="试题" tabindex="-1"><a class="header-anchor" href="#试题" aria-hidden="true">#</a> 试题</h2><h3 id="_1-2-3-map-parseint-结果是什么-为什么" tabindex="-1"><a class="header-anchor" href="#_1-2-3-map-parseint-结果是什么-为什么" aria-hidden="true">#</a> [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) 结果是什么？为什么？</h3><h3 id="如何提升-javascript-变量的存储性能" tabindex="-1"><a class="header-anchor" href="#如何提升-javascript-变量的存储性能" aria-hidden="true">#</a> 如何提升 JavaScript 变量的存储性能？</h3><blockquote><p>访问<strong>字面量和局部变量</strong>的速度最快，访问<strong>数组元素和对象成员</strong>相对较慢;<br> 由于局部变量存在于作用域链的起始位置，因此<strong>访问局部变量比访问跨作用域变量更快</strong>，全局变量的访问速度最慢;<br><strong>嵌套的对象成员</strong>会明显影响性能，尽量少用，例如<code>window.loacation.href</code>;<br> 属性和方法<strong>在原型链中的位置越深</strong>，则访问它的速度也越慢;<br> 通常来说，<strong>需要访问多次</strong>的对象成员、数组元素、跨作用域变量<strong>可以保存在局部变量中</strong>从而提升 JavaScript 执行效率;</p></blockquote><h3 id="介绍下-set、map、weakset-和-weakmap-的区别" tabindex="-1"><a class="header-anchor" href="#介绍下-set、map、weakset-和-weakmap-的区别" aria-hidden="true">#</a> 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h3><h3 id="es5-es6-的继承除了写法以外还有什么区别" tabindex="-1"><a class="header-anchor" href="#es5-es6-的继承除了写法以外还有什么区别" aria-hidden="true">#</a> ES5/ES6 的继承除了写法以外还有什么区别？</h3><h3 id="settimeout、promise、async-await-的区别" tabindex="-1"><a class="header-anchor" href="#settimeout、promise、async-await-的区别" aria-hidden="true">#</a> setTimeout、Promise、Async/Await 的区别</h3><h3 id="async-await-如何通过同步的方式实现异步" tabindex="-1"><a class="header-anchor" href="#async-await-如何通过同步的方式实现异步" aria-hidden="true">#</a> Async/Await 如何通过同步的方式实现异步</h3>',8);function Ta(Va,Ra){const t=p("RouterLink"),e=p("ExternalLinkIcon");return l(),r("div",null,[d,n("ol",null,[n("li",null,[s(t,{to:"/javascript/%E6%9F%AF%E9%87%8C%E5%8C%96.html"},{default:o(()=>[a("函数柯里化")]),_:1})]),n("li",null,[s(t,{to:"/javascript/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96.html"},{default:o(()=>[a("防抖/节流")]),_:1})]),k,h]),v,n("h3",m,[b,a(),s(t,{to:"/javascript/call&apply&bind.html"},{default:o(()=>[a("函数调用之 call、apply 和 bind")]),_:1})]),n("h3",_,[f,a(),s(t,{to:"/javascript/export&import.html"},{default:o(()=>[a("模块")]),_:1})]),n("h3",g,[y,a(),s(t,{to:"/javascript/Js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html"},{default:o(()=>[a("JavaScript 事件循环机制")]),_:1})]),n("h3",E,[w,a(),s(t,{to:"/javascript/parseInt&parseFloat.html"},{default:o(()=>[a("parseInt 和 parseFloat")]),_:1})]),n("h3",x,[B,a(),s(t,{to:"/javascript/new%E5%85%B3%E9%94%AE%E5%AD%97.html"},{default:o(()=>[a("new 关键字")]),_:1})]),n("h3",j,[A,a(),s(t,{to:"/javascript/this%E5%8E%9F%E7%90%86.html"},{default:o(()=>[a("this 原理")]),_:1})]),n("h3",S,[C,a(),s(t,{to:"/javascript/%E4%B8%BA%E4%BB%80%E4%B9%88Object.prototype.toString.call%E5%8F%AF%E4%BB%A5%E5%87%86%E7%A1%AE%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.html"},{default:o(()=>[a("为什么 Object.prototype.toString.call 可以准确判断对象类型")]),_:1})]),n("h3",D,[q,a(),s(t,{to:"/javascript/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html"},{default:o(()=>[a("内存泄漏")]),_:1})]),n("h3",F,[O,a(),s(t,{to:"/javascript/%E5%8E%9F%E5%9E%8B%E9%93%BE.html"},{default:o(()=>[a("原型链")]),_:1})]),n("h3",M,[N,a(),s(t,{to:"/javascript/%E9%A2%84%E7%BC%96%E8%AF%91.html"},{default:o(()=>[a("预编译")]),_:1})]),n("h3",I,[J,a(),s(t,{to:"/javascript/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html"},{default:o(()=>[a("面向对象编程")]),_:1})]),n("h3",L,[T,a(),s(t,{to:"/javascript/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html"},{default:o(()=>[a("防抖和节流")]),_:1})]),n("h3",V,[R,a(),s(t,{to:"/javascript/%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC.html"},{default:o(()=>[a("连续赋值")]),_:1})]),n("h3",U,[P,a(),s(t,{to:"/javascript/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD.html"},{default:o(()=>[a("空对象判断")]),_:1})]),n("h3",G,[W,a(),s(t,{to:"/javascript/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html"},{default:o(()=>[a("深拷贝和浅拷贝")]),_:1})]),n("h3",X,[H,a(),s(t,{to:"/javascript/%E6%9F%AF%E9%87%8C%E5%8C%96.html"},{default:o(()=>[a("柯里化")]),_:1})]),n("h3",$,[z,a(),s(t,{to:"/javascript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html"},{default:o(()=>[a("异步编程")]),_:1})]),n("h3",K,[Q,a(),s(t,{to:"/javascript/%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html"},{default:o(()=>[a("执行机制")]),_:1})]),n("h3",Y,[Z,a(),s(t,{to:"/javascript/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D.html"},{default:o(()=>[a("数组去重")]),_:1})]),n("h3",nn,[an,a(),s(t,{to:"/javascript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"},{default:o(()=>[a("正则表达式")]),_:1})]),sn,n("p",null,[a("说明：学习 ES6 的语法，主要是参考"),n("a",en,[a("阮一峰"),s(e)]),a("老师的文章。")]),n("h3",tn,[on,a(),n("a",pn,[a("let 和 const 命令"),s(e)])]),n("h3",cn,[ln,a(),n("a",rn,[a("变量的解构赋值"),s(e)])]),n("h3",un,[dn,a(),n("a",kn,[a("字符串的扩展"),s(e)])]),n("h3",hn,[vn,a(),n("a",mn,[a("字符串的新增方法"),s(e)])]),n("h3",bn,[_n,a(),n("a",fn,[a("正则的扩展"),s(e)])]),n("h3",gn,[yn,a(),n("a",En,[a("数值的扩展"),s(e)])]),n("h3",wn,[xn,a(),n("a",Bn,[a("函数的扩展"),s(e)])]),n("h3",jn,[An,a(),n("a",Sn,[a("数组的扩展"),s(e)])]),n("h3",Cn,[Dn,a(),n("a",qn,[a("对象的扩展"),s(e)])]),n("h3",Fn,[On,a(),n("a",Mn,[a("对象的新增方法"),s(e)])]),n("h3",Nn,[In,a(),n("a",Jn,[a("Symbol"),s(e)])]),n("h3",Ln,[Tn,a(),n("a",Vn,[a("Set 和 Map 数据结构"),s(e)])]),n("h3",Rn,[Un,a(),n("a",Pn,[a("Proxy"),s(e)])]),n("h3",Gn,[Wn,a(),n("a",Xn,[a("Reflect"),s(e)])]),n("h3",Hn,[$n,a(),n("a",zn,[a("Promise 对象"),s(e)])]),n("h3",Kn,[Qn,a(),n("a",Yn,[a("Iterator 和 for...of 循环"),s(e)])]),n("h3",Zn,[na,a(),n("a",aa,[a("Generator 函数的语法"),s(e)])]),n("h3",sa,[ea,a(),n("a",ta,[a("Generator 函数的异步应用"),s(e)])]),n("h3",oa,[pa,a(),n("a",ca,[a("async 函数"),s(e)])]),n("h3",ia,[la,a(),n("a",ra,[a("Class 的基本语法"),s(e)])]),n("h3",ua,[da,a(),n("a",ka,[a("Class 的继承"),s(e)])]),n("h3",ha,[va,a(),n("a",ma,[a("Module 的语法"),s(e)])]),n("h3",ba,[_a,a(),n("a",fa,[a("Module 的加载实现"),s(e)])]),n("h3",ga,[ya,a(),n("a",Ea,[a("编程风格"),s(e)])]),n("h3",wa,[xa,a(),n("a",Ba,[a("读懂规格"),s(e)])]),n("h3",ja,[Aa,a(),n("a",Sa,[a("异步遍历器"),s(e)])]),n("h3",Ca,[Da,a(),n("a",qa,[a("ArrayBuffer"),s(e)])]),n("h3",Fa,[Oa,a(),n("a",Ma,[a("最新提案"),s(e)])]),n("h3",Na,[Ia,a(),n("a",Ja,[a("Decorator"),s(e)])]),La])}const Ga=i(u,[["render",Ta],["__file","index.html.vue"]]);export{Ga as default};
