import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as s,c,a as e,b as l,d as i,e as n}from"./app-c5a91522.js";const r={},d=n('<h3 id="在-html-中如何做-seo-优化" tabindex="-1"><a class="header-anchor" href="#在-html-中如何做-seo-优化" aria-hidden="true">#</a> 在 HTML 中如何做 SEO 优化？</h3><ol><li><code>h</code>标签的使用，h1 标签只能出现一次，它是当前页面的主标题，对爬虫的吸引力是最强的</li><li><code>strong</code>标签的使用，strong 标签对关键词的强调作用仅次于 h 标签，用于加粗段落标题或是重点关键词</li><li>head 标签内容【SEO 的重点】 <ul><li>&lt;title&gt;网站 SEO 标题&lt;/title&gt;</li><li>&lt;meta name=&quot;descriptiion&quot; content=&quot;网站描述&quot;/&gt;</li><li>&lt;meta name=&quot;keywords&quot; content=&quot;网站关键词/&quot;&gt;</li></ul></li><li>&lt;a href=&quot;链接地址&quot; title=&quot;链接说明&quot;&gt;链接关键词&lt;/a&gt;，站内丰富的超链接会方便爬虫，体现网站的深度和广度</li><li>&lt;img src=&quot;图片链接地址&quot; alt=&quot;图片说明&quot;/&gt;，这是针对网页中图片的，当然也可以写成&lt;img src=&quot;图片链接地址&quot;title=&quot;图片说明&quot;/&gt;</li><li>&lt;div id=&quot;copyright&quot;&gt;<strong>版权部分</strong>加上网站名称和链接&lt;/div&gt;</li><li>HTML 优化要富于逻辑，重点明确，层次分明，这也是符合 SEO 精神的</li></ol><h3 id="html-页面性能优化" tabindex="-1"><a class="header-anchor" href="#html-页面性能优化" aria-hidden="true">#</a> HTML 页面性能优化</h3>',3),p=n("<li><p>html</p><ul><li>语义化标签</li><li>加载顺序: <ul><li>css 放 head 里面(用户看到顺畅页面)；</li><li>js 放尾部（会阻塞 dom 渲染，且 dom 树没搭建好时，js 里面的 dom 操作会有问题）</li></ul></li><li>减少页面请求：合并 img，合并 css，避免使用@import 方式引入 css 文件</li><li>减少文件大小： <ul><li>使用图片精灵；</li><li>减少 img 文件大小，选用合适的格式并且用工具进行压缩；</li><li>删除不必要的标签。</li></ul></li></ul></li>",1),u=e("p",null,"css",-1),h=n(`<li><p>选择器：越简单越短越好,同样的样式进行选择器合并</p></li><li><p>css 值缩写：margin 等，值为 0 的省略单位,</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">font</span><span class="token punctuation">:</span> normal small-caps bold 14px/1.5em <span class="token string">&quot;宋体&quot;</span><span class="token punctuation">,</span> arial<span class="token punctuation">,</span> verdana<span class="token punctuation">;</span>
<span class="token comment">/*等价于：*/</span>
<span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token property">font-variant</span><span class="token punctuation">:</span> small-caps<span class="token punctuation">;</span>
<span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>
<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;宋体&quot;</span><span class="token punctuation">,</span> arial<span class="token punctuation">,</span> verdana<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>减少文件大小（压缩）:YUI Compressor,cssmin</p></li><li><p>少用耗性能的属性:expresion,border-radius,filter,box-shadow,gradients 等</p></li><li><p>图片设置宽高，不要缩放，减少浏览器的回流和重绘。</p></li><li><p>所有表现用 css 实现</p></li>`,6),g={href:"https://blog.csdn.net/xiangzhihong8/article/details/53195926",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,[e("p",null,"命名规范、语义化")],-1),m=e("li",null,[e("p",null,"尽量减少 hack")],-1),_=e("blockquote",null,[e("p",null,"由于不同厂商的流览器或某浏览器的不同版本（如 IE6-IE11,Firefox/Safari/Opera/Chrome 等），对 CSS 的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的 CSS 样式，我们把这个针对不同的浏览器/不同版本写相应的 CSS code 的过程，叫做 CSS hack!")],-1),k=e("p",null,"javascript",-1),f=e("li",null,"页面懒加载(图片等资源)",-1),v=e("li",null,"图片的预加载",-1),x=e("li",null,"通过事件委托等减少 dom 操作",-1),S={href:"https://www.cnblogs.com/winyh/p/11133486.html",target:"_blank",rel:"noopener noreferrer"},C=e("li",null,"动态列表（用最少的 DOM 元素实现）",-1),q=e("li",null,"...",-1),w=n('<h3 id="初始化一个-div-标签-默认宽度-width-是多少" tabindex="-1"><a class="header-anchor" href="#初始化一个-div-标签-默认宽度-width-是多少" aria-hidden="true">#</a> 初始化一个 div 标签，默认宽度（width） 是多少？</h3><ul><li>默认情况下： <code>继承父级元素的宽度</code>，高度默认为 0（不设置的情况由子元素撑开）</li><li>设置了<code>浮动</code>：如果父级设置了浮动，子元素也设置了浮动，那么宽度（width）为 0</li></ul><h3 id="首屏-白屏时间如何计算" tabindex="-1"><a class="header-anchor" href="#首屏-白屏时间如何计算" aria-hidden="true">#</a> 首屏，白屏时间如何计算？</h3><p><strong>准备</strong></p><ol><li>加载是并行的，执行是串行的；</li><li>执行需要等待加载完；</li><li>浏览器的执行是串行的</li></ol>',5),y={href:"https://www.cnblogs.com/littlelittlecat/p/6810294.html",target:"_blank",rel:"noopener noreferrer"},B=n('<h3 id="bfc-块级格式化上下文" tabindex="-1"><a class="header-anchor" href="#bfc-块级格式化上下文" aria-hidden="true">#</a> BFC（块级格式化上下文）</h3><ul><li><p><strong>思路</strong></p><ul><li>BFC 是什么</li><li>触发条件</li><li>可以做些什么</li></ul></li><li><p><strong>什么是 BFC</strong></p><p>块级格式化上下文 (Block Formatting Context) 。</p><p>针对可视化布局提供一个环境，在此环境，决定<strong>元素如何对其内容进行定位和布局</strong>以及<strong>与其他元素之间的关系</strong>，环境与环境之间彼此独立（互不影响）。</p><blockquote><p>注意：只要元素可以触发 BFC，就无需清楚浮动（正确）</p></blockquote></li><li><p>触发</p><ul><li>根元素 或 其它包含它的元素</li><li>浮动元素 (元素的 <code>float</code> 不是 <code>none</code>)</li><li>绝对定位元素 (元素具有 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>)</li><li>内联块 (元素具有 <code>display: inline-block</code>)</li><li>表格单元格 (元素具有 <code>display: table-cell</code>，HTML 表格单元格默认属性)</li><li>表格标题 (元素具有 <code>display: table-caption</code>, HTML 表格标题默认属性)</li><li>具有<code>overflow</code> 且值不是 <code>visible</code> 的块元素</li><li>弹性盒（<code>flex</code>或<code>inline-flex</code>）</li><li><code>display: flow-root</code></li><li><code>column-span: all</code></li></ul></li><li><p>约束规则</p><ul><li>内部的盒会在垂直方向一个接一个排列（可以看作 BFC 中有一个的常规流）</li><li>处于同一个 BFC 中的元素相互影响，可能会发生外边距重叠</li><li>每个元素的 margin box 的左边，与容器块 border box 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li><li>计算 BFC 的高度时，考虑 BFC 所包含的所有元素，连浮动元素也参与计算</li><li>浮动盒区域不叠加到 BFC 上</li></ul></li><li><p>解决问题</p><ul><li>垂直外边距重叠问题（margin 塌陷）</li><li>去除浮动</li><li>自适用两列布局（<code>float</code> + <code>overflow</code>）</li></ul></li></ul><h3 id="css-选择器以及这些选择器的优先级" tabindex="-1"><a class="header-anchor" href="#css-选择器以及这些选择器的优先级" aria-hidden="true">#</a> CSS 选择器以及这些选择器的优先级</h3><ul><li><code>!important</code></li><li>内联样式（1000）</li><li>ID 选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/关系选择器/伪元素选择器（0001）</li><li>通配符选择器（0000）</li></ul><h3 id="简述-display-flex-flex-布局" tabindex="-1"><a class="header-anchor" href="#简述-display-flex-flex-布局" aria-hidden="true">#</a> 简述 display: flex ( Flex 布局 )</h3><ul><li><strong>思路</strong></li></ul><blockquote><ol><li>Flex 的基本概念，结构组成</li><li>列举一些属性（常用的）</li><li>使用 Flex 布局案例（常用的）</li></ol></blockquote>',7),F=e("strong",null,"参考",-1),E={href:"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html",target:"_blank",rel:"noopener noreferrer"},M={href:"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html",target:"_blank",rel:"noopener noreferrer"},L=n('<h3 id="table-布局-div-布局-二者的区别" tabindex="-1"><a class="header-anchor" href="#table-布局-div-布局-二者的区别" aria-hidden="true">#</a> table 布局？div 布局? 二者的区别？</h3><h3 id="浮动元素高度塌陷问题" tabindex="-1"><a class="header-anchor" href="#浮动元素高度塌陷问题" aria-hidden="true">#</a> 浮动元素高度塌陷问题？</h3><ul><li><strong>思路</strong></li></ul><blockquote><ol><li>解决高度塌陷问题的两种类型：<code>clear</code> 和 <code>BFC</code></li><li>具体方案 <ul><li>追加元素并设置 clear 属性</li><li>css 样式插入<strong>伪元素</strong></li><li><strong>BFC</strong> （Bootstrap 如何做的）</li></ul></li></ol></blockquote><ul><li><strong>实操</strong></li><li><strong>思考</strong><ul><li>高度塌陷产生的原因是什么？</li><li><code>clear</code> 属性清除浮动的原理是什么？</li><li>采用 BFC 解决高度塌陷和<code>clear</code> 属性清除浮动相比的优势是什么？</li></ul></li></ul><h3 id="伪元素、伪类、二者的区别-css-中的-background-的-background-image-属性可以和-background-color-属性一起生效么" tabindex="-1"><a class="header-anchor" href="#伪元素、伪类、二者的区别-css-中的-background-的-background-image-属性可以和-background-color-属性一起生效么" aria-hidden="true">#</a> 伪元素、伪类、二者的区别### CSS 中的 <code>background</code> 的 <code>background-image</code> 属性可以和 <code>background-color</code> 属性一起生效么？</h3><h3 id="img-后缀" tabindex="-1"><a class="header-anchor" href="#img-后缀" aria-hidden="true">#</a> img 后缀</h3><ul><li>svg：图片在<strong>放大或改变尺寸的情况下其图形质量不会有所损失</strong>，适合<strong>小图标</strong>；</li><li>png：<strong>无损压缩</strong>，更适合需要<strong>高保真</strong>的修饰图片；</li><li>jpeg：支持<strong>高动态范围成像</strong>，支持<strong>图片透明度</strong>，色彩丰富的照片；</li><li>gif：可插入多帧，从而实现<strong>动画效果</strong>，可设置透明色以产生对象浮现于背景之上的效果。</li></ul><h3 id="img-属性-alt-和-title-的区别" tabindex="-1"><a class="header-anchor" href="#img-属性-alt-和-title-的区别" aria-hidden="true">#</a> img 属性 alt 和 title 的区别</h3><h3 id="background-color-属性可以覆盖-background-image-属性吗" tabindex="-1"><a class="header-anchor" href="#background-color-属性可以覆盖-background-image-属性吗" aria-hidden="true">#</a> <code>background-color</code> 属性可以覆盖 <code>background-image</code> 属性吗？</h3><h3 id="reset-css-为什么要使用-初始化-css-的作用与好处" tabindex="-1"><a class="header-anchor" href="#reset-css-为什么要使用-初始化-css-的作用与好处" aria-hidden="true">#</a> reset.css？为什么要使用？（初始化 CSS 的作用与好处？）</h3><p>​ 重置的目的不是清除浏览器的默认样式，这仅是部分工作。我们希望让默认样式在所有浏览器基本保持一致，从而减少默认样式有可能带来的问题。我们应该清楚，清除和重置是紧密不可分的。（因为浏览器的品种很多，每个浏览器的默认样式也是不同的，所以定义一套初始化 css 可以使各浏览器的默认样式统一。以便项目在不同浏览器上的效果是一致的）</p><h3 id="css-中哪些属性可以继承" tabindex="-1"><a class="header-anchor" href="#css-中哪些属性可以继承" aria-hidden="true">#</a> CSS 中哪些属性可以继承？</h3>',13),T={href:"http://dukangblog.top/2020/03/30/HTML.CSS-%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7/",target:"_blank",rel:"noopener noreferrer"},H=n(`<h3 id="什么是-css-的选择器" tabindex="-1"><a class="header-anchor" href="#什么是-css-的选择器" aria-hidden="true">#</a> 什么是 css 的选择器？</h3><p>​ CSS 是一种用于屏幕上渲染 html，xml 等一种语言，CSS 主要是在相应的元素中应用样式，来渲染相对应用的元素，那么这样我们选择相应的元素就很重要了，如何选择对应的元素，此时就需要我们所说的选择器。在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。选择器主要是用来确定 html 的树形结构中的 DOM 元素节点</p><h3 id="web-标准" tabindex="-1"><a class="header-anchor" href="#web-标准" aria-hidden="true">#</a> Web 标准</h3><p>Web 标准不是某一个标准，是由 W3C 和其他标准化组织指定的一系列标准的集合，主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><ul><li>好处</li></ul><ol><li>让 Web 的发展前景更广阔</li><li>内容能被更广泛的设备访问</li><li>更容易被搜索引擎搜索</li><li>降低网站流量费用</li><li>使网站更易于维护</li><li>提高页面浏览速度</li></ol><h3 id="css-引入的方式有哪些-link-和-import-的区别" tabindex="-1"><a class="header-anchor" href="#css-引入的方式有哪些-link-和-import-的区别" aria-hidden="true">#</a> CSS 引入的方式有哪些? link 和@import 的区别?</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. link可以用js修改，@import不可以
2. link比@import先载入
3. @import只能引入css
4. link兼容性高
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-css-sprites-精灵" tabindex="-1"><a class="header-anchor" href="#什么是-css-sprites-精灵" aria-hidden="true">#</a> 什么是 css sprites（精灵）</h3>`,9),O={href:"https://www.cnblogs.com/yangguoe/p/8466117.html",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,[e("strong",null,"加速的关键，不是降低质量，而是减少个数。")],-1),j=e("p",null,"css sprites 适用范围：",-1),D=e("p",null,"1，需要通过降低 http 请求数完成网页加速。",-1),N=e("p",null,"2，网页中含有大量小图标。或者，某些图标通用性很强。",-1),W=e("p",null,"3，网页中有需要预载的图片。主要是 a 与 a:hover 背景图这种关系的。如果 a 与 a:hover 的背景图分别加载，那么，就会出现用户鼠标移到某个按钮上，按钮的背景突然消失再出来，产生“闪烁”，如果按钮文字色与大背景相同或相近，就更囧了，有可能让人产生按钮“消失”了的错觉。",-1),z={id:"css-中的-vertical-align-属性值-什么情况下生效",tabindex:"-1"},A=e("a",{class:"header-anchor",href:"#css-中的-vertical-align-属性值-什么情况下生效","aria-hidden":"true"},"#",-1),V={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"vertical-align",-1),P=n("<ul><li><p><code>vertical-align</code> 生效的前提</p><ol><li>内联元素 <code>span</code> <code>strong</code> <code>em</code> <code>img</code> <code>button</code> <code>input</code> 等；</li><li><code>display</code> 属性值为<code>inline</code> <code>inline-block</code> <code>inline-table</code> 或 <code>table-cell</code>;</li></ol><p><strong>特别注意：浮动和绝对定位会让元素块状化，不会生效。</strong></p></li><li><p><code>vertical-align</code> 的属性值：</p><p>线类：<code>baseline</code> <code>top</code> <code>middle</code> <code>bottom</code></p><p>文本类：<code>text-top</code>、<code>text-bottom</code></p><p>上标下标类：<code>sub</code>、<code>super</code></p><p>数值百分比类：20px、2em、20%等（对于基线往上或往下偏移）</p></li></ul><p><code>提示</code></p><blockquote><p><code>负值</code> 相对于基线往下移，<code>正值</code> 往上移；</p><p><code>vertical-align：baseline</code> 等同于 <code>vertical-align：0</code> ;</p><p>巧用正负值。</p></blockquote>",3);function U(Y,G){const o=a("ExternalLinkIcon");return s(),c("div",null,[d,e("ul",null,[p,e("li",null,[u,e("ul",null,[h,e("li",null,[e("p",null,[e("a",g,[l("模块化"),i(o)])])]),b,m]),_]),e("li",null,[k,e("ul",null,[f,v,x,e("li",null,[e("a",S,[l("模块化"),i(o)]),l("（CommonJS、AMD/CMD、ES6）")]),C,q])])]),w,e("p",null,[e("a",y,[l("llink"),i(o)])]),B,e("ul",null,[e("li",null,[F,e("ul",null,[e("li",null,[e("a",E,[l("弹性布局"),i(o)])]),e("li",null,[e("a",M,[l("常见布局的 Flex 写法"),i(o)])])])])]),L,e("p",null,[e("a",T,[l("可继承的属性"),i(o)])]),H,e("p",null,[e("a",O,[l("https://www.cnblogs.com/yangguoe/p/8466117.html"),i(o)])]),I,j,D,N,W,e("h3",z,[A,l(" CSS 中的 "),e("a",V,[J,i(o)]),l(" 属性值？什么情况下生效？")]),P])}const R=t(r,[["render",U],["__file","HTML-CSS.html.vue"]]);export{R as default};
