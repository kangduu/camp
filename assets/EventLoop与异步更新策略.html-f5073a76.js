const e=JSON.parse('{"key":"v-dbde3556","path":"/performance/EventLoop%E4%B8%8E%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5.html","title":"千方百计——Event Loop 与异步更新策略","lang":"zh-CN","frontmatter":{"description":"千方百计——Event Loop 与异步更新策略 Vue 和 React 都实现了异步更新策略。虽然实现的方式不尽相同，但都达到了减少 DOM 操作、避免过度渲染的目的。通过研究框架的运行机制，其设计思路将深化我们对 DOM 优化的理解，其实现手法将拓宽我们对 DOM 实践的认知。 本节我们将基于 Event Loop 机制，对 Vue 的异步更新策略作探讨。 前置知识：Event Loop 中的“渲染时机” 搞懂 Event Loop，是理解 Vue 对 DOM 操作优化的第一步。 Micro-Task 与 Macro-Task","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/performance/EventLoop%E4%B8%8E%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"千方百计——Event Loop 与异步更新策略"}],["meta",{"property":"og:description","content":"千方百计——Event Loop 与异步更新策略 Vue 和 React 都实现了异步更新策略。虽然实现的方式不尽相同，但都达到了减少 DOM 操作、避免过度渲染的目的。通过研究框架的运行机制，其设计思路将深化我们对 DOM 优化的理解，其实现手法将拓宽我们对 DOM 实践的认知。 本节我们将基于 Event Loop 机制，对 Vue 的异步更新策略作探讨。 前置知识：Event Loop 中的“渲染时机” 搞懂 Event Loop，是理解 Vue 对 DOM 操作优化的第一步。 Micro-Task 与 Macro-Task"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T14:05:38.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-26T14:05:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"千方百计——Event Loop 与异步更新策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T14:05:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"前置知识：Event Loop 中的“渲染时机”","slug":"前置知识-event-loop-中的-渲染时机","link":"#前置知识-event-loop-中的-渲染时机","children":[{"level":3,"title":"Micro-Task 与 Macro-Task","slug":"micro-task-与-macro-task","link":"#micro-task-与-macro-task","children":[]},{"level":3,"title":"Event Loop 过程解析","slug":"event-loop-过程解析","link":"#event-loop-过程解析","children":[]},{"level":3,"title":"渲染的时机","slug":"渲染的时机","link":"#渲染的时机","children":[]}]},{"level":2,"title":"生产实践：异步更新策略——以 Vue 为例","slug":"生产实践-异步更新策略——以-vue-为例","link":"#生产实践-异步更新策略——以-vue-为例","children":[{"level":3,"title":"异步更新的优越性","slug":"异步更新的优越性","link":"#异步更新的优越性","children":[]},{"level":3,"title":"Vue状态更新手法：nextTick","slug":"vue状态更新手法-nexttick","link":"#vue状态更新手法-nexttick","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1740578738000,"updatedTime":1740578738000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":8.16,"words":2448},"filePathRelative":"performance/EventLoop与异步更新策略.md","localizedDate":"2025年2月26日","excerpt":"<h1> 千方百计——Event Loop 与异步更新策略</h1>\\n<p>Vue 和 React 都实现了异步更新策略。虽然实现的方式不尽相同，但都达到了减少 DOM 操作、避免过度渲染的目的。通过研究框架的运行机制，其设计思路将深化我们对 DOM 优化的理解，其实现手法将拓宽我们对 DOM 实践的认知。</p>\\n<p>本节我们将基于 Event Loop 机制，对 Vue 的异步更新策略作探讨。</p>\\n<h2> 前置知识：Event Loop 中的“渲染时机”</h2>\\n<p>搞懂 Event Loop，是理解 Vue 对 DOM 操作优化的第一步。</p>\\n<h3> Micro-Task 与 Macro-Task</h3>","autoDesc":true}');export{e as data};
