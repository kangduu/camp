import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as d,a as e,b as l,d as a,e as n}from"./app-ce51ebc2.js";const t={},h={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},s={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},u={href:"https://liaoxuefeng.com/books/git/introduction/index.html",target:"_blank",rel:"noopener noreferrer"},p={href:"https://mp.weixin.qq.com/s/oKMdlo6jsIcMcZW8nzoAUg",target:"_blank",rel:"noopener noreferrer"},f=n('<h2 id="git-commit-type-recommend" tabindex="-1"><a class="header-anchor" href="#git-commit-type-recommend" aria-hidden="true">#</a> git commit type recommend</h2><blockquote><p>提交类型(type)用于说明此次提交的类型，需要指定为下面其中一个</p></blockquote><ul><li><code>feat</code> 引入新功能</li><li><code>fix</code> 修复 bug</li><li><code>style</code> 更新 UI 样式文件</li><li><code>format</code> 格式化代码</li><li><code>docs</code> 添加/更新文档</li><li><code>perf</code> 提高性能/优化</li><li><code>init</code> 初次提交/初始化项目</li><li><code>test</code> 增加测试代码</li><li><code>refactor</code> 改进代码结构/代码格式</li><li><code>patch</code> 添加重要补丁</li><li><code>file</code> 添加文件</li><li><code>release</code> 发布新版本</li><li><code>tag</code> 发布版本/添加标签</li><li><code>config</code> 修改配置文件</li><li><code>git</code> 添加或修改.gitignore 文件不可见</li><li><code>chore</code> 构建过程或辅助工具的变动</li><li><code>ci</code> 对 CI 配置文件和脚本的更改</li><li><code>revert</code> 恢复(Revert acommit)，是把这次提交的修改给还原</li></ul><p>当然，上述 commit 只是推荐写法，若团队有自己的标准，应当遵守团队的规范。</p><h2 id="git-branch-name-standard" tabindex="-1"><a class="header-anchor" href="#git-branch-name-standard" aria-hidden="true">#</a> git branch name standard</h2><p>在 Git 开发中，命名分支时遵循一定的规范可以帮助团队成员更容易理解分支的目的和功能。常见的分支命名约定通常会根据开发流程的不同而有所不同，但有一些通用的规则和推荐做法。以下是一些常见的分支命名约定：</p><h3 id="主要分支-main-branches" tabindex="-1"><a class="header-anchor" href="#主要分支-main-branches" aria-hidden="true">#</a> 主要分支（Main Branches）</h3><ul><li><code>main</code> 或 <code>master</code>：这是项目的主分支，通常包含可发布的代码。现代 Git 项目通常使用 <code>main</code> 作为默认主分支名称。</li><li><code>develop</code>：这是开发分支，用于集成所有开发者的工作，通常在这里进行多功能的开发，直到准备好合并到 <code>main</code> 分支。</li></ul><h3 id="功能分支-feature-branches" tabindex="-1"><a class="header-anchor" href="#功能分支-feature-branches" aria-hidden="true">#</a> 功能分支（Feature Branches）</h3><p>功能分支用于开发新特性或功能，通常从 <code>develop</code> 分支分出。命名规范：</p><ul><li>格式：<code>feature/功能描述</code> 或 <code>feature/任务ID-功能描述</code></li><li>示例： <ul><li>feature/login-page</li><li>feature/1234-add-user-authentication</li></ul></li></ul><p>这有助于确保每个功能分支的名称都能简明扼要地描述所开发的功能或任务。</p><h3 id="修复分支-bugfix-branches" tabindex="-1"><a class="header-anchor" href="#修复分支-bugfix-branches" aria-hidden="true">#</a> 修复分支（Bugfix Branches）</h3><p>用于修复 bug，通常也是从 <code>develop</code> 分支分出，修复完成后再合并回 <code>develop</code> 或 <code>main</code>。</p><ul><li><p>格式：<code>bugfix/问题描述</code> 或 <code>bugfix/任务ID-问题描述</code></p></li><li><p>示例：</p><ul><li>bugfix/fix-login-error</li><li>bugfix/4321-crash-on-submit</li></ul></li></ul><h3 id="发布分支-release-branches" tabindex="-1"><a class="header-anchor" href="#发布分支-release-branches" aria-hidden="true">#</a> 发布分支（Release Branches）</h3><p>发布分支用于准备新版本发布，通常是从 <code>develop</code> 分支创建，进行最终的 bug 修复、文档更新和其他准备工作。完成后合并到 main 和 <code>develop</code>。</p><ul><li>格式：<code>release/版本号</code> 或 <code>release/目标版本</code></li><li>示例： <ul><li>release/1.0.0</li><li>release/2.1.0</li></ul></li></ul><h3 id="热修复分支-hotfix-branches" tabindex="-1"><a class="header-anchor" href="#热修复分支-hotfix-branches" aria-hidden="true">#</a> 热修复分支（Hotfix Branches）</h3><p>热修复分支用于快速修复生产环境中的严重问题，通常是从 <code>main</code> 分支分出，修复完成后合并回 <code>main</code> 和 <code>develop</code>。</p><ul><li>格式：<code>hotfix/问题描述</code> 或 <code>hotfix/任务ID-问题描述</code></li><li>示例： <ul><li>hotfix/fix-critical-login-bug</li><li>hotfix/3010-urgent-security-patch</li></ul></li></ul><h3 id="实验性分支-experimental-branches" tabindex="-1"><a class="header-anchor" href="#实验性分支-experimental-branches" aria-hidden="true">#</a> 实验性分支（Experimental Branches）</h3><p>如果你在进行实验或尝试新的技术或特性，可以使用实验性分支：</p><ul><li>格式：<code>experiment/实验描述</code></li><li>示例： <ul><li>experiment/graphql-integration</li><li>experiment/featureX-experiment</li></ul></li></ul><h3 id="合并分支-merge-branches" tabindex="-1"><a class="header-anchor" href="#合并分支-merge-branches" aria-hidden="true">#</a> 合并分支（Merge Branches）</h3><p>合并分支通常由 Git 自动创建，例如从 feature 分支合并到 <code>develop</code> 或 <code>main</code>。这些分支不需要特别命名，通常是用 merge 或相关的合并工具来执行。</p><h3 id="命名最佳实践总结" tabindex="-1"><a class="header-anchor" href="#命名最佳实践总结" aria-hidden="true">#</a> 命名最佳实践总结</h3><ul><li>简洁：分支名称应简洁明了，能清晰表明分支的目的。</li><li>描述性：描述分支的功能、修复或目的，避免使用模糊的词汇。</li><li>任务/问题跟踪号：如果你使用任务管理系统（如 JIRA、Trello），可以在分支名称中包含任务编号，例如 feature/1234-add-search-functionality。</li><li>一致性：保持团队内部分支命名的统一性，遵循一致的规则。</li></ul><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><ul><li>feature/login-form</li><li>bugfix/fix-header-layout</li><li>release/2.0.0</li><li>hotfix/security-patch</li></ul>',30);function m(b,g){const i=r("ExternalLinkIcon");return c(),d("div",null,[e("ul",null,[e("li",null,[e("p",null,[e("a",h,[l("git-scm"),a(i)])])]),e("li",null,[e("p",null,[e("a",s,[l("Learning Git Branching"),a(i)])])]),e("li",null,[e("p",null,[e("a",u,[l("廖雪峰的 Git 教程"),a(i)])])]),e("li",null,[e("p",null,[e("a",p,[l("图解常用的 Git 指令含义"),a(i)])])])]),f])}const v=o(t,[["render",m],["__file","index.html.vue"]]);export{v as default};
