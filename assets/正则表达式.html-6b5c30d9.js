import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as p,a as n,b as t,d as a,f as c}from"./app-fc02369b.js";const u={},r=n("h3",{id:"运算优先级",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#运算优先级","aria-hidden":"true"},"#"),t(" 运算优先级")],-1),i=n("p",null,[n("code",null,"从左到右，从高到低")],-1),d=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"运算符"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",null,"\\"),n("td",null,"转义符")]),n("tr",null,[n("td",null,"(), (?😃, (?=), []"),n("td",null,"圆括号和方括号")]),n("tr",null,[n("td",{"n,m":""},"*, +, ?, {n}, {n,},"),n("td",null,"限定符")]),n("tr",null,[n("td",null,"^, $, \\任何元字符、任何字符"),n("td",null,"定位点和序列（即：位置和顺序）")]),n("tr",null,[n("td",null,"|"),n("td",null,'替换，"或"操作字符具有高于替换运算符的优先级，使得"m|food"匹配"m"或"food"。若要匹配"mood"或"food"，请使用括号创建子表达式，从而产生"(m|f)ood"。')])])],-1),k=n("h3",{id:"元字符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#元字符","aria-hidden":"true"},"#"),t(" 元字符")],-1),m=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"字符"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},"\\"),n("td",null,[t("将下一个字符标记为一个特殊字符、或一个原义字符、或一个 "),n("strong",null,"向后引用"),t(`、或一个八进制转义符。如：'n' 匹配字符 "n"。'\\n' 匹配一个换行符。序列 '\\' 匹配 "" 而 "(" 则匹配 "("。`)])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"^"),n("td",null,[t("匹配输入字符串的"),n("code",null,"开始位置"),t("。"),n("br"),t("如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。")])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"$"),n("td",null,[t("匹配输入字符串的"),n("code",null,"结束位置"),t("。"),n("br"),t("如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。")])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"*"),n("td",null,[t("匹配前面的子表达式"),n("code",null,"零次或多次"),t("。"),n("br"),t('例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。')])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"+"),n("td",null,[t("匹配前面的子表达式"),n("code",null,"一次或多次"),t("。"),n("br"),t(`如：'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。`)])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"?"),n("td",null,[t("匹配前面的子表达式"),n("code",null,"零次或一次"),t("。"),n("br"),t('如："do(es)?" 可以匹配 "do" 或 "does" 。? 等价于 {0,1}。')])]),n("tr",null,[n("td",{style:{"text-align":"left"},n:""}),n("td",null,[t("n 是一个非负整数。匹配"),n("code",null,"确定的 n 次"),t("。"),n("br"),t(`如：'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。（）`)])]),n("tr",null,[n("td",{style:{"text-align":"left"},"n,":""}),n("td",null,[t("n 是一个非负整数。"),n("code",null,"至少匹配 n 次"),t("。"),n("br"),t(`如：'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。`)])]),n("tr",null,[n("td",{style:{"text-align":"left"},"n,m":""}),n("td",null,[t("m 和 n 均为非负整数，其中"),n("code",null,"n <= m"),t("。"),n("code",null,"最少匹配 n 次 且 最多匹配 m 次"),t("。"),n("br"),t(`如："o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。`)])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"?"),n("td",null,`当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。如：对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"."),n("td",null,[t(`匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像"`),n("strong",null,"(.|\\n)"),t('"的模式。')])]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(pattern)"),n("td",null,"匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '(' 或 ')'。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(?:pattern)"),n("td",null,`匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。如： 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(?=pattern)"),n("td",null,'正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。如："Windows(?=95|98|NT|2000)"能匹配"Windows2000"中的"Windows"，但不能匹配"Windows3.1"中的"Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。')]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(?!pattern)"),n("td",null,'正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如"Windows(?!95|98|NT|2000)"能匹配"Windows3.1"中的"Windows"，但不能匹配"Windows2000"中的"Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。')]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(?<=pattern)"),n("td",null,'反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。如："`(?<=95')]),n("tr",null,[n("td",{style:{"text-align":"left"}},"(?<!pattern)"),n("td",null,'反向否定预查，与正向否定预查类似，只是方向相反。例如"`(?<!95')]),n("tr",null,[n("td",{style:{"text-align":"left"}},"x|y"),n("td",null,`匹配 x 或 y。如：'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"[xyz]"),n("td",null,`字符集合。匹配所包含的任意一个字符。如： '[abc]' 可以匹配 "plain" 中的 'a'。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"[^xyz]"),n("td",null,`负值字符集合。匹配未包含的任意字符。如： '[^abc]' 可以匹配 "plain" 中的'p'、'l'、'i'、'n'。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"[a-z]"),n("td",null,"字符范围。匹配指定范围内的任意字符。如：'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"[^a-z]"),n("td",null,"负值字符范围。匹配任何不在指定范围内的任意字符。如：'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\b"),n("td",null,`匹配一个单词边界，也就是指单词和空格间的位置。如： 'er\\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\B"),n("td",null,`匹配非单词边界。'er\\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\cx"),n("td",null,"匹配由 x 指明的控制字符。如： \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\d"),n("td",null,"匹配一个数字字符。等价于 [0-9]。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\D"),n("td",null,"匹配一个非数字字符。等价于 [^0-9]。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\f"),n("td",null,"匹配一个换页符。等价于 \\x0c 和 \\cL。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\n"),n("td",null,"匹配一个换行符。等价于 \\x0a 和 \\cJ。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\r"),n("td",null,"匹配一个回车符。等价于 \\x0d 和 \\cM。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\s"),n("td",null,"匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\S"),n("td",null,"匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\t"),n("td",null,"匹配一个制表符。等价于 \\x09 和 \\cI。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\v"),n("td",null,"匹配一个垂直制表符。等价于 \\x0b 和 \\cK。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\w"),n("td",null,"匹配字母、数字、下划线。等价于'[A-Za-z0-9_]'。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\W"),n("td",null,"匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\xn"),n("td",null,`匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。如：'\\x41' 匹配 "A"。'\\x041' 则等价于 '\\x04' & "1"。正则表达式中可以使用 ASCII 编码。`)]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\num"),n("td",null,"匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。如：'(.)\\1' 匹配两个连续的相同字符。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\n"),n("td",null,"标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\nm"),n("td",null,"标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\nml"),n("td",null,"如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。")]),n("tr",null,[n("td",{style:{"text-align":"left"}},"\\un"),n("td",null,"匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。如： \\u00A9 匹配版权符号 (?)。")])])],-1),g=c(`<h3 id="常用正则表达式" tabindex="-1"><a class="header-anchor" href="#常用正则表达式" aria-hidden="true">#</a> 常用正则表达式</h3><ol><li><p><strong>[0,1)</strong> 的数字 <code>/^[0](\\.\\d+)?$/.test(value)</code></p></li><li><p>正整数 <code>/^[1-9]\\d*$/.test(value)</code></p></li><li><p><s>整数 <code>/^(-?[1-9]*)$/.test(value) 和 /^-?0{1}$/.test(value)</code> 【正整数、负整数、正负0】</s></p></li><li><p>大于0 的自然数 <code>/^[0](\\.\\d+)$/.test(value) 和 /^[1-9]\\d*(\\.\\d+)?$/.test(value)</code></p><p>​</p></li></ol><h3 id="qa" tabindex="-1"><a class="header-anchor" href="#qa" aria-hidden="true">#</a> QA</h3><h5 id="正则表达式出现的-1代表什么意思" tabindex="-1"><a class="header-anchor" href="#正则表达式出现的-1代表什么意思" aria-hidden="true">#</a> 正则表达式出现的 <code>\\1</code>代表什么意思？</h5><blockquote><p>正则表达式中的小括号<code>()</code>代表分组的意思。如果在其后面出现<code>\\1</code>则是代表<strong>与小括号中要匹配的内容相同</strong>。</p><p><strong>注意</strong>：<code>\\1</code> 必须与小括号配合使用</p></blockquote><p>示例</p><ol><li><p><code> /([yMdhsm])\\1*/g</code> 时间格式判断</p><p>首先<code>()</code>中[yMdhsm] 字符集合，匹配<code>yMdhsm</code>的任意一个字符；其后面出现<code>\\1</code> ，且存在<code>*</code> 匹配前面的子表达式<code>零次或多次</code> ,则是代表继续匹配相同的字符；所以，最终<strong>连续相同的字符</strong>匹配。</p></li><li><p>判断一个字符串中出现次数最多的字符，并统计次数 <code> /(\\w)\\1*/g</code></p><p><code> /(\\w)\\1*/g</code> 解析同【1】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxChart</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> charts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> common <span class="token operator">=</span> charts<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> maxStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      len <span class="token operator">=</span> <span class="token number">0</span>
  common<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxStr <span class="token operator">=</span> val
      len <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> maxStr <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> len
<span class="token punctuation">}</span>
<span class="token comment">// 1. 长度为 1 的情况</span>
<span class="token comment">// 2. 最大长度多个相同的</span>
<span class="token comment">// 3. 参数非法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>返回字符串最长重复字符字串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxChart</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> common <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)\\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> maxStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      len <span class="token operator">=</span> <span class="token number">0</span>
  common<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxStr <span class="token operator">=</span> val
      len <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> maxStr <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> len
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,8),x={href:"https://www.runoob.com/regexp/regexp-tutorial.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.runoob.com/regexp/regexp-rule.html",target:"_blank",rel:"noopener noreferrer"};function v(h,b){const s=e("ExternalLinkIcon");return o(),p("div",null,[r,i,d,k,m,g,n("p",null,[n("a",x,[t("菜鸟教程"),a(s)])]),n("p",null,[n("a",f,[t("匹配规则"),a(s)])])])}const w=l(u,[["render",v],["__file","正则表达式.html.vue"]]);export{w as default};
