const e=JSON.parse('{"key":"v-36cd496b","path":"/performance/%E8%A7%A3%E9%94%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%83%8C%E5%90%8E%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html","title":"知己知彼——解锁浏览器背后的运行机制","lang":"zh-CN","frontmatter":{"description":"知己知彼——解锁浏览器背后的运行机制 从本章开始，我们的性能优化探险也正式进入到了“深水区”——浏览器端的性能优化。 平时我们几乎每天都在和浏览器打交道，在一些兼容任务比较繁重的团队里，苦逼的前端攻城师们甚至为了兼容各个浏览器而不断地去测试和调试，还要在脑子中记下各种遇到的 BUG 及解决方案。即便如此，我们好像并没有去主动地关注和了解下浏览器的工作原理。我想如果我们对此做一点了解，在项目过程中就可以有效地避免一些问题，并对页面性能做出相应的改进。 “知己知彼，百战不殆”，今天，我们就一起来揭开浏览器渲染过程的神秘面纱！ 浏览器的“心”","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/performance/%E8%A7%A3%E9%94%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%83%8C%E5%90%8E%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"知己知彼——解锁浏览器背后的运行机制"}],["meta",{"property":"og:description","content":"知己知彼——解锁浏览器背后的运行机制 从本章开始，我们的性能优化探险也正式进入到了“深水区”——浏览器端的性能优化。 平时我们几乎每天都在和浏览器打交道，在一些兼容任务比较繁重的团队里，苦逼的前端攻城师们甚至为了兼容各个浏览器而不断地去测试和调试，还要在脑子中记下各种遇到的 BUG 及解决方案。即便如此，我们好像并没有去主动地关注和了解下浏览器的工作原理。我想如果我们对此做一点了解，在项目过程中就可以有效地避免一些问题，并对页面性能做出相应的改进。 “知己知彼，百战不殆”，今天，我们就一起来揭开浏览器渲染过程的神秘面纱！ 浏览器的“心”"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T14:05:38.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-26T14:05:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"知己知彼——解锁浏览器背后的运行机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T14:05:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"浏览器的“心”","slug":"浏览器的-心","link":"#浏览器的-心","children":[]},{"level":2,"title":"开启浏览器渲染“黑盒”","slug":"开启浏览器渲染-黑盒","link":"#开启浏览器渲染-黑盒","children":[]},{"level":2,"title":"浏览器渲染过程解析","slug":"浏览器渲染过程解析","link":"#浏览器渲染过程解析","children":[]},{"level":2,"title":"几棵重要的“树”","slug":"几棵重要的-树","link":"#几棵重要的-树","children":[]},{"level":2,"title":"不做无用功：基于渲染流程的 CSS 优化建议","slug":"不做无用功-基于渲染流程的-css-优化建议","link":"#不做无用功-基于渲染流程的-css-优化建议","children":[]},{"level":2,"title":"告别阻塞：CSS 与 JS 的加载顺序优化","slug":"告别阻塞-css-与-js-的加载顺序优化","link":"#告别阻塞-css-与-js-的加载顺序优化","children":[{"level":3,"title":"CSS 的阻塞","slug":"css-的阻塞","link":"#css-的阻塞","children":[]},{"level":3,"title":"JS 的阻塞","slug":"js-的阻塞","link":"#js-的阻塞","children":[]},{"level":3,"title":"JS的三种加载方式","slug":"js的三种加载方式","link":"#js的三种加载方式","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1740578738000,"updatedTime":1740578738000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":14.02,"words":4205},"filePathRelative":"performance/解锁浏览器背后的运行机制.md","localizedDate":"2025年2月26日","excerpt":"<h1> 知己知彼——解锁浏览器背后的运行机制</h1>\\n<p>从本章开始，我们的性能优化探险也正式进入到了“深水区”——浏览器端的性能优化。</p>\\n<p>平时我们几乎每天都在和浏览器打交道，在一些兼容任务比较繁重的团队里，苦逼的前端攻城师们甚至为了兼容各个浏览器而不断地去测试和调试，还要在脑子中记下各种遇到的 BUG 及解决方案。即便如此，我们好像并没有去主动地关注和了解下浏览器的工作原理。我想如果我们对此做一点了解，在项目过程中就可以有效地避免一些问题，并对页面性能做出相应的改进。</p>\\n<p>“知己知彼，百战不殆”，今天，我们就一起来揭开浏览器渲染过程的神秘面纱！</p>\\n<h2> 浏览器的“心”</h2>","autoDesc":true}');export{e as data};
