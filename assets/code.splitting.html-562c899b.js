import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-c0280372.js";const i={},u=n("p",null,"常用的代码分离方法有三种：",-1),r=n("li",null,"入口起点：使用 entry 配置手动地分离代码。",-1),d={href:"https://webpack.docschina.org/configuration/entry-context/#dependencies",target:"_blank",rel:"noopener noreferrer"},k={href:"https://webpack.docschina.org/plugins/split-chunks-plugin",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"动态导入：通过模块的内联函数调用分离代码。",-1),m=e(`<h2 id="入口起点" tabindex="-1"><a class="header-anchor" href="#入口起点" aria-hidden="true">#</a> 入口起点</h2><p>这种方式存在一些隐患：</p><ul><li>如果入口 chunk 之间包含一些重复的模块，那么这些<strong>重复模块会被引入到各个 bundle 中</strong>。</li><li>这种方法不够灵活，并且不能动态地拆分应用程序逻辑中的核心代码。</li></ul><h2 id="防止重复" tabindex="-1"><a class="header-anchor" href="#防止重复" aria-hidden="true">#</a> 防止重复</h2><ul><li><code>dependOn</code> 在多个 chunk 之间共享模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/another-module.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管 webpack 允许每个页面使用多个入口起点，但在可能的情况下，应该避免使用多个入口起点，而使用具有多个导入的单个入口起点：entry: { page: [&#39;./analytics&#39;, &#39;./app&#39;] }。这样可以获得更好的优化效果，并在使用异步脚本标签时保证执行顺序一致。</p>`,7),h={href:"https://webpack.docschina.org/plugins/split-chunks-plugin",target:"_blank",rel:"noopener noreferrer"},b=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- dist dic --&gt;
----dist
|---another.bundle.js
|---index.bundle.js
|---index.html
|---vendors-node_modules_lodash_lodash_js.bundle.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"https://webpack.docschina.org/plugins/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"动态导入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#动态导入","aria-hidden":"true"},"#"),s(" 动态导入")],-1),f={href:"https://webpack.docschina.org/api/module-methods/#import",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">function</span> <span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> _ <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// * 注意这里</span>
      <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;An error occurred while loading the component&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q={href:"https://webpack.docschina.org/api/module-methods/#requireensure",target:"_blank",rel:"noopener noreferrer"},x=e(`<h2 id="预获取-预加载模块" tabindex="-1"><a class="header-anchor" href="#预获取-预加载模块" aria-hidden="true">#</a> 预获取/预加载模块</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//...</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&quot;./path/to/LoginModal.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码在构建时会生成 <link rel="prefetch" href="login-modal-chunk.js"> 并追加到页面头部，指示浏览器在闲置时间预获取 login-modal-chunk.js 文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//...</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPreload: true */</span> <span class="token string">&quot;ChartingLibrary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不正确地使用 webpackPreload 会有损性能，请谨慎使用。</p></blockquote><ul><li>预获取指令 和 预加载指令 不同之处：</li></ul><ol><li>预加载 chunk 会在父 chunk 加载时以并行方式开始加载；而预获取 chunk 会在父 chunk 加载结束后开始加载。</li><li>预加载 chunk 具有中等优先级，并会立即下载；而预获取 chunk 则在浏览器闲置时下载。</li><li>预加载 chunk 会在父 chunk 中立即请求，用于当下时刻；而预获取 chunk 则用于未来的某个时刻。</li><li>浏览器支持程度不同。</li></ol>`,7);function j(w,C){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[r,n("li",null,[s("防止重复：使用 "),n("a",d,[s("入口依赖"),t(a)]),s(" 或者 "),n("a",k,[s("SplitChunksPlugin"),t(a)]),s(" 去重和分离 chunk。")]),v]),m,n("ul",null,[n("li",null,[n("a",h,[s("SplitChunksPlugin"),t(a)])])]),b,n("blockquote",null,[n("p",null,[n("a",g,[s("mini-css-extract-plugin"),t(a)]),s("：用于将 CSS 从主应用程序中分离。")])]),_,n("ul",null,[n("li",null,[n("a",f,[s("import()"),t(a)]),s(" 语法")])]),y,n("ul",null,[n("li",null,[n("a",q,[s("require.ensure"),t(a)])])]),x])}const S=p(i,[["render",j],["__file","code.splitting.html.vue"]]);export{S as default};
