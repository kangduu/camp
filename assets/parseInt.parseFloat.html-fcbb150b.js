import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as i,a,b as n,d as s,e as t}from"./app-008e3195.js";const p={},l=t(`<h1 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt</h1><h3 id="一句话描述" tabindex="-1"><a class="header-anchor" href="#一句话描述" aria-hidden="true">#</a> 一句话描述</h3><blockquote><p>**parseInt(string, radix) ** 将一个字符串 string 转换为 radix 进制的整数， radix 为介于 2-36 之间的数。</p></blockquote><h3 id="grammar" tabindex="-1"><a class="header-anchor" href="#grammar" aria-hidden="true">#</a> grammar</h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意，第一个参数为字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> params</h3><p><code>string</code></p><p>​ 被解析的值。如果不是一个字符串参数，将被（使用 <strong>toString</strong> 方法）转换为字符串。字符串开头的空白符将会被忽略。</p><p><code>radix</code></p><p>​ 一个介于 2 和 36 之间的<strong>整数</strong>，表示字符串（string）的<strong>基数</strong>（进制数）。默认使用十进制。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 你应该总是赋予 radix 有效值（[2-36]）。</label></li></ul><h3 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> return</h3><p>​ 解析后的整数值。若被解析的参数 string 无法被转化成数值类型，则返回<code>NaN</code> 。</p><h3 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况" aria-hidden="true">#</a> 特殊情况</h3><p>在基数为 <code>undefined</code>，或者基数为 <code> 0</code> 或者<code>没有指定</code>的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 <code>string</code> 以&quot;0x&quot;或者&quot;0X&quot;开头, 则基数是 16 (16 进制).</li><li>如果字符串 <code>string</code> 以&quot;0&quot;开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。因此，<strong>永远都要明确给出 radix 参数的值</strong>。</li><li>如果字符串 <code>string</code> 以其它任何值开头，则基数是 10 (十进制)。</li></ul><h3 id="意外的结果" tabindex="-1"><a class="header-anchor" href="#意外的结果" aria-hidden="true">#</a> 意外的结果</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回 NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;546&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN 除了“0、1”外，其它数字都不是有效二进制数字</span>

<span class="token comment">//你可能觉得很不可思议</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">4.7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">4.7</span> <span class="token operator">*</span> <span class="token number">1e22</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 、 非常大的数值变成 4</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.00000000000434</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 、 非常小的数值变成 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="严格解析整数" tabindex="-1"><a class="header-anchor" href="#严格解析整数" aria-hidden="true">#</a> 严格解析整数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">filterInt</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\-|\\+)?([0-9]+|Infinity)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">NaN</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,21),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt",target:"_blank",rel:"noopener noreferrer"},u=a("strong",null,"描述部分",-1),h=t(`<h1 id="parsefloat" tabindex="-1"><a class="header-anchor" href="#parsefloat" aria-hidden="true">#</a> parseFloat</h1><h3 id="一句话描述-1" tabindex="-1"><a class="header-anchor" href="#一句话描述-1" aria-hidden="true">#</a> 一句话描述</h3><blockquote><p>**parseFloat() **函数解析一个参数（<strong>必要时先转换为字符串</strong>）并返回一个浮点数。</p></blockquote><h3 id="grammar-1" tabindex="-1"><a class="header-anchor" href="#grammar-1" aria-hidden="true">#</a> grammar</h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="params-1" tabindex="-1"><a class="header-anchor" href="#params-1" aria-hidden="true">#</a> params</h3><p><code>string</code></p><p>​ 需要被解析成为<strong>浮点数</strong>的值。</p><h3 id="return-1" tabindex="-1"><a class="header-anchor" href="#return-1" aria-hidden="true">#</a> return</h3><p>​ 给定值被解析成浮点数。</p>`,10),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"NaN",-1),b=a("h3",{id:"你应该知道",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#你应该知道","aria-hidden":"true"},"#"),n(" 你应该知道")],-1),g=a("p",null,"​ parseFloat 是一个全局函数，它不属于任何对象。",-1),v=a("h3",{id:"特殊解析情况",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#特殊解析情况","aria-hidden":"true"},"#"),n(" 特殊解析情况")],-1),_=t("<li>如果 <code>parseFloat</code> 在解析过程中 遇到了正号（<code>+</code>）、负号（<code>-</code> ）、数字（<code>0</code>-<code>9</code>）、小数点（<code>.</code>）、或者科学记数法中的指数（e 或 E）<u>以外的字符</u>，则它会<code>忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数</code>。</li><li><u>第二个小数点</u>的出现也会使解析停止（在这之前的字符都会被解析）。</li><li>参数首位和末位的<u>空白</u>符会被忽略。</li><li>如果参数字符串的<u>第一个字符不能被解析成为数字</u>,<code>则</code> <code>parseFloat</code> 返回 <code>NaN</code>。</li>",4),f=a("code",null,"parseFloat",-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity",target:"_blank",rel:"noopener noreferrer"},N=a("code",null,"Infinity",-1),I=a("code",null,"parseFloat",-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"},q=a("code",null,"BigInt",-1),z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},F=a("code",null,"Numbers",-1),S=a("code",null,"n",-1);function y(C,J){const e=r("ExternalLinkIcon");return c(),i("div",null,[l,a("p",null,[a("a",d,[n("parseInt"),s(e)]),n(" 重点阅读理解"),u]),h,a("p",null,[n("​ 如果给定值不能被转换成数值，则会返回 "),a("a",k,[m,s(e)]),n("。")]),b,g,v,a("ul",null,[_,a("li",null,[f,n(" 也可以解析并返回 "),a("a",x,[N,s(e)]),n("。")]),a("li",null,[I,n("解析 "),a("a",j,[q,s(e)]),n(" 为 "),a("a",z,[F,s(e)]),n(", 丢失精度。因为末位 "),S,n(" 字符被丢弃。")])])])}const G=o(p,[["render",y],["__file","parseInt.parseFloat.html.vue"]]);export{G as default};
