const e=JSON.parse('{"key":"v-147041d0","path":"/performance/webpack%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%B8%8EGzip%E5%8E%9F%E7%90%86.html","title":"webpack 性能调优与 Gzip 原理","lang":"zh-CN","frontmatter":{"description":"webpack 性能调优与 Gzip 原理 从本节开始，我们进入网络层面的性能优化世界。 大家可以从第一节的示意图中看出，我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程： DNS 解析 TCP 连接 HTTP 请求/响应 对于 DNS 解析和 TCP 连接两个步骤，我们前端可以做的努力非常有限。相比之下，HTTP 连接这一层面的优化才是我们网络优化的核心。因此我们开门见山，抓主要矛盾，直接从 HTTP 开始讲起。 HTTP 优化有两个大的方向：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/camps/performance/webpack%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%B8%8EGzip%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"杜同学日记"}],["meta",{"property":"og:title","content":"webpack 性能调优与 Gzip 原理"}],["meta",{"property":"og:description","content":"webpack 性能调优与 Gzip 原理 从本节开始，我们进入网络层面的性能优化世界。 大家可以从第一节的示意图中看出，我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程： DNS 解析 TCP 连接 HTTP 请求/响应 对于 DNS 解析和 TCP 连接两个步骤，我们前端可以做的努力非常有限。相比之下，HTTP 连接这一层面的优化才是我们网络优化的核心。因此我们开门见山，抓主要矛盾，直接从 HTTP 开始讲起。 HTTP 优化有两个大的方向："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T14:05:38.000Z"}],["meta",{"property":"article:author","content":"kangduu"}],["meta",{"property":"article:modified_time","content":"2025-02-26T14:05:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack 性能调优与 Gzip 原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T14:05:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"kangduu\\",\\"url\\":\\"https://github.com/kangduu\\"}]}"]]},"headers":[{"level":2,"title":"webpack 的性能瓶颈","slug":"webpack-的性能瓶颈","link":"#webpack-的性能瓶颈","children":[]},{"level":2,"title":"webpack 优化方案","slug":"webpack-优化方案","link":"#webpack-优化方案","children":[{"level":3,"title":"构建过程提速策略","slug":"构建过程提速策略","link":"#构建过程提速策略","children":[]},{"level":3,"title":"构建结果体积压缩","slug":"构建结果体积压缩","link":"#构建结果体积压缩","children":[]}]},{"level":2,"title":"彩蛋：Gzip 压缩原理","slug":"彩蛋-gzip-压缩原理","link":"#彩蛋-gzip-压缩原理","children":[{"level":3,"title":"该不该用 Gzip","slug":"该不该用-gzip","link":"#该不该用-gzip","children":[]},{"level":3,"title":"Gzip 是万能的吗","slug":"gzip-是万能的吗","link":"#gzip-是万能的吗","children":[]},{"level":3,"title":"webpack 的 Gzip 和服务端的 Gzip","slug":"webpack-的-gzip-和服务端的-gzip","link":"#webpack-的-gzip-和服务端的-gzip","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1740578738000,"updatedTime":1740578738000,"contributors":[{"name":"kangduu","email":"dukang1127@163.com","commits":1}]},"readingTime":{"minutes":15.06,"words":4519},"filePathRelative":"performance/webpack性能调优与Gzip原理.md","localizedDate":"2025年2月26日","excerpt":"<h1> webpack 性能调优与 Gzip 原理</h1>\\n<p>从本节开始，我们进入网络层面的性能优化世界。</p>\\n<p>大家可以从第一节的示意图中看出，我们从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：</p>\\n<ul>\\n<li>DNS 解析</li>\\n<li>TCP 连接</li>\\n<li>HTTP 请求/响应</li>\\n</ul>\\n<p>对于 DNS 解析和 TCP 连接两个步骤，我们前端可以做的努力非常有限。相比之下，HTTP 连接这一层面的优化才是我们网络优化的核心。因此我们开门见山，抓主要矛盾，直接从 HTTP 开始讲起。</p>\\n<p>HTTP 优化有两个大的方向：</p>","autoDesc":true}');export{e as data};
