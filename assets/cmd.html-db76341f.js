import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as e,b as a,d as n,e as t}from"./app-c5a91522.js";const l={},r=t(`<h2 id="tsc-编译器" tabindex="-1"><a class="header-anchor" href="#tsc-编译器" aria-hidden="true">#</a> <code>tsc</code> 编译器</h2><p>因为 TypeScript 是一种静态类型语言，编译后才会转化为 JavaScript 执行。因此，通常的步骤是将 TypeScript 文件编译为 JavaScript，然后运行生成的 JavaScript 文件。</p><p>那么我们是不是应该先执行 <code>tsc ***.ts</code> ，然后使用 node 来执行编译后的 js 文件<code>node ***.js</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc hello.ts

<span class="token function">node</span> hello.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们在平时的测试中，希望直接执行 ts 代码，应该怎么做呐？</p><h2 id="使用-ts-node" tabindex="-1"><a class="header-anchor" href="#使用-ts-node" aria-hidden="true">#</a> 使用 <code>ts-node</code></h2><p>ts-node 是一个执行 TypeScript 文件的工具，它会自动编译 TypeScript 文件并执行：</p><ol><li>安装 <code>ts-node</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ts-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>直接运行 ts 文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ts-node hello.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="监听文件变化" tabindex="-1"><a class="header-anchor" href="#监听文件变化" aria-hidden="true">#</a> 监听文件变化</h2><p>TypeScript 提供了两种方式来监听文件变化：<code>tsc --watch</code> 和 <code>tsc -w</code></p><h3 id="使用-ts-node-dev" tabindex="-1"><a class="header-anchor" href="#使用-ts-node-dev" aria-hidden="true">#</a> 使用 <code>ts-node-dev</code></h3><p>在 TypeScript 文件变化时快速重新加载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ts-node-dev

ts-node-dev <span class="token parameter variable">--respawn</span> hello.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--respawn</code> 会确保每次文件变化后，都会重新启动程序，而不会缓存旧的状态。</p><h2 id="关于本地安装依赖执行报错的说明" tabindex="-1"><a class="header-anchor" href="#关于本地安装依赖执行报错的说明" aria-hidden="true">#</a> 关于本地安装依赖执行报错的说明</h2><p><strong>注意</strong> 不使用全局安装 <code>-g</code> ，直接执行 <code>ts-node hello.ts</code> 会报错，解决办法如下：</p><ol><li>使用<code>npx</code>运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx ts-node hello.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用<code>npm run</code>（这需要你在<code>package.json</code>中提前配置命令）</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node hello.ts&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用本地安装的 <code>ts-node</code> 直接执行 (路径查找<code>node_modules</code>下的<code>.bin</code>文件里的<code>ts-node</code>)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./node_modules/.bin/ts-node hello.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li>如果你没有全局安装 <code>ts-node</code>，可以通过 <code>npx ts-node hello.ts</code> 来运行。</li><li>或者，你可以配置 <code>npm run</code> 脚本来运行 <code>ts-node</code>。</li><li>也可以直接访问本地的 <code>node_modules/.bin/</code> 目录来执行。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>执行 TypeScript 文件：通过 tsc 编译后运行 .js 文件，或者使用 ts-node 来直接执行。</li><li>监听文件变化：使用 <code>tsc --watch</code> 或 <code>ts-node-dev</code> 来监听文件变化并自动执行编译和运行。</li></ul><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> dependencies</h2>`,30),p={href:"https://www.npmjs.com/package/ts-node",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.npmjs.com/package/ts-node-dev",target:"_blank",rel:"noopener noreferrer"};function u(v,m){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,e("ul",null,[e("li",null,[e("a",p,[a("ts-node"),n(s)])]),e("li",null,[e("a",h,[a("ts-node-dev"),n(s)])])])])}const _=d(l,[["render",u],["__file","cmd.html.vue"]]);export{_ as default};
